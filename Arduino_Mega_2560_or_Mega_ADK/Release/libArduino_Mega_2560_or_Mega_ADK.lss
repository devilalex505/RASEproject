In archive libArduino_Mega_2560_or_Mega_ADK.a:

CDC.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 00000063  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000195  00000000  00000000  00000097  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000000c1  00000000  00000000  0000022c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_str    000000e8  00000000  00000000  000002ed  2**0
                  CONTENTS, READONLY, DEBUGGING

HID.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 00000063  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000195  00000000  00000000  00000097  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000000c1  00000000  00000000  0000022c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_str    000000e8  00000000  00000000  000002ed  2**0
                  CONTENTS, READONLY, DEBUGGING

HardwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 00000461  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001ce4  00000000  00000000  00000495  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000009b7  00000000  00000000  00002179  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._Z11serialEventv 00000002  00000000  00000000  00002b30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text.__vector_25 00000070  00000000  00000000  00002b32  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._Z12serialEvent1v 00000002  00000000  00000000  00002ba2  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text.__vector_36 00000070  00000000  00000000  00002ba4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._Z12serialEvent2v 00000002  00000000  00000000  00002c14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text.__vector_51 00000070  00000000  00000000  00002c16  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._Z12serialEvent3v 00000002  00000000  00000000  00002c86  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .text.__vector_54 00000070  00000000  00000000  00002c88  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._Z14serialEventRunv 00000092  00000000  00000000  00002cf8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.__vector_26 0000007e  00000000  00000000  00002d8a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text.__vector_37 0000007e  00000000  00000000  00002e08  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text.__vector_52 0000007e  00000000  00000000  00002e86  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text.__vector_55 0000007e  00000000  00000000  00002f04  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh 0000007e  00000000  00000000  00002f82  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh 0000007e  00000000  00000000  00003000  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN14HardwareSerial5beginEm 0000010c  00000000  00000000  0000307e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN14HardwareSerial3endEv 000000cc  00000000  00000000  0000318a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN14HardwareSerial9availableEv 00000022  00000000  00000000  00003256  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text._ZN14HardwareSerial4peekEv 00000040  00000000  00000000  00003278  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN14HardwareSerial4readEv 00000052  00000000  00000000  000032b8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN14HardwareSerial5flushEv 00000024  00000000  00000000  0000330a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN14HardwareSerial5writeEh 00000072  00000000  00000000  0000332e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN14HardwareSerialcvbEv 00000004  00000000  00000000  000033a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text._GLOBAL__I_rx_buffer 0000023c  00000000  00000000  000033a4  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .ctors        00000002  00000000  00000000  000035e0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 31 .bss.rx_buffer 00000044  00000000  00000000  000035e2  2**0
                  ALLOC
 32 .bss.tx_buffer 00000044  00000000  00000000  000035e2  2**0
                  ALLOC
 33 .bss.rx_buffer1 00000044  00000000  00000000  000035e2  2**0
                  ALLOC
 34 .bss.tx_buffer1 00000044  00000000  00000000  000035e2  2**0
                  ALLOC
 35 .bss.rx_buffer2 00000044  00000000  00000000  000035e2  2**0
                  ALLOC
 36 .bss.tx_buffer2 00000044  00000000  00000000  000035e2  2**0
                  ALLOC
 37 .bss.rx_buffer3 00000044  00000000  00000000  000035e2  2**0
                  ALLOC
 38 .bss.tx_buffer3 00000044  00000000  00000000  000035e2  2**0
                  ALLOC
 39 .bss.Serial   0000001f  00000000  00000000  000035e2  2**0
                  ALLOC
 40 .bss.Serial1  0000001f  00000000  00000000  000035e2  2**0
                  ALLOC
 41 .bss.Serial2  0000001f  00000000  00000000  000035e2  2**0
                  ALLOC
 42 .bss.Serial3  0000001f  00000000  00000000  000035e2  2**0
                  ALLOC
 43 .rodata._ZTV14HardwareSerial 00000010  00000000  00000000  000035e2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 44 .rodata._ZTV6Stream 00000010  00000000  00000000  000035f2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 45 .debug_frame  00000190  00000000  00000000  00003604  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 46 .debug_loc    000003ee  00000000  00000000  00003794  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 47 .debug_pubnames 000002ab  00000000  00000000  00003b82  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 48 .debug_aranges 000000d8  00000000  00000000  00003e2d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 49 .debug_ranges 000000d0  00000000  00000000  00003f05  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 50 .debug_str    00000e5c  00000000  00000000  00003fd5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._Z11serialEventv:

00000000 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
   0:	08 95       	ret

Disassembly of section .text.__vector_25:

00000000 <__vector_25>:
  #define serialEvent_implemented
#if defined(USART_RX_vect)
  SIGNAL(USART_RX_vect)
#elif defined(SIG_USART0_RECV)
  SIGNAL(SIG_USART0_RECV)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	8f 93       	push	r24
  16:	9f 93       	push	r25
  18:	ef 93       	push	r30
  1a:	ff 93       	push	r31
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
  #if defined(UDR0)
    unsigned char c  =  UDR0;
  1c:	40 91 c6 00 	lds	r20, 0x00C6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
  20:	20 91 00 00 	lds	r18, 0x0000
  24:	30 91 00 00 	lds	r19, 0x0000

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
  28:	2f 5f       	subi	r18, 0xFF	; 255
  2a:	3f 4f       	sbci	r19, 0xFF	; 255
  2c:	2f 73       	andi	r18, 0x3F	; 63
  2e:	30 70       	andi	r19, 0x00	; 0
  30:	80 91 00 00 	lds	r24, 0x0000
  34:	90 91 00 00 	lds	r25, 0x0000
  38:	28 17       	cp	r18, r24
  3a:	39 07       	cpc	r19, r25
  3c:	01 f0       	breq	.+0      	; 0x3e <__vector_25+0x3e>
    buffer->buffer[buffer->head] = c;
  3e:	e0 91 00 00 	lds	r30, 0x0000
  42:	f0 91 00 00 	lds	r31, 0x0000
  46:	e0 50       	subi	r30, 0x00	; 0
  48:	f0 40       	sbci	r31, 0x00	; 0
  4a:	40 83       	st	Z, r20
    buffer->head = i;
  4c:	30 93 00 00 	sts	0x0000, r19
  50:	20 93 00 00 	sts	0x0000, r18
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
  }
  54:	ff 91       	pop	r31
  56:	ef 91       	pop	r30
  58:	9f 91       	pop	r25
  5a:	8f 91       	pop	r24
  5c:	4f 91       	pop	r20
  5e:	3f 91       	pop	r19
  60:	2f 91       	pop	r18
  62:	0f 90       	pop	r0
  64:	0b be       	out	0x3b, r0	; 59
  66:	0f 90       	pop	r0
  68:	0f be       	out	0x3f, r0	; 63
  6a:	0f 90       	pop	r0
  6c:	1f 90       	pop	r1
  6e:	18 95       	reti

Disassembly of section .text._Z12serialEvent1v:

00000000 <_Z12serialEvent1v>:
#endif
#endif

#if defined(USART1_RX_vect)
  void serialEvent1() __attribute__((weak));
  void serialEvent1() {}
   0:	08 95       	ret

Disassembly of section .text.__vector_36:

00000000 <__vector_36>:
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	8f 93       	push	r24
  16:	9f 93       	push	r25
  18:	ef 93       	push	r30
  1a:	ff 93       	push	r31
  {
    unsigned char c = UDR1;
  1c:	40 91 ce 00 	lds	r20, 0x00CE
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
  20:	20 91 00 00 	lds	r18, 0x0000
  24:	30 91 00 00 	lds	r19, 0x0000

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
  28:	2f 5f       	subi	r18, 0xFF	; 255
  2a:	3f 4f       	sbci	r19, 0xFF	; 255
  2c:	2f 73       	andi	r18, 0x3F	; 63
  2e:	30 70       	andi	r19, 0x00	; 0
  30:	80 91 00 00 	lds	r24, 0x0000
  34:	90 91 00 00 	lds	r25, 0x0000
  38:	28 17       	cp	r18, r24
  3a:	39 07       	cpc	r19, r25
  3c:	01 f0       	breq	.+0      	; 0x3e <__vector_36+0x3e>
    buffer->buffer[buffer->head] = c;
  3e:	e0 91 00 00 	lds	r30, 0x0000
  42:	f0 91 00 00 	lds	r31, 0x0000
  46:	e0 50       	subi	r30, 0x00	; 0
  48:	f0 40       	sbci	r31, 0x00	; 0
  4a:	40 83       	st	Z, r20
    buffer->head = i;
  4c:	30 93 00 00 	sts	0x0000, r19
  50:	20 93 00 00 	sts	0x0000, r18
  #define serialEvent1_implemented
  SIGNAL(USART1_RX_vect)
  {
    unsigned char c = UDR1;
    store_char(c, &rx_buffer1);
  }
  54:	ff 91       	pop	r31
  56:	ef 91       	pop	r30
  58:	9f 91       	pop	r25
  5a:	8f 91       	pop	r24
  5c:	4f 91       	pop	r20
  5e:	3f 91       	pop	r19
  60:	2f 91       	pop	r18
  62:	0f 90       	pop	r0
  64:	0b be       	out	0x3b, r0	; 59
  66:	0f 90       	pop	r0
  68:	0f be       	out	0x3f, r0	; 63
  6a:	0f 90       	pop	r0
  6c:	1f 90       	pop	r1
  6e:	18 95       	reti

Disassembly of section .text._Z12serialEvent2v:

00000000 <_Z12serialEvent2v>:
  #error SIG_USART1_RECV
#endif

#if defined(USART2_RX_vect) && defined(UDR2)
  void serialEvent2() __attribute__((weak));
  void serialEvent2() {}
   0:	08 95       	ret

Disassembly of section .text.__vector_51:

00000000 <__vector_51>:
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	8f 93       	push	r24
  16:	9f 93       	push	r25
  18:	ef 93       	push	r30
  1a:	ff 93       	push	r31
  {
    unsigned char c = UDR2;
  1c:	40 91 d6 00 	lds	r20, 0x00D6
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
  20:	20 91 00 00 	lds	r18, 0x0000
  24:	30 91 00 00 	lds	r19, 0x0000

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
  28:	2f 5f       	subi	r18, 0xFF	; 255
  2a:	3f 4f       	sbci	r19, 0xFF	; 255
  2c:	2f 73       	andi	r18, 0x3F	; 63
  2e:	30 70       	andi	r19, 0x00	; 0
  30:	80 91 00 00 	lds	r24, 0x0000
  34:	90 91 00 00 	lds	r25, 0x0000
  38:	28 17       	cp	r18, r24
  3a:	39 07       	cpc	r19, r25
  3c:	01 f0       	breq	.+0      	; 0x3e <__vector_51+0x3e>
    buffer->buffer[buffer->head] = c;
  3e:	e0 91 00 00 	lds	r30, 0x0000
  42:	f0 91 00 00 	lds	r31, 0x0000
  46:	e0 50       	subi	r30, 0x00	; 0
  48:	f0 40       	sbci	r31, 0x00	; 0
  4a:	40 83       	st	Z, r20
    buffer->head = i;
  4c:	30 93 00 00 	sts	0x0000, r19
  50:	20 93 00 00 	sts	0x0000, r18
  #define serialEvent2_implemented
  SIGNAL(USART2_RX_vect)
  {
    unsigned char c = UDR2;
    store_char(c, &rx_buffer2);
  }
  54:	ff 91       	pop	r31
  56:	ef 91       	pop	r30
  58:	9f 91       	pop	r25
  5a:	8f 91       	pop	r24
  5c:	4f 91       	pop	r20
  5e:	3f 91       	pop	r19
  60:	2f 91       	pop	r18
  62:	0f 90       	pop	r0
  64:	0b be       	out	0x3b, r0	; 59
  66:	0f 90       	pop	r0
  68:	0f be       	out	0x3f, r0	; 63
  6a:	0f 90       	pop	r0
  6c:	1f 90       	pop	r1
  6e:	18 95       	reti

Disassembly of section .text._Z12serialEvent3v:

00000000 <_Z12serialEvent3v>:
  #error SIG_USART2_RECV
#endif

#if defined(USART3_RX_vect) && defined(UDR3)
  void serialEvent3() __attribute__((weak));
  void serialEvent3() {}
   0:	08 95       	ret

Disassembly of section .text.__vector_54:

00000000 <__vector_54>:
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	8f 93       	push	r24
  16:	9f 93       	push	r25
  18:	ef 93       	push	r30
  1a:	ff 93       	push	r31
  {
    unsigned char c = UDR3;
  1c:	40 91 36 01 	lds	r20, 0x0136
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
  20:	20 91 00 00 	lds	r18, 0x0000
  24:	30 91 00 00 	lds	r19, 0x0000

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
  28:	2f 5f       	subi	r18, 0xFF	; 255
  2a:	3f 4f       	sbci	r19, 0xFF	; 255
  2c:	2f 73       	andi	r18, 0x3F	; 63
  2e:	30 70       	andi	r19, 0x00	; 0
  30:	80 91 00 00 	lds	r24, 0x0000
  34:	90 91 00 00 	lds	r25, 0x0000
  38:	28 17       	cp	r18, r24
  3a:	39 07       	cpc	r19, r25
  3c:	01 f0       	breq	.+0      	; 0x3e <__vector_54+0x3e>
    buffer->buffer[buffer->head] = c;
  3e:	e0 91 00 00 	lds	r30, 0x0000
  42:	f0 91 00 00 	lds	r31, 0x0000
  46:	e0 50       	subi	r30, 0x00	; 0
  48:	f0 40       	sbci	r31, 0x00	; 0
  4a:	40 83       	st	Z, r20
    buffer->head = i;
  4c:	30 93 00 00 	sts	0x0000, r19
  50:	20 93 00 00 	sts	0x0000, r18
  #define serialEvent3_implemented
  SIGNAL(USART3_RX_vect)
  {
    unsigned char c = UDR3;
    store_char(c, &rx_buffer3);
  }
  54:	ff 91       	pop	r31
  56:	ef 91       	pop	r30
  58:	9f 91       	pop	r25
  5a:	8f 91       	pop	r24
  5c:	4f 91       	pop	r20
  5e:	3f 91       	pop	r19
  60:	2f 91       	pop	r18
  62:	0f 90       	pop	r0
  64:	0b be       	out	0x3b, r0	; 59
  66:	0f 90       	pop	r0
  68:	0f be       	out	0x3f, r0	; 63
  6a:	0f 90       	pop	r0
  6c:	1f 90       	pop	r1
  6e:	18 95       	reti

Disassembly of section .text._Z14serialEventRunv:

00000000 <_Z14serialEventRunv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
   0:	e0 91 00 00 	lds	r30, 0x0000
   4:	f0 91 00 00 	lds	r31, 0x0000
   8:	e0 5c       	subi	r30, 0xC0	; 192
   a:	ff 4f       	sbci	r31, 0xFF	; 255
   c:	81 91       	ld	r24, Z+
   e:	91 91       	ld	r25, Z+
  10:	20 81       	ld	r18, Z
  12:	31 81       	ldd	r19, Z+1	; 0x01
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
  14:	82 1b       	sub	r24, r18
  16:	93 0b       	sbc	r25, r19
  18:	8f 73       	andi	r24, 0x3F	; 63
  1a:	90 70       	andi	r25, 0x00	; 0
  1c:	89 2b       	or	r24, r25
  1e:	01 f0       	breq	.+0      	; 0x20 <_Z14serialEventRunv+0x20>
  20:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
  24:	e0 91 00 00 	lds	r30, 0x0000
  28:	f0 91 00 00 	lds	r31, 0x0000
  2c:	e0 5c       	subi	r30, 0xC0	; 192
  2e:	ff 4f       	sbci	r31, 0xFF	; 255
  30:	81 91       	ld	r24, Z+
  32:	91 91       	ld	r25, Z+
  34:	20 81       	ld	r18, Z
  36:	31 81       	ldd	r19, Z+1	; 0x01
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
  38:	82 1b       	sub	r24, r18
  3a:	93 0b       	sbc	r25, r19
  3c:	8f 73       	andi	r24, 0x3F	; 63
  3e:	90 70       	andi	r25, 0x00	; 0
  40:	89 2b       	or	r24, r25
  42:	01 f0       	breq	.+0      	; 0x44 <_Z14serialEventRunv+0x44>
  44:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
  48:	e0 91 00 00 	lds	r30, 0x0000
  4c:	f0 91 00 00 	lds	r31, 0x0000
  50:	e0 5c       	subi	r30, 0xC0	; 192
  52:	ff 4f       	sbci	r31, 0xFF	; 255
  54:	81 91       	ld	r24, Z+
  56:	91 91       	ld	r25, Z+
  58:	20 81       	ld	r18, Z
  5a:	31 81       	ldd	r19, Z+1	; 0x01
#endif
#ifdef serialEvent1_implemented
  if (Serial1.available()) serialEvent1();
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
  5c:	82 1b       	sub	r24, r18
  5e:	93 0b       	sbc	r25, r19
  60:	8f 73       	andi	r24, 0x3F	; 63
  62:	90 70       	andi	r25, 0x00	; 0
  64:	89 2b       	or	r24, r25
  66:	01 f0       	breq	.+0      	; 0x68 <_Z14serialEventRunv+0x68>
  68:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
  6c:	e0 91 00 00 	lds	r30, 0x0000
  70:	f0 91 00 00 	lds	r31, 0x0000
  74:	e0 5c       	subi	r30, 0xC0	; 192
  76:	ff 4f       	sbci	r31, 0xFF	; 255
  78:	81 91       	ld	r24, Z+
  7a:	91 91       	ld	r25, Z+
  7c:	20 81       	ld	r18, Z
  7e:	31 81       	ldd	r19, Z+1	; 0x01
#endif
#ifdef serialEvent2_implemented
  if (Serial2.available()) serialEvent2();
#endif
#ifdef serialEvent3_implemented
  if (Serial3.available()) serialEvent3();
  80:	82 1b       	sub	r24, r18
  82:	93 0b       	sbc	r25, r19
  84:	8f 73       	andi	r24, 0x3F	; 63
  86:	90 70       	andi	r25, 0x00	; 0
  88:	89 2b       	or	r24, r25
  8a:	01 f0       	breq	.+0      	; 0x8c <_Z14serialEventRunv+0x8c>
  8c:	0e 94 00 00 	call	0	; 0x0 <_Z14serialEventRunv>
  90:	08 95       	ret

Disassembly of section .text.__vector_26:

00000000 <__vector_26>:
#if defined(UART0_UDRE_vect)
ISR(UART0_UDRE_vect)
#elif defined(UART_UDRE_vect)
ISR(UART_UDRE_vect)
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	8f 93       	push	r24
  14:	9f 93       	push	r25
  16:	ef 93       	push	r30
  18:	ff 93       	push	r31
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
  if (tx_buffer.head == tx_buffer.tail) {
  1a:	20 91 00 00 	lds	r18, 0x0000
  1e:	30 91 00 00 	lds	r19, 0x0000
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	28 17       	cp	r18, r24
  2c:	39 07       	cpc	r19, r25
  2e:	01 f4       	brne	.+0      	; 0x30 <__vector_26+0x30>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
  30:	80 91 c1 00 	lds	r24, 0x00C1
  34:	8f 7d       	andi	r24, 0xDF	; 223
  36:	80 93 c1 00 	sts	0x00C1, r24
  3a:	00 c0       	rjmp	.+0      	; 0x3c <__vector_26+0x3c>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
  3c:	e0 91 00 00 	lds	r30, 0x0000
  40:	f0 91 00 00 	lds	r31, 0x0000
  44:	e0 50       	subi	r30, 0x00	; 0
  46:	f0 40       	sbci	r31, 0x00	; 0
  48:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
  4a:	80 91 00 00 	lds	r24, 0x0000
  4e:	90 91 00 00 	lds	r25, 0x0000
  52:	01 96       	adiw	r24, 0x01	; 1
  54:	8f 73       	andi	r24, 0x3F	; 63
  56:	90 70       	andi	r25, 0x00	; 0
  58:	90 93 00 00 	sts	0x0000, r25
  5c:	80 93 00 00 	sts	0x0000, r24
	
  #if defined(UDR0)
    UDR0 = c;
  60:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
  64:	ff 91       	pop	r31
  66:	ef 91       	pop	r30
  68:	9f 91       	pop	r25
  6a:	8f 91       	pop	r24
  6c:	3f 91       	pop	r19
  6e:	2f 91       	pop	r18
  70:	0f 90       	pop	r0
  72:	0b be       	out	0x3b, r0	; 59
  74:	0f 90       	pop	r0
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

Disassembly of section .text.__vector_37:

00000000 <__vector_37>:
#endif
#endif

#ifdef USART1_UDRE_vect
ISR(USART1_UDRE_vect)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	8f 93       	push	r24
  14:	9f 93       	push	r25
  16:	ef 93       	push	r30
  18:	ff 93       	push	r31
{
  if (tx_buffer1.head == tx_buffer1.tail) {
  1a:	20 91 00 00 	lds	r18, 0x0000
  1e:	30 91 00 00 	lds	r19, 0x0000
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	28 17       	cp	r18, r24
  2c:	39 07       	cpc	r19, r25
  2e:	01 f4       	brne	.+0      	; 0x30 <__vector_37+0x30>
	// Buffer empty, so disable interrupts
    cbi(UCSR1B, UDRIE1);
  30:	80 91 c9 00 	lds	r24, 0x00C9
  34:	8f 7d       	andi	r24, 0xDF	; 223
  36:	80 93 c9 00 	sts	0x00C9, r24
  3a:	00 c0       	rjmp	.+0      	; 0x3c <__vector_37+0x3c>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
  3c:	e0 91 00 00 	lds	r30, 0x0000
  40:	f0 91 00 00 	lds	r31, 0x0000
  44:	e0 50       	subi	r30, 0x00	; 0
  46:	f0 40       	sbci	r31, 0x00	; 0
  48:	20 81       	ld	r18, Z
    tx_buffer1.tail = (tx_buffer1.tail + 1) % SERIAL_BUFFER_SIZE;
  4a:	80 91 00 00 	lds	r24, 0x0000
  4e:	90 91 00 00 	lds	r25, 0x0000
  52:	01 96       	adiw	r24, 0x01	; 1
  54:	8f 73       	andi	r24, 0x3F	; 63
  56:	90 70       	andi	r25, 0x00	; 0
  58:	90 93 00 00 	sts	0x0000, r25
  5c:	80 93 00 00 	sts	0x0000, r24
	
    UDR1 = c;
  60:	20 93 ce 00 	sts	0x00CE, r18
  }
}
  64:	ff 91       	pop	r31
  66:	ef 91       	pop	r30
  68:	9f 91       	pop	r25
  6a:	8f 91       	pop	r24
  6c:	3f 91       	pop	r19
  6e:	2f 91       	pop	r18
  70:	0f 90       	pop	r0
  72:	0b be       	out	0x3b, r0	; 59
  74:	0f 90       	pop	r0
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

Disassembly of section .text.__vector_52:

00000000 <__vector_52>:
#endif

#ifdef USART2_UDRE_vect
ISR(USART2_UDRE_vect)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	8f 93       	push	r24
  14:	9f 93       	push	r25
  16:	ef 93       	push	r30
  18:	ff 93       	push	r31
{
  if (tx_buffer2.head == tx_buffer2.tail) {
  1a:	20 91 00 00 	lds	r18, 0x0000
  1e:	30 91 00 00 	lds	r19, 0x0000
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	28 17       	cp	r18, r24
  2c:	39 07       	cpc	r19, r25
  2e:	01 f4       	brne	.+0      	; 0x30 <__vector_52+0x30>
	// Buffer empty, so disable interrupts
    cbi(UCSR2B, UDRIE2);
  30:	80 91 d1 00 	lds	r24, 0x00D1
  34:	8f 7d       	andi	r24, 0xDF	; 223
  36:	80 93 d1 00 	sts	0x00D1, r24
  3a:	00 c0       	rjmp	.+0      	; 0x3c <__vector_52+0x3c>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
  3c:	e0 91 00 00 	lds	r30, 0x0000
  40:	f0 91 00 00 	lds	r31, 0x0000
  44:	e0 50       	subi	r30, 0x00	; 0
  46:	f0 40       	sbci	r31, 0x00	; 0
  48:	20 81       	ld	r18, Z
    tx_buffer2.tail = (tx_buffer2.tail + 1) % SERIAL_BUFFER_SIZE;
  4a:	80 91 00 00 	lds	r24, 0x0000
  4e:	90 91 00 00 	lds	r25, 0x0000
  52:	01 96       	adiw	r24, 0x01	; 1
  54:	8f 73       	andi	r24, 0x3F	; 63
  56:	90 70       	andi	r25, 0x00	; 0
  58:	90 93 00 00 	sts	0x0000, r25
  5c:	80 93 00 00 	sts	0x0000, r24
	
    UDR2 = c;
  60:	20 93 d6 00 	sts	0x00D6, r18
  }
}
  64:	ff 91       	pop	r31
  66:	ef 91       	pop	r30
  68:	9f 91       	pop	r25
  6a:	8f 91       	pop	r24
  6c:	3f 91       	pop	r19
  6e:	2f 91       	pop	r18
  70:	0f 90       	pop	r0
  72:	0b be       	out	0x3b, r0	; 59
  74:	0f 90       	pop	r0
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

Disassembly of section .text.__vector_55:

00000000 <__vector_55>:
#endif

#ifdef USART3_UDRE_vect
ISR(USART3_UDRE_vect)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	8f 93       	push	r24
  14:	9f 93       	push	r25
  16:	ef 93       	push	r30
  18:	ff 93       	push	r31
{
  if (tx_buffer3.head == tx_buffer3.tail) {
  1a:	20 91 00 00 	lds	r18, 0x0000
  1e:	30 91 00 00 	lds	r19, 0x0000
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	90 91 00 00 	lds	r25, 0x0000
  2a:	28 17       	cp	r18, r24
  2c:	39 07       	cpc	r19, r25
  2e:	01 f4       	brne	.+0      	; 0x30 <__vector_55+0x30>
	// Buffer empty, so disable interrupts
    cbi(UCSR3B, UDRIE3);
  30:	80 91 31 01 	lds	r24, 0x0131
  34:	8f 7d       	andi	r24, 0xDF	; 223
  36:	80 93 31 01 	sts	0x0131, r24
  3a:	00 c0       	rjmp	.+0      	; 0x3c <__vector_55+0x3c>
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer3.buffer[tx_buffer3.tail];
  3c:	e0 91 00 00 	lds	r30, 0x0000
  40:	f0 91 00 00 	lds	r31, 0x0000
  44:	e0 50       	subi	r30, 0x00	; 0
  46:	f0 40       	sbci	r31, 0x00	; 0
  48:	20 81       	ld	r18, Z
    tx_buffer3.tail = (tx_buffer3.tail + 1) % SERIAL_BUFFER_SIZE;
  4a:	80 91 00 00 	lds	r24, 0x0000
  4e:	90 91 00 00 	lds	r25, 0x0000
  52:	01 96       	adiw	r24, 0x01	; 1
  54:	8f 73       	andi	r24, 0x3F	; 63
  56:	90 70       	andi	r25, 0x00	; 0
  58:	90 93 00 00 	sts	0x0000, r25
  5c:	80 93 00 00 	sts	0x0000, r24
	
    UDR3 = c;
  60:	20 93 36 01 	sts	0x0136, r18
  }
}
  64:	ff 91       	pop	r31
  66:	ef 91       	pop	r30
  68:	9f 91       	pop	r25
  6a:	8f 91       	pop	r24
  6c:	3f 91       	pop	r19
  6e:	2f 91       	pop	r18
  70:	0f 90       	pop	r0
  72:	0b be       	out	0x3b, r0	; 59
  74:	0f 90       	pop	r0
  76:	0f be       	out	0x3f, r0	; 63
  78:	0f 90       	pop	r0
  7a:	1f 90       	pop	r1
  7c:	18 95       	reti

Disassembly of section .text._ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh:

00000000 <_ZN14HardwareSerialC2EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
   0:	8f 92       	push	r8
   2:	af 92       	push	r10
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	df 93       	push	r29
  14:	cf 93       	push	r28
  16:	cd b7       	in	r28, 0x3d	; 61
  18:	de b7       	in	r29, 0x3e	; 62
  1a:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
  1c:	13 82       	std	Z+3, r1	; 0x03
  1e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
  20:	88 ee       	ldi	r24, 0xE8	; 232
  22:	93 e0       	ldi	r25, 0x03	; 3
  24:	a0 e0       	ldi	r26, 0x00	; 0
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	84 83       	std	Z+4, r24	; 0x04
  2a:	95 83       	std	Z+5, r25	; 0x05
  2c:	a6 83       	std	Z+6, r26	; 0x06
  2e:	b7 83       	std	Z+7, r27	; 0x07
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	91 83       	std	Z+1, r25	; 0x01
  36:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
  38:	75 87       	std	Z+13, r23	; 0x0d
  3a:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
  3c:	57 87       	std	Z+15, r21	; 0x0f
  3e:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
  40:	31 8b       	std	Z+17, r19	; 0x11
  42:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
  44:	13 8b       	std	Z+19, r17	; 0x13
  46:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
  48:	f5 8a       	std	Z+21, r15	; 0x15
  4a:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
  4c:	d7 8a       	std	Z+23, r13	; 0x17
  4e:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
  50:	b1 8e       	std	Z+25, r11	; 0x19
  52:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
  54:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
  56:	8f 85       	ldd	r24, Y+15	; 0x0f
  58:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
  5a:	88 89       	ldd	r24, Y+16	; 0x10
  5c:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
  5e:	89 89       	ldd	r24, Y+17	; 0x11
  60:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
  62:	8a 89       	ldd	r24, Y+18	; 0x12
  64:	86 8f       	std	Z+30, r24	; 0x1e
}
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	1f 91       	pop	r17
  6c:	0f 91       	pop	r16
  6e:	ff 90       	pop	r15
  70:	ef 90       	pop	r14
  72:	df 90       	pop	r13
  74:	cf 90       	pop	r12
  76:	bf 90       	pop	r11
  78:	af 90       	pop	r10
  7a:	8f 90       	pop	r8
  7c:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh:

00000000 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
   0:	8f 92       	push	r8
   2:	af 92       	push	r10
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	df 93       	push	r29
  14:	cf 93       	push	r28
  16:	cd b7       	in	r28, 0x3d	; 61
  18:	de b7       	in	r29, 0x3e	; 62
  1a:	fc 01       	movw	r30, r24
  1c:	13 82       	std	Z+3, r1	; 0x03
  1e:	12 82       	std	Z+2, r1	; 0x02
  20:	88 ee       	ldi	r24, 0xE8	; 232
  22:	93 e0       	ldi	r25, 0x03	; 3
  24:	a0 e0       	ldi	r26, 0x00	; 0
  26:	b0 e0       	ldi	r27, 0x00	; 0
  28:	84 83       	std	Z+4, r24	; 0x04
  2a:	95 83       	std	Z+5, r25	; 0x05
  2c:	a6 83       	std	Z+6, r26	; 0x06
  2e:	b7 83       	std	Z+7, r27	; 0x07
  30:	80 e0       	ldi	r24, 0x00	; 0
  32:	90 e0       	ldi	r25, 0x00	; 0
  34:	91 83       	std	Z+1, r25	; 0x01
  36:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
  38:	75 87       	std	Z+13, r23	; 0x0d
  3a:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
  3c:	57 87       	std	Z+15, r21	; 0x0f
  3e:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
  40:	31 8b       	std	Z+17, r19	; 0x11
  42:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
  44:	13 8b       	std	Z+19, r17	; 0x13
  46:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
  48:	f5 8a       	std	Z+21, r15	; 0x15
  4a:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
  4c:	d7 8a       	std	Z+23, r13	; 0x17
  4e:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
  50:	b1 8e       	std	Z+25, r11	; 0x19
  52:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
  54:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
  56:	8f 85       	ldd	r24, Y+15	; 0x0f
  58:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
  5a:	88 89       	ldd	r24, Y+16	; 0x10
  5c:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
  5e:	89 89       	ldd	r24, Y+17	; 0x11
  60:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
  62:	8a 89       	ldd	r24, Y+18	; 0x12
  64:	86 8f       	std	Z+30, r24	; 0x1e
}
  66:	cf 91       	pop	r28
  68:	df 91       	pop	r29
  6a:	1f 91       	pop	r17
  6c:	0f 91       	pop	r16
  6e:	ff 90       	pop	r15
  70:	ef 90       	pop	r14
  72:	df 90       	pop	r13
  74:	cf 90       	pop	r12
  76:	bf 90       	pop	r11
  78:	af 90       	pop	r10
  7a:	8f 90       	pop	r8
  7c:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5beginEm:

00000000 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	ec 01       	movw	r28, r24
  14:	7a 01       	movw	r14, r20
  16:	8b 01       	movw	r16, r22
  18:	dd 24       	eor	r13, r13
  1a:	40 30       	cpi	r20, 0x00	; 0
  1c:	81 ee       	ldi	r24, 0xE1	; 225
  1e:	58 07       	cpc	r21, r24
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	68 07       	cpc	r22, r24
  24:	80 e0       	ldi	r24, 0x00	; 0
  26:	78 07       	cpc	r23, r24
  28:	01 f0       	breq	.+0      	; 0x2a <_ZN14HardwareSerial5beginEm+0x2a>
  2a:	dd 24       	eor	r13, r13
  2c:	d3 94       	inc	r13
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
  2e:	91 e0       	ldi	r25, 0x01	; 1
  30:	a9 2e       	mov	r10, r25
  32:	b1 2c       	mov	r11, r1
  34:	ec 89       	ldd	r30, Y+20	; 0x14
  36:	fd 89       	ldd	r31, Y+21	; 0x15
  }
#endif

try_again:
  
  if (use_u2x) {
  38:	dd 20       	and	r13, r13
  3a:	01 f0       	breq	.+0      	; 0x3c <_ZN14HardwareSerial5beginEm+0x3c>
    *_ucsra = 1 << _u2x;
  3c:	c5 01       	movw	r24, r10
  3e:	0e 8c       	ldd	r0, Y+30	; 0x1e
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN14HardwareSerial5beginEm+0x42>
  42:	88 0f       	add	r24, r24
  44:	99 1f       	adc	r25, r25
  46:	0a 94       	dec	r0
  48:	02 f4       	brpl	.+0      	; 0x4a <_ZN14HardwareSerial5beginEm+0x4a>
  4a:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  4c:	60 e0       	ldi	r22, 0x00	; 0
  4e:	79 e0       	ldi	r23, 0x09	; 9
  50:	8d e3       	ldi	r24, 0x3D	; 61
  52:	90 e0       	ldi	r25, 0x00	; 0
  54:	00 c0       	rjmp	.+0      	; 0x56 <_ZN14HardwareSerial5beginEm+0x56>
  } else {
    *_ucsra = 0;
  56:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  58:	60 e8       	ldi	r22, 0x80	; 128
  5a:	74 e8       	ldi	r23, 0x84	; 132
  5c:	8e e1       	ldi	r24, 0x1E	; 30
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	a8 01       	movw	r20, r16
  62:	97 01       	movw	r18, r14
  64:	0e 94 00 00 	call	0	; 0x0 <_ZN14HardwareSerial5beginEm>
  68:	21 50       	subi	r18, 0x01	; 1
  6a:	30 40       	sbci	r19, 0x00	; 0
  6c:	40 40       	sbci	r20, 0x00	; 0
  6e:	50 40       	sbci	r21, 0x00	; 0
  70:	56 95       	lsr	r21
  72:	47 95       	ror	r20
  74:	37 95       	ror	r19
  76:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
  78:	80 e1       	ldi	r24, 0x10	; 16
  7a:	20 30       	cpi	r18, 0x00	; 0
  7c:	38 07       	cpc	r19, r24
  7e:	00 f0       	brcs	.+0      	; 0x80 <_ZN14HardwareSerial5beginEm+0x80>
  80:	dd 20       	and	r13, r13
  82:	01 f0       	breq	.+0      	; 0x84 <_ZN14HardwareSerial5beginEm+0x84>
  84:	dd 24       	eor	r13, r13
  86:	00 c0       	rjmp	.+0      	; 0x88 <_ZN14HardwareSerial5beginEm+0x88>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
  88:	e8 89       	ldd	r30, Y+16	; 0x10
  8a:	f9 89       	ldd	r31, Y+17	; 0x11
  8c:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
  8e:	ea 89       	ldd	r30, Y+18	; 0x12
  90:	fb 89       	ldd	r31, Y+19	; 0x13
  92:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
  94:	ee 89       	ldd	r30, Y+22	; 0x16
  96:	ff 89       	ldd	r31, Y+23	; 0x17
  98:	40 81       	ld	r20, Z
  9a:	21 e0       	ldi	r18, 0x01	; 1
  9c:	30 e0       	ldi	r19, 0x00	; 0
  9e:	c9 01       	movw	r24, r18
  a0:	0a 8c       	ldd	r0, Y+26	; 0x1a
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN14HardwareSerial5beginEm+0xa4>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	0a 94       	dec	r0
  aa:	02 f4       	brpl	.+0      	; 0xac <_ZN14HardwareSerial5beginEm+0xac>
  ac:	48 2b       	or	r20, r24
  ae:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
  b0:	ee 89       	ldd	r30, Y+22	; 0x16
  b2:	ff 89       	ldd	r31, Y+23	; 0x17
  b4:	40 81       	ld	r20, Z
  b6:	c9 01       	movw	r24, r18
  b8:	0b 8c       	ldd	r0, Y+27	; 0x1b
  ba:	00 c0       	rjmp	.+0      	; 0xbc <_ZN14HardwareSerial5beginEm+0xbc>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	0a 94       	dec	r0
  c2:	02 f4       	brpl	.+0      	; 0xc4 <_ZN14HardwareSerial5beginEm+0xc4>
  c4:	48 2b       	or	r20, r24
  c6:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
  c8:	ee 89       	ldd	r30, Y+22	; 0x16
  ca:	ff 89       	ldd	r31, Y+23	; 0x17
  cc:	40 81       	ld	r20, Z
  ce:	c9 01       	movw	r24, r18
  d0:	0c 8c       	ldd	r0, Y+28	; 0x1c
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_ZN14HardwareSerial5beginEm+0xd4>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	0a 94       	dec	r0
  da:	02 f4       	brpl	.+0      	; 0xdc <_ZN14HardwareSerial5beginEm+0xdc>
  dc:	48 2b       	or	r20, r24
  de:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
  e0:	ee 89       	ldd	r30, Y+22	; 0x16
  e2:	ff 89       	ldd	r31, Y+23	; 0x17
  e4:	80 81       	ld	r24, Z
  e6:	0d 8c       	ldd	r0, Y+29	; 0x1d
  e8:	00 c0       	rjmp	.+0      	; 0xea <_ZN14HardwareSerial5beginEm+0xea>
  ea:	22 0f       	add	r18, r18
  ec:	33 1f       	adc	r19, r19
  ee:	0a 94       	dec	r0
  f0:	02 f4       	brpl	.+0      	; 0xf2 <_ZN14HardwareSerial5beginEm+0xf2>
  f2:	20 95       	com	r18
  f4:	28 23       	and	r18, r24
  f6:	20 83       	st	Z, r18
}
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	1f 91       	pop	r17
  fe:	0f 91       	pop	r16
 100:	ff 90       	pop	r15
 102:	ef 90       	pop	r14
 104:	df 90       	pop	r13
 106:	bf 90       	pop	r11
 108:	af 90       	pop	r10
 10a:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial3endEv:

00000000 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	dc 01       	movw	r26, r24
{
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
   6:	1e 96       	adiw	r26, 0x0e	; 14
   8:	8d 91       	ld	r24, X+
   a:	9c 91       	ld	r25, X
   c:	1f 97       	sbiw	r26, 0x0f	; 15
   e:	ec 01       	movw	r28, r24
  10:	c0 5c       	subi	r28, 0xC0	; 192
  12:	df 4f       	sbci	r29, 0xFF	; 255
  14:	fc 01       	movw	r30, r24
  16:	ee 5b       	subi	r30, 0xBE	; 190
  18:	ff 4f       	sbci	r31, 0xFF	; 255
  1a:	28 81       	ld	r18, Y
  1c:	39 81       	ldd	r19, Y+1	; 0x01
  1e:	80 81       	ld	r24, Z
  20:	91 81       	ldd	r25, Z+1	; 0x01
  22:	28 17       	cp	r18, r24
  24:	39 07       	cpc	r19, r25
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN14HardwareSerial3endEv+0x28>
    ;

  cbi(*_ucsrb, _rxen);
  28:	56 96       	adiw	r26, 0x16	; 22
  2a:	ed 91       	ld	r30, X+
  2c:	fc 91       	ld	r31, X
  2e:	57 97       	sbiw	r26, 0x17	; 23
  30:	40 81       	ld	r20, Z
  32:	21 e0       	ldi	r18, 0x01	; 1
  34:	30 e0       	ldi	r19, 0x00	; 0
  36:	c9 01       	movw	r24, r18
  38:	5a 96       	adiw	r26, 0x1a	; 26
  3a:	0c 90       	ld	r0, X
  3c:	5a 97       	sbiw	r26, 0x1a	; 26
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN14HardwareSerial3endEv+0x40>
  40:	88 0f       	add	r24, r24
  42:	99 1f       	adc	r25, r25
  44:	0a 94       	dec	r0
  46:	02 f4       	brpl	.+0      	; 0x48 <_ZN14HardwareSerial3endEv+0x48>
  48:	80 95       	com	r24
  4a:	84 23       	and	r24, r20
  4c:	80 83       	st	Z, r24
  cbi(*_ucsrb, _txen);
  4e:	56 96       	adiw	r26, 0x16	; 22
  50:	ed 91       	ld	r30, X+
  52:	fc 91       	ld	r31, X
  54:	57 97       	sbiw	r26, 0x17	; 23
  56:	40 81       	ld	r20, Z
  58:	c9 01       	movw	r24, r18
  5a:	5b 96       	adiw	r26, 0x1b	; 27
  5c:	0c 90       	ld	r0, X
  5e:	5b 97       	sbiw	r26, 0x1b	; 27
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN14HardwareSerial3endEv+0x62>
  62:	88 0f       	add	r24, r24
  64:	99 1f       	adc	r25, r25
  66:	0a 94       	dec	r0
  68:	02 f4       	brpl	.+0      	; 0x6a <_ZN14HardwareSerial3endEv+0x6a>
  6a:	80 95       	com	r24
  6c:	84 23       	and	r24, r20
  6e:	80 83       	st	Z, r24
  cbi(*_ucsrb, _rxcie);  
  70:	56 96       	adiw	r26, 0x16	; 22
  72:	ed 91       	ld	r30, X+
  74:	fc 91       	ld	r31, X
  76:	57 97       	sbiw	r26, 0x17	; 23
  78:	40 81       	ld	r20, Z
  7a:	c9 01       	movw	r24, r18
  7c:	5c 96       	adiw	r26, 0x1c	; 28
  7e:	0c 90       	ld	r0, X
  80:	5c 97       	sbiw	r26, 0x1c	; 28
  82:	00 c0       	rjmp	.+0      	; 0x84 <_ZN14HardwareSerial3endEv+0x84>
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	0a 94       	dec	r0
  8a:	02 f4       	brpl	.+0      	; 0x8c <_ZN14HardwareSerial3endEv+0x8c>
  8c:	80 95       	com	r24
  8e:	84 23       	and	r24, r20
  90:	80 83       	st	Z, r24
  cbi(*_ucsrb, _udrie);
  92:	56 96       	adiw	r26, 0x16	; 22
  94:	ed 91       	ld	r30, X+
  96:	fc 91       	ld	r31, X
  98:	57 97       	sbiw	r26, 0x17	; 23
  9a:	80 81       	ld	r24, Z
  9c:	5d 96       	adiw	r26, 0x1d	; 29
  9e:	0c 90       	ld	r0, X
  a0:	5d 97       	sbiw	r26, 0x1d	; 29
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN14HardwareSerial3endEv+0xa4>
  a4:	22 0f       	add	r18, r18
  a6:	33 1f       	adc	r19, r19
  a8:	0a 94       	dec	r0
  aa:	02 f4       	brpl	.+0      	; 0xac <_ZN14HardwareSerial3endEv+0xac>
  ac:	20 95       	com	r18
  ae:	28 23       	and	r18, r24
  b0:	20 83       	st	Z, r18
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
  b2:	1c 96       	adiw	r26, 0x0c	; 12
  b4:	ed 91       	ld	r30, X+
  b6:	fc 91       	ld	r31, X
  b8:	1d 97       	sbiw	r26, 0x0d	; 13
  ba:	ee 5b       	subi	r30, 0xBE	; 190
  bc:	ff 4f       	sbci	r31, 0xFF	; 255
  be:	80 81       	ld	r24, Z
  c0:	91 81       	ldd	r25, Z+1	; 0x01
  c2:	92 93       	st	-Z, r25
  c4:	82 93       	st	-Z, r24
}
  c6:	df 91       	pop	r29
  c8:	cf 91       	pop	r28
  ca:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial9availableEv:

00000000 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
   0:	dc 01       	movw	r26, r24
   2:	1c 96       	adiw	r26, 0x0c	; 12
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	1d 97       	sbiw	r26, 0x0d	; 13
   a:	e0 5c       	subi	r30, 0xC0	; 192
   c:	ff 4f       	sbci	r31, 0xFF	; 255
   e:	21 91       	ld	r18, Z+
  10:	31 91       	ld	r19, Z+
  12:	80 81       	ld	r24, Z
  14:	91 81       	ldd	r25, Z+1	; 0x01
  16:	28 1b       	sub	r18, r24
  18:	39 0b       	sbc	r19, r25
  1a:	2f 73       	andi	r18, 0x3F	; 63
  1c:	30 70       	andi	r19, 0x00	; 0
}
  1e:	c9 01       	movw	r24, r18
  20:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4peekEv:

00000000 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
   0:	dc 01       	movw	r26, r24
   2:	1c 96       	adiw	r26, 0x0c	; 12
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	1d 97       	sbiw	r26, 0x0d	; 13
   a:	e0 5c       	subi	r30, 0xC0	; 192
   c:	ff 4f       	sbci	r31, 0xFF	; 255
   e:	20 81       	ld	r18, Z
  10:	31 81       	ldd	r19, Z+1	; 0x01
  12:	e0 54       	subi	r30, 0x40	; 64
  14:	f0 40       	sbci	r31, 0x00	; 0
  16:	df 01       	movw	r26, r30
  18:	ae 5b       	subi	r26, 0xBE	; 190
  1a:	bf 4f       	sbci	r27, 0xFF	; 255
  1c:	8d 91       	ld	r24, X+
  1e:	9c 91       	ld	r25, X
  20:	11 97       	sbiw	r26, 0x01	; 1
  22:	28 17       	cp	r18, r24
  24:	39 07       	cpc	r19, r25
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN14HardwareSerial4peekEv+0x28>
  28:	2f ef       	ldi	r18, 0xFF	; 255
  2a:	3f ef       	ldi	r19, 0xFF	; 255
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN14HardwareSerial4peekEv+0x2e>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  2e:	8d 91       	ld	r24, X+
  30:	9c 91       	ld	r25, X
  32:	e8 0f       	add	r30, r24
  34:	f9 1f       	adc	r31, r25
  36:	80 81       	ld	r24, Z
  38:	28 2f       	mov	r18, r24
  3a:	30 e0       	ldi	r19, 0x00	; 0
  }
}
  3c:	c9 01       	movw	r24, r18
  3e:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial4readEv:

00000000 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
   0:	dc 01       	movw	r26, r24
   2:	1c 96       	adiw	r26, 0x0c	; 12
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	1d 97       	sbiw	r26, 0x0d	; 13
   a:	e0 5c       	subi	r30, 0xC0	; 192
   c:	ff 4f       	sbci	r31, 0xFF	; 255
   e:	20 81       	ld	r18, Z
  10:	31 81       	ldd	r19, Z+1	; 0x01
  12:	e0 54       	subi	r30, 0x40	; 64
  14:	f0 40       	sbci	r31, 0x00	; 0
  16:	df 01       	movw	r26, r30
  18:	ae 5b       	subi	r26, 0xBE	; 190
  1a:	bf 4f       	sbci	r27, 0xFF	; 255
  1c:	8d 91       	ld	r24, X+
  1e:	9c 91       	ld	r25, X
  20:	11 97       	sbiw	r26, 0x01	; 1
  22:	28 17       	cp	r18, r24
  24:	39 07       	cpc	r19, r25
  26:	01 f4       	brne	.+0      	; 0x28 <_ZN14HardwareSerial4readEv+0x28>
  28:	2f ef       	ldi	r18, 0xFF	; 255
  2a:	3f ef       	ldi	r19, 0xFF	; 255
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN14HardwareSerial4readEv+0x2e>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
  2e:	8d 91       	ld	r24, X+
  30:	9c 91       	ld	r25, X
  32:	11 97       	sbiw	r26, 0x01	; 1
  34:	e8 0f       	add	r30, r24
  36:	f9 1f       	adc	r31, r25
  38:	20 81       	ld	r18, Z
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
  3a:	8d 91       	ld	r24, X+
  3c:	9c 91       	ld	r25, X
  3e:	11 97       	sbiw	r26, 0x01	; 1
  40:	01 96       	adiw	r24, 0x01	; 1
  42:	8f 73       	andi	r24, 0x3F	; 63
  44:	90 70       	andi	r25, 0x00	; 0
  46:	11 96       	adiw	r26, 0x01	; 1
  48:	9c 93       	st	X, r25
  4a:	8e 93       	st	-X, r24
    return c;
  4c:	30 e0       	ldi	r19, 0x00	; 0
  }
}
  4e:	c9 01       	movw	r24, r18
  50:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5flushEv:

00000000 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
   0:	fc 01       	movw	r30, r24
   2:	86 85       	ldd	r24, Z+14	; 0x0e
   4:	97 85       	ldd	r25, Z+15	; 0x0f
   6:	dc 01       	movw	r26, r24
   8:	a0 5c       	subi	r26, 0xC0	; 192
   a:	bf 4f       	sbci	r27, 0xFF	; 255
   c:	fc 01       	movw	r30, r24
   e:	ee 5b       	subi	r30, 0xBE	; 190
  10:	ff 4f       	sbci	r31, 0xFF	; 255
  12:	2d 91       	ld	r18, X+
  14:	3c 91       	ld	r19, X
  16:	11 97       	sbiw	r26, 0x01	; 1
  18:	80 81       	ld	r24, Z
  1a:	91 81       	ldd	r25, Z+1	; 0x01
  1c:	28 17       	cp	r18, r24
  1e:	39 07       	cpc	r19, r25
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN14HardwareSerial5flushEv+0x22>
    ;
}
  22:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerial5writeEh:

00000000 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
   6:	ee 85       	ldd	r30, Y+14	; 0x0e
   8:	ff 85       	ldd	r31, Y+15	; 0x0f
   a:	e0 5c       	subi	r30, 0xC0	; 192
   c:	ff 4f       	sbci	r31, 0xFF	; 255
   e:	20 81       	ld	r18, Z
  10:	31 81       	ldd	r19, Z+1	; 0x01
  12:	e0 54       	subi	r30, 0x40	; 64
  14:	f0 40       	sbci	r31, 0x00	; 0
  16:	2f 5f       	subi	r18, 0xFF	; 255
  18:	3f 4f       	sbci	r19, 0xFF	; 255
  1a:	2f 73       	andi	r18, 0x3F	; 63
  1c:	30 70       	andi	r19, 0x00	; 0
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
  1e:	df 01       	movw	r26, r30
  20:	ae 5b       	subi	r26, 0xBE	; 190
  22:	bf 4f       	sbci	r27, 0xFF	; 255
  24:	8d 91       	ld	r24, X+
  26:	9c 91       	ld	r25, X
  28:	11 97       	sbiw	r26, 0x01	; 1
  2a:	28 17       	cp	r18, r24
  2c:	39 07       	cpc	r19, r25
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN14HardwareSerial5writeEh+0x30>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
  30:	e0 5c       	subi	r30, 0xC0	; 192
  32:	ff 4f       	sbci	r31, 0xFF	; 255
  34:	80 81       	ld	r24, Z
  36:	91 81       	ldd	r25, Z+1	; 0x01
  38:	e0 54       	subi	r30, 0x40	; 64
  3a:	f0 40       	sbci	r31, 0x00	; 0
  3c:	e8 0f       	add	r30, r24
  3e:	f9 1f       	adc	r31, r25
  40:	60 83       	st	Z, r22
  _tx_buffer->head = i;
  42:	ee 85       	ldd	r30, Y+14	; 0x0e
  44:	ff 85       	ldd	r31, Y+15	; 0x0f
  46:	e0 5c       	subi	r30, 0xC0	; 192
  48:	ff 4f       	sbci	r31, 0xFF	; 255
  4a:	31 83       	std	Z+1, r19	; 0x01
  4c:	20 83       	st	Z, r18
	
  sbi(*_ucsrb, _udrie);
  4e:	ee 89       	ldd	r30, Y+22	; 0x16
  50:	ff 89       	ldd	r31, Y+23	; 0x17
  52:	20 81       	ld	r18, Z
  54:	81 e0       	ldi	r24, 0x01	; 1
  56:	90 e0       	ldi	r25, 0x00	; 0
  58:	0d 8c       	ldd	r0, Y+29	; 0x1d
  5a:	00 c0       	rjmp	.+0      	; 0x5c <_ZN14HardwareSerial5writeEh+0x5c>
  5c:	88 0f       	add	r24, r24
  5e:	99 1f       	adc	r25, r25
  60:	0a 94       	dec	r0
  62:	02 f4       	brpl	.+0      	; 0x64 <_ZN14HardwareSerial5writeEh+0x64>
  64:	28 2b       	or	r18, r24
  66:	20 83       	st	Z, r18
  
  return 1;
}
  68:	81 e0       	ldi	r24, 0x01	; 1
  6a:	90 e0       	ldi	r25, 0x00	; 0
  6c:	df 91       	pop	r29
  6e:	cf 91       	pop	r28
  70:	08 95       	ret

Disassembly of section .text._ZN14HardwareSerialcvbEv:

00000000 <_ZN14HardwareSerialcvbEv>:

HardwareSerial::operator bool() {
	return true;
}
   0:	81 e0       	ldi	r24, 0x01	; 1
   2:	08 95       	ret

Disassembly of section .text._GLOBAL__I_rx_buffer:

00000000 <_GLOBAL__I_rx_buffer>:
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
   0:	1f 93       	push	r17
   2:	10 92 00 00 	sts	0x0000, r1
   6:	10 92 00 00 	sts	0x0000, r1
   a:	28 ee       	ldi	r18, 0xE8	; 232
   c:	33 e0       	ldi	r19, 0x03	; 3
   e:	40 e0       	ldi	r20, 0x00	; 0
  10:	50 e0       	ldi	r21, 0x00	; 0
  12:	20 93 00 00 	sts	0x0000, r18
  16:	30 93 00 00 	sts	0x0000, r19
  1a:	40 93 00 00 	sts	0x0000, r20
  1e:	50 93 00 00 	sts	0x0000, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  22:	60 e0       	ldi	r22, 0x00	; 0
  24:	70 e0       	ldi	r23, 0x00	; 0
  26:	70 93 00 00 	sts	0x0000, r23
  2a:	60 93 00 00 	sts	0x0000, r22
{
  _rx_buffer = rx_buffer;
  2e:	80 e0       	ldi	r24, 0x00	; 0
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	90 93 00 00 	sts	0x0000, r25
  36:	80 93 00 00 	sts	0x0000, r24
  _tx_buffer = tx_buffer;
  3a:	80 e0       	ldi	r24, 0x00	; 0
  3c:	90 e0       	ldi	r25, 0x00	; 0
  3e:	90 93 00 00 	sts	0x0000, r25
  42:	80 93 00 00 	sts	0x0000, r24
  _ubrrh = ubrrh;
  46:	85 ec       	ldi	r24, 0xC5	; 197
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	90 93 00 00 	sts	0x0000, r25
  4e:	80 93 00 00 	sts	0x0000, r24
  _ubrrl = ubrrl;
  52:	84 ec       	ldi	r24, 0xC4	; 196
  54:	90 e0       	ldi	r25, 0x00	; 0
  56:	90 93 00 00 	sts	0x0000, r25
  5a:	80 93 00 00 	sts	0x0000, r24
  _ucsra = ucsra;
  5e:	80 ec       	ldi	r24, 0xC0	; 192
  60:	90 e0       	ldi	r25, 0x00	; 0
  62:	90 93 00 00 	sts	0x0000, r25
  66:	80 93 00 00 	sts	0x0000, r24
  _ucsrb = ucsrb;
  6a:	81 ec       	ldi	r24, 0xC1	; 193
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	90 93 00 00 	sts	0x0000, r25
  72:	80 93 00 00 	sts	0x0000, r24
  _udr = udr;
  76:	86 ec       	ldi	r24, 0xC6	; 198
  78:	90 e0       	ldi	r25, 0x00	; 0
  7a:	90 93 00 00 	sts	0x0000, r25
  7e:	80 93 00 00 	sts	0x0000, r24
  _rxen = rxen;
  82:	14 e0       	ldi	r17, 0x04	; 4
  84:	10 93 00 00 	sts	0x0000, r17
  _txen = txen;
  88:	b3 e0       	ldi	r27, 0x03	; 3
  8a:	b0 93 00 00 	sts	0x0000, r27
  _rxcie = rxcie;
  8e:	a7 e0       	ldi	r26, 0x07	; 7
  90:	a0 93 00 00 	sts	0x0000, r26
  _udrie = udrie;
  94:	f5 e0       	ldi	r31, 0x05	; 5
  96:	f0 93 00 00 	sts	0x0000, r31
  _u2x = u2x;
  9a:	e1 e0       	ldi	r30, 0x01	; 1
  9c:	e0 93 00 00 	sts	0x0000, r30
  a0:	10 92 00 00 	sts	0x0000, r1
  a4:	10 92 00 00 	sts	0x0000, r1
  a8:	20 93 00 00 	sts	0x0000, r18
  ac:	30 93 00 00 	sts	0x0000, r19
  b0:	40 93 00 00 	sts	0x0000, r20
  b4:	50 93 00 00 	sts	0x0000, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
  b8:	70 93 00 00 	sts	0x0000, r23
  bc:	60 93 00 00 	sts	0x0000, r22
{
  _rx_buffer = rx_buffer;
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	90 93 00 00 	sts	0x0000, r25
  c8:	80 93 00 00 	sts	0x0000, r24
  _tx_buffer = tx_buffer;
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	90 93 00 00 	sts	0x0000, r25
  d4:	80 93 00 00 	sts	0x0000, r24
  _ubrrh = ubrrh;
  d8:	8d ec       	ldi	r24, 0xCD	; 205
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	90 93 00 00 	sts	0x0000, r25
  e0:	80 93 00 00 	sts	0x0000, r24
  _ubrrl = ubrrl;
  e4:	8c ec       	ldi	r24, 0xCC	; 204
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	90 93 00 00 	sts	0x0000, r25
  ec:	80 93 00 00 	sts	0x0000, r24
  _ucsra = ucsra;
  f0:	88 ec       	ldi	r24, 0xC8	; 200
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 00 00 	sts	0x0000, r25
  f8:	80 93 00 00 	sts	0x0000, r24
  _ucsrb = ucsrb;
  fc:	89 ec       	ldi	r24, 0xC9	; 201
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	90 93 00 00 	sts	0x0000, r25
 104:	80 93 00 00 	sts	0x0000, r24
  _udr = udr;
 108:	8e ec       	ldi	r24, 0xCE	; 206
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	90 93 00 00 	sts	0x0000, r25
 110:	80 93 00 00 	sts	0x0000, r24
  _rxen = rxen;
 114:	10 93 00 00 	sts	0x0000, r17
  _txen = txen;
 118:	b0 93 00 00 	sts	0x0000, r27
  _rxcie = rxcie;
 11c:	a0 93 00 00 	sts	0x0000, r26
  _udrie = udrie;
 120:	f0 93 00 00 	sts	0x0000, r31
  _u2x = u2x;
 124:	e0 93 00 00 	sts	0x0000, r30
 128:	10 92 00 00 	sts	0x0000, r1
 12c:	10 92 00 00 	sts	0x0000, r1
 130:	20 93 00 00 	sts	0x0000, r18
 134:	30 93 00 00 	sts	0x0000, r19
 138:	40 93 00 00 	sts	0x0000, r20
 13c:	50 93 00 00 	sts	0x0000, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 140:	70 93 00 00 	sts	0x0000, r23
 144:	60 93 00 00 	sts	0x0000, r22
{
  _rx_buffer = rx_buffer;
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	90 93 00 00 	sts	0x0000, r25
 150:	80 93 00 00 	sts	0x0000, r24
  _tx_buffer = tx_buffer;
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	90 e0       	ldi	r25, 0x00	; 0
 158:	90 93 00 00 	sts	0x0000, r25
 15c:	80 93 00 00 	sts	0x0000, r24
  _ubrrh = ubrrh;
 160:	85 ed       	ldi	r24, 0xD5	; 213
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	90 93 00 00 	sts	0x0000, r25
 168:	80 93 00 00 	sts	0x0000, r24
  _ubrrl = ubrrl;
 16c:	84 ed       	ldi	r24, 0xD4	; 212
 16e:	90 e0       	ldi	r25, 0x00	; 0
 170:	90 93 00 00 	sts	0x0000, r25
 174:	80 93 00 00 	sts	0x0000, r24
  _ucsra = ucsra;
 178:	80 ed       	ldi	r24, 0xD0	; 208
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	90 93 00 00 	sts	0x0000, r25
 180:	80 93 00 00 	sts	0x0000, r24
  _ucsrb = ucsrb;
 184:	81 ed       	ldi	r24, 0xD1	; 209
 186:	90 e0       	ldi	r25, 0x00	; 0
 188:	90 93 00 00 	sts	0x0000, r25
 18c:	80 93 00 00 	sts	0x0000, r24
  _udr = udr;
 190:	86 ed       	ldi	r24, 0xD6	; 214
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	90 93 00 00 	sts	0x0000, r25
 198:	80 93 00 00 	sts	0x0000, r24
  _rxen = rxen;
 19c:	10 93 00 00 	sts	0x0000, r17
  _txen = txen;
 1a0:	b0 93 00 00 	sts	0x0000, r27
  _rxcie = rxcie;
 1a4:	a0 93 00 00 	sts	0x0000, r26
  _udrie = udrie;
 1a8:	f0 93 00 00 	sts	0x0000, r31
  _u2x = u2x;
 1ac:	e0 93 00 00 	sts	0x0000, r30
 1b0:	10 92 00 00 	sts	0x0000, r1
 1b4:	10 92 00 00 	sts	0x0000, r1
 1b8:	20 93 00 00 	sts	0x0000, r18
 1bc:	30 93 00 00 	sts	0x0000, r19
 1c0:	40 93 00 00 	sts	0x0000, r20
 1c4:	50 93 00 00 	sts	0x0000, r21

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
 1c8:	70 93 00 00 	sts	0x0000, r23
 1cc:	60 93 00 00 	sts	0x0000, r22
{
  _rx_buffer = rx_buffer;
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	90 93 00 00 	sts	0x0000, r25
 1d8:	80 93 00 00 	sts	0x0000, r24
  _tx_buffer = tx_buffer;
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	90 e0       	ldi	r25, 0x00	; 0
 1e0:	90 93 00 00 	sts	0x0000, r25
 1e4:	80 93 00 00 	sts	0x0000, r24
  _ubrrh = ubrrh;
 1e8:	85 e3       	ldi	r24, 0x35	; 53
 1ea:	91 e0       	ldi	r25, 0x01	; 1
 1ec:	90 93 00 00 	sts	0x0000, r25
 1f0:	80 93 00 00 	sts	0x0000, r24
  _ubrrl = ubrrl;
 1f4:	84 e3       	ldi	r24, 0x34	; 52
 1f6:	91 e0       	ldi	r25, 0x01	; 1
 1f8:	90 93 00 00 	sts	0x0000, r25
 1fc:	80 93 00 00 	sts	0x0000, r24
  _ucsra = ucsra;
 200:	80 e3       	ldi	r24, 0x30	; 48
 202:	91 e0       	ldi	r25, 0x01	; 1
 204:	90 93 00 00 	sts	0x0000, r25
 208:	80 93 00 00 	sts	0x0000, r24
  _ucsrb = ucsrb;
 20c:	81 e3       	ldi	r24, 0x31	; 49
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	90 93 00 00 	sts	0x0000, r25
 214:	80 93 00 00 	sts	0x0000, r24
  _udr = udr;
 218:	86 e3       	ldi	r24, 0x36	; 54
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	90 93 00 00 	sts	0x0000, r25
 220:	80 93 00 00 	sts	0x0000, r24
  _rxen = rxen;
 224:	10 93 00 00 	sts	0x0000, r17
  _txen = txen;
 228:	b0 93 00 00 	sts	0x0000, r27
  _rxcie = rxcie;
 22c:	a0 93 00 00 	sts	0x0000, r26
  _udrie = udrie;
 230:	f0 93 00 00 	sts	0x0000, r31
  _u2x = u2x;
 234:	e0 93 00 00 	sts	0x0000, r30
#endif
#if defined(UBRR2H)
  HardwareSerial Serial2(&rx_buffer2, &tx_buffer2, &UBRR2H, &UBRR2L, &UCSR2A, &UCSR2B, &UDR2, RXEN2, TXEN2, RXCIE2, UDRIE2, U2X2);
#endif
#if defined(UBRR3H)
  HardwareSerial Serial3(&rx_buffer3, &tx_buffer3, &UBRR3H, &UBRR3L, &UCSR3A, &UCSR3B, &UDR3, RXEN3, TXEN3, RXCIE3, UDRIE3, U2X3);
 238:	1f 91       	pop	r17
 23a:	08 95       	ret

IPAddress.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 00000296  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000897  00000000  00000000  000002ca  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   0000042a  00000000  00000000  00000b61  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._ZN9IPAddressC2Ehhhh 00000018  00000000  00000000  00000f8b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN9IPAddressC1Ehhhh 00000018  00000000  00000000  00000fa3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._GLOBAL__I__ZN9IPAddressC2Ev 0000001e  00000000  00000000  00000fbb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .ctors        00000002  00000000  00000000  00000fd9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 10 .text._ZNK9IPAddress7printToER5Print 00000084  00000000  00000000  00000fdb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN9IPAddresseqEPKh 0000001e  00000000  00000000  0000105f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN9IPAddressaSEm 00000024  00000000  00000000  0000107d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN9IPAddressaSEPKh 0000001a  00000000  00000000  000010a1  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text._ZN9IPAddressC1EPKh 00000022  00000000  00000000  000010bb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN9IPAddressC2EPKh 00000022  00000000  00000000  000010dd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN9IPAddressC1Em 0000002c  00000000  00000000  000010ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN9IPAddressC2Em 0000002c  00000000  00000000  0000112b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN9IPAddressC1Ev 00000014  00000000  00000000  00001157  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN9IPAddressC2Ev 00000014  00000000  00000000  0000116b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .rodata._ZTV9IPAddress 00000006  00000000  00000000  0000117f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 21 .bss._ZL11INADDR_NONE 00000006  00000000  00000000  00001185  2**0
                  ALLOC
 22 .rodata._ZTV9Printable 00000006  00000000  00000000  00001185  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 23 .debug_frame  000000e0  00000000  00000000  0000118c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 24 .debug_loc    000002d6  00000000  00000000  0000126c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 25 .debug_pubnames 0000013d  00000000  00000000  00001542  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 26 .debug_aranges 00000080  00000000  00000000  0000167f  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 27 .debug_ranges 00000078  00000000  00000000  000016ff  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 28 .debug_str    0000034c  00000000  00000000  00001777  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._ZN9IPAddressC2Ehhhh:

00000000 <_ZN9IPAddressC2Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	0f 93       	push	r16
   2:	fc 01       	movw	r30, r24
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	91 83       	std	Z+1, r25	; 0x01
   a:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
   c:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
   e:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
  10:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
  12:	05 83       	std	Z+5, r16	; 0x05
}
  14:	0f 91       	pop	r16
  16:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC1Ehhhh:

00000000 <_ZN9IPAddressC1Ehhhh>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	0f 93       	push	r16
   2:	fc 01       	movw	r30, r24
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	91 83       	std	Z+1, r25	; 0x01
   a:	80 83       	st	Z, r24
{
    _address[0] = first_octet;
   c:	62 83       	std	Z+2, r22	; 0x02
    _address[1] = second_octet;
   e:	43 83       	std	Z+3, r20	; 0x03
    _address[2] = third_octet;
  10:	24 83       	std	Z+4, r18	; 0x04
    _address[3] = fourth_octet;
  12:	05 83       	std	Z+5, r16	; 0x05
}
  14:	0f 91       	pop	r16
  16:	08 95       	ret

Disassembly of section .text._GLOBAL__I__ZN9IPAddressC2Ev:

00000000 <_GLOBAL__I__ZN9IPAddressC2Ev>:
IPAddress::IPAddress()
{
    memset(_address, 0, sizeof(_address));
}

IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
   0:	80 e0       	ldi	r24, 0x00	; 0
   2:	90 e0       	ldi	r25, 0x00	; 0
   4:	90 93 00 00 	sts	0x0000, r25
   8:	80 93 00 00 	sts	0x0000, r24
{
    _address[0] = first_octet;
   c:	10 92 00 00 	sts	0x0000, r1
    _address[1] = second_octet;
  10:	10 92 00 00 	sts	0x0000, r1
    _address[2] = third_octet;
  14:	10 92 00 00 	sts	0x0000, r1
    _address[3] = fourth_octet;
  18:	10 92 00 00 	sts	0x0000, r1
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
    return n;
}
  1c:	08 95       	ret

Disassembly of section .text._ZNK9IPAddress7printToER5Print:

00000000 <_ZNK9IPAddress7printToER5Print>:
bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
}

size_t IPAddress::printTo(Print& p) const
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
  18:	4c 01       	movw	r8, r24
  1a:	6b 01       	movw	r12, r22
  1c:	7c 01       	movw	r14, r24
  1e:	aa 24       	eor	r10, r10
  20:	bb 24       	eor	r11, r11
  22:	c0 e0       	ldi	r28, 0x00	; 0
  24:	d0 e0       	ldi	r29, 0x00	; 0
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
  26:	c6 01       	movw	r24, r12
  28:	f7 01       	movw	r30, r14
  2a:	62 81       	ldd	r22, Z+2	; 0x02
  2c:	4a e0       	ldi	r20, 0x0A	; 10
  2e:	50 e0       	ldi	r21, 0x00	; 0
  30:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  34:	8c 01       	movw	r16, r24
        n += p.print('.');
  36:	c6 01       	movw	r24, r12
  38:	6e e2       	ldi	r22, 0x2E	; 46
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
    {
        n += p.print(_address[i], DEC);
  3e:	08 0f       	add	r16, r24
  40:	19 1f       	adc	r17, r25
        n += p.print('.');
  42:	a0 0e       	add	r10, r16
  44:	b1 1e       	adc	r11, r17
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i =0; i < 3; i++)
  46:	21 96       	adiw	r28, 0x01	; 1
  48:	08 94       	sec
  4a:	e1 1c       	adc	r14, r1
  4c:	f1 1c       	adc	r15, r1
  4e:	c3 30       	cpi	r28, 0x03	; 3
  50:	d1 05       	cpc	r29, r1
  52:	01 f4       	brne	.+0      	; 0x54 <_ZNK9IPAddress7printToER5Print+0x54>
    {
        n += p.print(_address[i], DEC);
        n += p.print('.');
    }
    n += p.print(_address[3], DEC);
  54:	c6 01       	movw	r24, r12
  56:	f4 01       	movw	r30, r8
  58:	65 81       	ldd	r22, Z+5	; 0x05
  5a:	4a e0       	ldi	r20, 0x0A	; 10
  5c:	50 e0       	ldi	r21, 0x00	; 0
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZNK9IPAddress7printToER5Print>
  62:	95 01       	movw	r18, r10
  64:	28 0f       	add	r18, r24
  66:	39 1f       	adc	r19, r25
    return n;
}
  68:	c9 01       	movw	r24, r18
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	1f 91       	pop	r17
  70:	0f 91       	pop	r16
  72:	ff 90       	pop	r15
  74:	ef 90       	pop	r14
  76:	df 90       	pop	r13
  78:	cf 90       	pop	r12
  7a:	bf 90       	pop	r11
  7c:	af 90       	pop	r10
  7e:	9f 90       	pop	r9
  80:	8f 90       	pop	r8
  82:	08 95       	ret

Disassembly of section .text._ZN9IPAddresseqEPKh:

00000000 <_ZN9IPAddresseqEPKh>:
    return *this;
}

bool IPAddress::operator==(const uint8_t* addr)
{
    return memcmp(addr, _address, sizeof(_address)) == 0;
   0:	9c 01       	movw	r18, r24
   2:	2e 5f       	subi	r18, 0xFE	; 254
   4:	3f 4f       	sbci	r19, 0xFF	; 255
   6:	cb 01       	movw	r24, r22
   8:	b9 01       	movw	r22, r18
   a:	44 e0       	ldi	r20, 0x04	; 4
   c:	50 e0       	ldi	r21, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN9IPAddresseqEPKh>
  12:	9c 01       	movw	r18, r24
  14:	80 e0       	ldi	r24, 0x00	; 0
  16:	23 2b       	or	r18, r19
  18:	01 f4       	brne	.+0      	; 0x1a <_ZN9IPAddresseqEPKh+0x1a>
  1a:	81 e0       	ldi	r24, 0x01	; 1
}
  1c:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEm:

00000000 <_ZN9IPAddressaSEm>:
{
    memcpy(_address, address, sizeof(_address));
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t address)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressaSEm+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	fc 01       	movw	r30, r24
{
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
   e:	42 83       	std	Z+2, r20	; 0x02
  10:	53 83       	std	Z+3, r21	; 0x03
  12:	64 83       	std	Z+4, r22	; 0x04
  14:	75 83       	std	Z+5, r23	; 0x05
    return *this;
}
  16:	0f 90       	pop	r0
  18:	0f 90       	pop	r0
  1a:	0f 90       	pop	r0
  1c:	0f 90       	pop	r0
  1e:	cf 91       	pop	r28
  20:	df 91       	pop	r29
  22:	08 95       	ret

Disassembly of section .text._ZN9IPAddressaSEPKh:

00000000 <_ZN9IPAddressaSEPKh>:
IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address, address, sizeof(_address));
}

IPAddress& IPAddress::operator=(const uint8_t *address)
   0:	9c 01       	movw	r18, r24
   2:	fb 01       	movw	r30, r22
{
    memcpy(_address, address, sizeof(_address));
   4:	80 81       	ld	r24, Z
   6:	91 81       	ldd	r25, Z+1	; 0x01
   8:	a2 81       	ldd	r26, Z+2	; 0x02
   a:	b3 81       	ldd	r27, Z+3	; 0x03
   c:	f9 01       	movw	r30, r18
   e:	82 83       	std	Z+2, r24	; 0x02
  10:	93 83       	std	Z+3, r25	; 0x03
  12:	a4 83       	std	Z+4, r26	; 0x04
  14:	b5 83       	std	Z+5, r27	; 0x05
    return *this;
}
  16:	c9 01       	movw	r24, r18
  18:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC1EPKh:

00000000 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    memcpy(_address, &address, sizeof(_address));
}

IPAddress::IPAddress(const uint8_t *address)
   0:	9c 01       	movw	r18, r24
   2:	fb 01       	movw	r30, r22
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	d9 01       	movw	r26, r18
   a:	8d 93       	st	X+, r24
   c:	9c 93       	st	X, r25
{
    memcpy(_address, address, sizeof(_address));
   e:	80 81       	ld	r24, Z
  10:	91 81       	ldd	r25, Z+1	; 0x01
  12:	a2 81       	ldd	r26, Z+2	; 0x02
  14:	b3 81       	ldd	r27, Z+3	; 0x03
  16:	f9 01       	movw	r30, r18
  18:	82 83       	std	Z+2, r24	; 0x02
  1a:	93 83       	std	Z+3, r25	; 0x03
  1c:	a4 83       	std	Z+4, r26	; 0x04
  1e:	b5 83       	std	Z+5, r27	; 0x05
}
  20:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2EPKh:

00000000 <_ZN9IPAddressC2EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    memcpy(_address, &address, sizeof(_address));
}

IPAddress::IPAddress(const uint8_t *address)
   0:	9c 01       	movw	r18, r24
   2:	fb 01       	movw	r30, r22
   4:	80 e0       	ldi	r24, 0x00	; 0
   6:	90 e0       	ldi	r25, 0x00	; 0
   8:	d9 01       	movw	r26, r18
   a:	8d 93       	st	X+, r24
   c:	9c 93       	st	X, r25
{
    memcpy(_address, address, sizeof(_address));
   e:	80 81       	ld	r24, Z
  10:	91 81       	ldd	r25, Z+1	; 0x01
  12:	a2 81       	ldd	r26, Z+2	; 0x02
  14:	b3 81       	ldd	r27, Z+3	; 0x03
  16:	f9 01       	movw	r30, r18
  18:	82 83       	std	Z+2, r24	; 0x02
  1a:	93 83       	std	Z+3, r25	; 0x03
  1c:	a4 83       	std	Z+4, r26	; 0x04
  1e:	b5 83       	std	Z+5, r27	; 0x05
}
  20:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC1Em:

00000000 <_ZN9IPAddressC1Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressC1Em+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	fc 01       	movw	r30, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	91 83       	std	Z+1, r25	; 0x01
  14:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
  16:	42 83       	std	Z+2, r20	; 0x02
  18:	53 83       	std	Z+3, r21	; 0x03
  1a:	64 83       	std	Z+4, r22	; 0x04
  1c:	75 83       	std	Z+5, r23	; 0x05
}
  1e:	0f 90       	pop	r0
  20:	0f 90       	pop	r0
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Em:

00000000 <_ZN9IPAddressC2Em>:
    _address[1] = second_octet;
    _address[2] = third_octet;
    _address[3] = fourth_octet;
}

IPAddress::IPAddress(uint32_t address)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZN9IPAddressC2Em+0x6>
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	fc 01       	movw	r30, r24
   e:	80 e0       	ldi	r24, 0x00	; 0
  10:	90 e0       	ldi	r25, 0x00	; 0
  12:	91 83       	std	Z+1, r25	; 0x01
  14:	80 83       	st	Z, r24
{
    memcpy(_address, &address, sizeof(_address));
  16:	42 83       	std	Z+2, r20	; 0x02
  18:	53 83       	std	Z+3, r21	; 0x03
  1a:	64 83       	std	Z+4, r22	; 0x04
  1c:	75 83       	std	Z+5, r23	; 0x05
}
  1e:	0f 90       	pop	r0
  20:	0f 90       	pop	r0
  22:	0f 90       	pop	r0
  24:	0f 90       	pop	r0
  26:	cf 91       	pop	r28
  28:	df 91       	pop	r29
  2a:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC1Ev:

00000000 <_ZN9IPAddressC1Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
   a:	12 82       	std	Z+2, r1	; 0x02
   c:	13 82       	std	Z+3, r1	; 0x03
   e:	14 82       	std	Z+4, r1	; 0x04
  10:	15 82       	std	Z+5, r1	; 0x05
}
  12:	08 95       	ret

Disassembly of section .text._ZN9IPAddressC2Ev:

00000000 <_ZN9IPAddressC2Ev>:

#include <Arduino.h>
#include <IPAddress.h>

IPAddress::IPAddress()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
{
    memset(_address, 0, sizeof(_address));
   a:	12 82       	std	Z+2, r1	; 0x02
   c:	13 82       	std	Z+3, r1	; 0x03
   e:	14 82       	std	Z+4, r1	; 0x04
  10:	15 82       	std	Z+5, r1	; 0x05
}
  12:	08 95       	ret

Print.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000036  2**0
                  ALLOC
  3 .debug_abbrev 00000336  00000000  00000000  00000036  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001ad5  00000000  00000000  0000036c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000006a9  00000000  00000000  00001e41  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._ZN5Print5writeEPKhj 00000054  00000000  00000000  000024ea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN5Print5printEPK19__FlashStringHelper 00000046  00000000  00000000  0000253e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN5Print5printEc 00000010  00000000  00000000  00002584  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._ZN5Print5printERK9Printable 00000016  00000000  00000000  00002594  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text._ZN5Print7printlnEv 00000040  00000000  00000000  000025aa  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 11 .text._ZN5Print7printlnEPK19__FlashStringHelper 00000028  00000000  00000000  000025ea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN5Print7printlnEc 00000030  00000000  00000000  00002612  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN5Print7printlnERK9Printable 00000034  00000000  00000000  00002642  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN5Print5writeEPKc 00000028  00000000  00000000  00002676  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN5Print11printNumberEmh 000000c8  00000000  00000000  0000269e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN5Print5printEmi 0000001e  00000000  00000000  00002766  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN5Print7printlnEmi 00000028  00000000  00000000  00002784  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN5Print5printEji 00000022  00000000  00000000  000027ac  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN5Print7printlnEji 0000003a  00000000  00000000  000027ce  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN5Print5printEhi 00000024  00000000  00000000  00002808  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN5Print7printlnEhi 0000003c  00000000  00000000  0000282c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN5Print5printEli 00000080  00000000  00000000  00002868  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN5Print7printlnEli 00000028  00000000  00000000  000028e8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN5Print5printEii 00000026  00000000  00000000  00002910  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN5Print7printlnEii 0000003e  00000000  00000000  00002936  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZN5Print5printEPKc 00000006  00000000  00000000  00002974  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZN5Print10printFloatEdh 00000136  00000000  00000000  0000297a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZN5Print5printEdi 00000006  00000000  00000000  00002ab0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZN5Print7printlnEdi 00000026  00000000  00000000  00002ab6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZN5Print7printlnEPKc 00000026  00000000  00000000  00002adc  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZN5Print5printERK6String 00000066  00000000  00000000  00002b02  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZN5Print7printlnERK6String 00000028  00000000  00000000  00002b68  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .rodata._ZTV5Print 00000008  00000000  00000000  00002b90  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 34 .debug_frame  000001c0  00000000  00000000  00002b98  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 35 .debug_loc    00000d88  00000000  00000000  00002d58  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 36 .debug_pubnames 00000200  00000000  00000000  00003ae0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 37 .debug_aranges 000000f0  00000000  00000000  00003ce0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 38 .debug_ranges 000000e8  00000000  00000000  00003dd0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 39 .debug_str    00000be5  00000000  00000000  00003eb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._ZN5Print5writeEPKhj:

00000000 <_ZN5Print5writeEPKhj>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	7c 01       	movw	r14, r24
  12:	6b 01       	movw	r12, r22
  14:	8a 01       	movw	r16, r20
  16:	c0 e0       	ldi	r28, 0x00	; 0
  18:	d0 e0       	ldi	r29, 0x00	; 0
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN5Print5writeEPKhj+0x1c>
{
  size_t n = 0;
  while (size--) {
    n += write(*buffer++);
  1c:	d6 01       	movw	r26, r12
  1e:	6d 91       	ld	r22, X+
  20:	6d 01       	movw	r12, r26
  22:	d7 01       	movw	r26, r14
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	01 90       	ld	r0, Z+
  2a:	f0 81       	ld	r31, Z
  2c:	e0 2d       	mov	r30, r0
  2e:	c7 01       	movw	r24, r14
  30:	19 95       	eicall
  32:	c8 0f       	add	r28, r24
  34:	d9 1f       	adc	r29, r25
  36:	01 50       	subi	r16, 0x01	; 1
  38:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
  3a:	01 15       	cp	r16, r1
  3c:	11 05       	cpc	r17, r1
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZN5Print5writeEPKhj+0x40>
    n += write(*buffer++);
  }
  return n;
}
  40:	ce 01       	movw	r24, r28
  42:	df 91       	pop	r29
  44:	cf 91       	pop	r28
  46:	1f 91       	pop	r17
  48:	0f 91       	pop	r16
  4a:	ff 90       	pop	r15
  4c:	ef 90       	pop	r14
  4e:	df 90       	pop	r13
  50:	cf 90       	pop	r12
  52:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPK19__FlashStringHelper:

00000000 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	7c 01       	movw	r14, r24
{
  const char PROGMEM *p = (const char PROGMEM *)ifsh;
   e:	8b 01       	movw	r16, r22
  10:	c0 e0       	ldi	r28, 0x00	; 0
  12:	d0 e0       	ldi	r29, 0x00	; 0
  14:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
  16:	0f 5f       	subi	r16, 0xFF	; 255
  18:	1f 4f       	sbci	r17, 0xFF	; 255
  1a:	64 91       	lpm	r22, Z+
    if (c == 0) break;
  1c:	66 23       	and	r22, r22
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN5Print5printEPK19__FlashStringHelper+0x20>
    n += write(c);
  20:	d7 01       	movw	r26, r14
  22:	ed 91       	ld	r30, X+
  24:	fc 91       	ld	r31, X
  26:	01 90       	ld	r0, Z+
  28:	f0 81       	ld	r31, Z
  2a:	e0 2d       	mov	r30, r0
  2c:	c7 01       	movw	r24, r14
  2e:	19 95       	eicall
  30:	c8 0f       	add	r28, r24
  32:	d9 1f       	adc	r29, r25
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
  }
  return n;
}
  36:	ce 01       	movw	r24, r28
  38:	df 91       	pop	r29
  3a:	cf 91       	pop	r28
  3c:	1f 91       	pop	r17
  3e:	0f 91       	pop	r16
  40:	ff 90       	pop	r15
  42:	ef 90       	pop	r14
  44:	08 95       	ret

Disassembly of section .text._ZN5Print5printEc:

00000000 <_ZN5Print5printEc>:
size_t Print::print(const char str[])
{
  return write(str);
}

size_t Print::print(char c)
   0:	dc 01       	movw	r26, r24
{
  return write(c);
   2:	ed 91       	ld	r30, X+
   4:	fc 91       	ld	r31, X
   6:	01 90       	ld	r0, Z+
   8:	f0 81       	ld	r31, Z
   a:	e0 2d       	mov	r30, r0
   c:	19 95       	eicall
}
   e:	08 95       	ret

Disassembly of section .text._ZN5Print5printERK9Printable:

00000000 <_ZN5Print5printERK9Printable>:
  size_t n = print(ifsh);
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
   0:	9c 01       	movw	r18, r24
   2:	db 01       	movw	r26, r22
{
  return x.printTo(*this);
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	01 90       	ld	r0, Z+
   a:	f0 81       	ld	r31, Z
   c:	e0 2d       	mov	r30, r0
   e:	cb 01       	movw	r24, r22
  10:	b9 01       	movw	r22, r18
  12:	19 95       	eicall
}
  14:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEv:

00000000 <_ZN5Print7printlnEv>:

size_t Print::println(void)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	8c 01       	movw	r16, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   a:	dc 01       	movw	r26, r24
   c:	ed 91       	ld	r30, X+
   e:	fc 91       	ld	r31, X
  10:	01 90       	ld	r0, Z+
  12:	f0 81       	ld	r31, Z
  14:	e0 2d       	mov	r30, r0
  16:	6d e0       	ldi	r22, 0x0D	; 13
  18:	19 95       	eicall
  1a:	7c 01       	movw	r14, r24
size_t Print::println(void)
{
  size_t n = print('\r');
  n += print('\n');
  return n;
}
  1c:	d8 01       	movw	r26, r16
  1e:	ed 91       	ld	r30, X+
  20:	fc 91       	ld	r31, X
  22:	01 90       	ld	r0, Z+
  24:	f0 81       	ld	r31, Z
  26:	e0 2d       	mov	r30, r0
  28:	c8 01       	movw	r24, r16
  2a:	6a e0       	ldi	r22, 0x0A	; 10
  2c:	19 95       	eicall
  2e:	9c 01       	movw	r18, r24
  30:	2e 0d       	add	r18, r14
  32:	3f 1d       	adc	r19, r15
  34:	c9 01       	movw	r24, r18
  36:	1f 91       	pop	r17
  38:	0f 91       	pop	r16
  3a:	ff 90       	pop	r15
  3c:	ef 90       	pop	r14
  3e:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPK19__FlashStringHelper:

00000000 <_ZN5Print7printlnEPK19__FlashStringHelper>:
size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(ifsh);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
   e:	8c 01       	movw	r16, r24
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPK19__FlashStringHelper>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	ff 90       	pop	r15
  24:	ef 90       	pop	r14
  26:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEc:

00000000 <_ZN5Print7printlnEc>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(char c)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   a:	dc 01       	movw	r26, r24
   c:	ed 91       	ld	r30, X+
   e:	fc 91       	ld	r31, X
  10:	01 90       	ld	r0, Z+
  12:	f0 81       	ld	r31, Z
  14:	e0 2d       	mov	r30, r0
  16:	19 95       	eicall
  18:	8c 01       	movw	r16, r24
}

size_t Print::println(char c)
{
  size_t n = print(c);
  n += println();
  1a:	c7 01       	movw	r24, r14
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEc>
  20:	08 0f       	add	r16, r24
  22:	19 1f       	adc	r17, r25
  return n;
}
  24:	c8 01       	movw	r24, r16
  26:	1f 91       	pop	r17
  28:	0f 91       	pop	r16
  2a:	ff 90       	pop	r15
  2c:	ef 90       	pop	r14
  2e:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK9Printable:

00000000 <_ZN5Print7printlnERK9Printable>:
  size_t n = print(num, digits);
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
   a:	db 01       	movw	r26, r22
  return n;
}

size_t Print::print(const Printable& x)
{
  return x.printTo(*this);
   c:	ed 91       	ld	r30, X+
   e:	fc 91       	ld	r31, X
  10:	01 90       	ld	r0, Z+
  12:	f0 81       	ld	r31, Z
  14:	e0 2d       	mov	r30, r0
  16:	cb 01       	movw	r24, r22
  18:	b7 01       	movw	r22, r14
  1a:	19 95       	eicall
  1c:	8c 01       	movw	r16, r24
}

size_t Print::println(const Printable& x)
{
  size_t n = print(x);
  n += println();
  1e:	c7 01       	movw	r24, r14
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK9Printable>
  24:	08 0f       	add	r16, r24
  26:	19 1f       	adc	r17, r25
  return n;
}
  28:	c8 01       	movw	r24, r16
  2a:	1f 91       	pop	r17
  2c:	0f 91       	pop	r16
  2e:	ff 90       	pop	r15
  30:	ef 90       	pop	r14
  32:	08 95       	ret

Disassembly of section .text._ZN5Print5writeEPKc:

00000000 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	db 01       	movw	r26, r22
   6:	0d 90       	ld	r0, X+
   8:	00 20       	and	r0, r0
   a:	01 f4       	brne	.+0      	; 0xc <_ZN5Print5writeEPKc+0xc>
   c:	11 97       	sbiw	r26, 0x01	; 1
   e:	a6 1b       	sub	r26, r22
  10:	b7 0b       	sbc	r27, r23
  12:	ec 01       	movw	r28, r24
  14:	e8 81       	ld	r30, Y
  16:	f9 81       	ldd	r31, Y+1	; 0x01
  18:	02 80       	ldd	r0, Z+2	; 0x02
  1a:	f3 81       	ldd	r31, Z+3	; 0x03
  1c:	e0 2d       	mov	r30, r0
  1e:	ad 01       	movw	r20, r26
  20:	19 95       	eicall
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZN5Print11printNumberEmh:

00000000 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   0:	4f 92       	push	r4
   2:	5f 92       	push	r5
   4:	7f 92       	push	r7
   6:	8f 92       	push	r8
   8:	9f 92       	push	r9
   a:	af 92       	push	r10
   c:	bf 92       	push	r11
   e:	cf 92       	push	r12
  10:	df 92       	push	r13
  12:	ef 92       	push	r14
  14:	ff 92       	push	r15
  16:	0f 93       	push	r16
  18:	1f 93       	push	r17
  1a:	df 93       	push	r29
  1c:	cf 93       	push	r28
  1e:	cd b7       	in	r28, 0x3d	; 61
  20:	de b7       	in	r29, 0x3e	; 62
  22:	a1 97       	sbiw	r28, 0x21	; 33
  24:	0f b6       	in	r0, 0x3f	; 63
  26:	f8 94       	cli
  28:	de bf       	out	0x3e, r29	; 62
  2a:	0f be       	out	0x3f, r0	; 63
  2c:	cd bf       	out	0x3d, r28	; 61
  2e:	2c 01       	movw	r4, r24
  30:	74 2e       	mov	r7, r20
  32:	cb 01       	movw	r24, r22
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
  34:	22 30       	cpi	r18, 0x02	; 2
  36:	00 f4       	brcc	.+0      	; 0x38 <_ZN5Print11printNumberEmh+0x38>
  38:	2a e0       	ldi	r18, 0x0A	; 10

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
  3a:	19 a2       	std	Y+33, r1	; 0x21
  3c:	31 e2       	ldi	r19, 0x21	; 33
  3e:	c3 2e       	mov	r12, r19
  40:	d1 2c       	mov	r13, r1
  42:	cc 0e       	add	r12, r28
  44:	dd 1e       	adc	r13, r29
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
  46:	82 2e       	mov	r8, r18
  48:	99 24       	eor	r9, r9
  4a:	aa 24       	eor	r10, r10
  4c:	bb 24       	eor	r11, r11
  4e:	67 2d       	mov	r22, r7
  50:	75 2f       	mov	r23, r21
  52:	a5 01       	movw	r20, r10
  54:	94 01       	movw	r18, r8
  56:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  5a:	79 01       	movw	r14, r18
  5c:	8a 01       	movw	r16, r20
    char c = m - base * n;
  5e:	c8 01       	movw	r24, r16
  60:	b7 01       	movw	r22, r14
  62:	a5 01       	movw	r20, r10
  64:	94 01       	movw	r18, r8
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
  6a:	47 2d       	mov	r20, r7
  6c:	46 1b       	sub	r20, r22
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  6e:	08 94       	sec
  70:	c1 08       	sbc	r12, r1
  72:	d1 08       	sbc	r13, r1
  74:	4a 30       	cpi	r20, 0x0A	; 10
  76:	04 f4       	brge	.+0      	; 0x78 <_ZN5Print11printNumberEmh+0x78>
  78:	40 5d       	subi	r20, 0xD0	; 208
  7a:	00 c0       	rjmp	.+0      	; 0x7c <_ZN5Print11printNumberEmh+0x7c>
  7c:	49 5c       	subi	r20, 0xC9	; 201
  7e:	f6 01       	movw	r30, r12
  80:	40 83       	st	Z, r20
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
  82:	e1 14       	cp	r14, r1
  84:	f1 04       	cpc	r15, r1
  86:	01 05       	cpc	r16, r1
  88:	11 05       	cpc	r17, r1
  8a:	01 f0       	breq	.+0      	; 0x8c <_ZN5Print11printNumberEmh+0x8c>
  8c:	7e 2c       	mov	r7, r14
  8e:	5f 2d       	mov	r21, r15
  90:	c8 01       	movw	r24, r16
  92:	00 c0       	rjmp	.+0      	; 0x94 <_ZN5Print11printNumberEmh+0x94>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
  94:	c2 01       	movw	r24, r4
  96:	b6 01       	movw	r22, r12
  98:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print11printNumberEmh>
}
  9c:	a1 96       	adiw	r28, 0x21	; 33
  9e:	0f b6       	in	r0, 0x3f	; 63
  a0:	f8 94       	cli
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	0f be       	out	0x3f, r0	; 63
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	cf 91       	pop	r28
  aa:	df 91       	pop	r29
  ac:	1f 91       	pop	r17
  ae:	0f 91       	pop	r16
  b0:	ff 90       	pop	r15
  b2:	ef 90       	pop	r14
  b4:	df 90       	pop	r13
  b6:	cf 90       	pop	r12
  b8:	bf 90       	pop	r11
  ba:	af 90       	pop	r10
  bc:	9f 90       	pop	r9
  be:	8f 90       	pop	r8
  c0:	7f 90       	pop	r7
  c2:	5f 90       	pop	r5
  c4:	4f 90       	pop	r4
  c6:	08 95       	ret

Disassembly of section .text._ZN5Print5printEmi:

00000000 <_ZN5Print5printEmi>:
  } else {
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
   0:	dc 01       	movw	r26, r24
{
  if (base == 0) return write(n);
   2:	21 15       	cp	r18, r1
   4:	31 05       	cpc	r19, r1
   6:	01 f4       	brne	.+0      	; 0x8 <_ZN5Print5printEmi+0x8>
   8:	ed 91       	ld	r30, X+
   a:	fc 91       	ld	r31, X
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
  10:	e0 2d       	mov	r30, r0
  12:	64 2f       	mov	r22, r20
  14:	19 95       	eicall
  16:	08 95       	ret
  else return printNumber(n, base);
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEmi>
}
  1c:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEmi:

00000000 <_ZN5Print7printlnEmi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(num, base);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
   e:	8c 01       	movw	r16, r24
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEmi>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	ff 90       	pop	r15
  24:	ef 90       	pop	r14
  26:	08 95       	ret

Disassembly of section .text._ZN5Print5printEji:

00000000 <_ZN5Print5printEji>:
size_t Print::print(int n, int base)
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	9a 01       	movw	r18, r20
{
  return print((unsigned long) n, base);
   a:	7b 01       	movw	r14, r22
   c:	00 e0       	ldi	r16, 0x00	; 0
   e:	10 e0       	ldi	r17, 0x00	; 0
  10:	b8 01       	movw	r22, r16
  12:	a7 01       	movw	r20, r14
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEji>
}
  18:	1f 91       	pop	r17
  1a:	0f 91       	pop	r16
  1c:	ff 90       	pop	r15
  1e:	ef 90       	pop	r14
  20:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEji:

00000000 <_ZN5Print7printlnEji>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	6c 01       	movw	r12, r24
   e:	7b 01       	movw	r14, r22
  10:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
  12:	00 e0       	ldi	r16, 0x00	; 0
  14:	10 e0       	ldi	r17, 0x00	; 0
  16:	b8 01       	movw	r22, r16
  18:	a7 01       	movw	r20, r14
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  1e:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  20:	c6 01       	movw	r24, r12
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEji>
  26:	08 0f       	add	r16, r24
  28:	19 1f       	adc	r17, r25
  return n;
}
  2a:	c8 01       	movw	r24, r16
  2c:	1f 91       	pop	r17
  2e:	0f 91       	pop	r16
  30:	ff 90       	pop	r15
  32:	ef 90       	pop	r14
  34:	df 90       	pop	r13
  36:	cf 90       	pop	r12
  38:	08 95       	ret

Disassembly of section .text._ZN5Print5printEhi:

00000000 <_ZN5Print5printEhi>:
size_t Print::print(char c)
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	9a 01       	movw	r18, r20
{
  return print((unsigned long) b, base);
   a:	e6 2e       	mov	r14, r22
   c:	ff 24       	eor	r15, r15
   e:	00 e0       	ldi	r16, 0x00	; 0
  10:	10 e0       	ldi	r17, 0x00	; 0
  12:	b8 01       	movw	r22, r16
  14:	a7 01       	movw	r20, r14
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEhi>
}
  1a:	1f 91       	pop	r17
  1c:	0f 91       	pop	r16
  1e:	ff 90       	pop	r15
  20:	ef 90       	pop	r14
  22:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEhi:

00000000 <_ZN5Print7printlnEhi>:
  size_t n = print(c);
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	6c 01       	movw	r12, r24
   e:	e6 2e       	mov	r14, r22
  10:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
  12:	ff 24       	eor	r15, r15
  14:	00 e0       	ldi	r16, 0x00	; 0
  16:	10 e0       	ldi	r17, 0x00	; 0
  18:	b8 01       	movw	r22, r16
  1a:	a7 01       	movw	r20, r14
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  20:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  22:	c6 01       	movw	r24, r12
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEhi>
  28:	08 0f       	add	r16, r24
  2a:	19 1f       	adc	r17, r25
  return n;
}
  2c:	c8 01       	movw	r24, r16
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	ff 90       	pop	r15
  34:	ef 90       	pop	r14
  36:	df 90       	pop	r13
  38:	cf 90       	pop	r12
  3a:	08 95       	ret

Disassembly of section .text._ZN5Print5printEli:

00000000 <_ZN5Print5printEli>:
size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	ec 01       	movw	r28, r24
  12:	6a 01       	movw	r12, r20
  14:	7b 01       	movw	r14, r22
{
  if (base == 0) {
  16:	21 15       	cp	r18, r1
  18:	31 05       	cpc	r19, r1
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN5Print5printEli+0x1c>
    return write(n);
  1c:	e8 81       	ld	r30, Y
  1e:	f9 81       	ldd	r31, Y+1	; 0x01
  20:	01 90       	ld	r0, Z+
  22:	f0 81       	ld	r31, Z
  24:	e0 2d       	mov	r30, r0
  26:	64 2f       	mov	r22, r20
  28:	19 95       	eicall
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN5Print5printEli+0x2c>
  } else if (base == 10) {
  2c:	2a 30       	cpi	r18, 0x0A	; 10
  2e:	31 05       	cpc	r19, r1
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN5Print5printEli+0x32>
    if (n < 0) {
  32:	77 ff       	sbrs	r23, 7
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN5Print5printEli+0x36>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
  36:	e8 81       	ld	r30, Y
  38:	f9 81       	ldd	r31, Y+1	; 0x01
  3a:	01 90       	ld	r0, Z+
  3c:	f0 81       	ld	r31, Z
  3e:	e0 2d       	mov	r30, r0
  40:	6d e2       	ldi	r22, 0x2D	; 45
  42:	19 95       	eicall
  44:	8c 01       	movw	r16, r24
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
      n = -n;
      return printNumber(n, 10) + t;
  46:	44 27       	eor	r20, r20
  48:	55 27       	eor	r21, r21
  4a:	ba 01       	movw	r22, r20
  4c:	4c 19       	sub	r20, r12
  4e:	5d 09       	sbc	r21, r13
  50:	6e 09       	sbc	r22, r14
  52:	7f 09       	sbc	r23, r15
  54:	ce 01       	movw	r24, r28
  56:	2a e0       	ldi	r18, 0x0A	; 10
  58:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  5c:	98 01       	movw	r18, r16
  5e:	28 0f       	add	r18, r24
  60:	39 1f       	adc	r19, r25
  62:	00 c0       	rjmp	.+0      	; 0x64 <_ZN5Print5printEli+0x64>
    }
    return printNumber(n, 10);
  64:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
  66:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEli>
  6a:	9c 01       	movw	r18, r24
  }
}
  6c:	c9 01       	movw	r24, r18
  6e:	df 91       	pop	r29
  70:	cf 91       	pop	r28
  72:	1f 91       	pop	r17
  74:	0f 91       	pop	r16
  76:	ff 90       	pop	r15
  78:	ef 90       	pop	r14
  7a:	df 90       	pop	r13
  7c:	cf 90       	pop	r12
  7e:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEli:

00000000 <_ZN5Print7printlnEli>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(long num, int base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(num, base);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
   e:	8c 01       	movw	r16, r24
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEli>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	ff 90       	pop	r15
  24:	ef 90       	pop	r14
  26:	08 95       	ret

Disassembly of section .text._ZN5Print5printEii:

00000000 <_ZN5Print5printEii>:
size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7b 01       	movw	r14, r22
   a:	9a 01       	movw	r18, r20
{
  return print((long) n, base);
   c:	00 27       	eor	r16, r16
   e:	f7 fc       	sbrc	r15, 7
  10:	00 95       	com	r16
  12:	10 2f       	mov	r17, r16
  14:	b8 01       	movw	r22, r16
  16:	a7 01       	movw	r20, r14
  18:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEii>
}
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	ff 90       	pop	r15
  22:	ef 90       	pop	r14
  24:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEii:

00000000 <_ZN5Print7printlnEii>:
  size_t n = print(b, base);
  n += println();
  return n;
}

size_t Print::println(int num, int base)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	6c 01       	movw	r12, r24
   e:	7b 01       	movw	r14, r22
  10:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
  12:	00 27       	eor	r16, r16
  14:	f7 fc       	sbrc	r15, 7
  16:	00 95       	com	r16
  18:	10 2f       	mov	r17, r16
  1a:	b8 01       	movw	r22, r16
  1c:	a7 01       	movw	r20, r14
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  22:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
  24:	c6 01       	movw	r24, r12
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEii>
  2a:	08 0f       	add	r16, r24
  2c:	19 1f       	adc	r17, r25
  return n;
}
  2e:	c8 01       	movw	r24, r16
  30:	1f 91       	pop	r17
  32:	0f 91       	pop	r16
  34:	ff 90       	pop	r15
  36:	ef 90       	pop	r14
  38:	df 90       	pop	r13
  3a:	cf 90       	pop	r12
  3c:	08 95       	ret

Disassembly of section .text._ZN5Print5printEPKc:

00000000 <_ZN5Print5printEPKc>:
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEPKc>
}
   4:	08 95       	ret

Disassembly of section .text._ZN5Print10printFloatEdh:

00000000 <_ZN5Print10printFloatEdh>:
  } while(n);

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
   0:	7f 92       	push	r7
   2:	8f 92       	push	r8
   4:	9f 92       	push	r9
   6:	af 92       	push	r10
   8:	bf 92       	push	r11
   a:	cf 92       	push	r12
   c:	df 92       	push	r13
   e:	ef 92       	push	r14
  10:	ff 92       	push	r15
  12:	0f 93       	push	r16
  14:	1f 93       	push	r17
  16:	cf 93       	push	r28
  18:	df 93       	push	r29
  1a:	4c 01       	movw	r8, r24
  1c:	7a 01       	movw	r14, r20
  1e:	8b 01       	movw	r16, r22
  20:	72 2e       	mov	r7, r18
{ 
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
  22:	cb 01       	movw	r24, r22
  24:	ba 01       	movw	r22, r20
  26:	20 e0       	ldi	r18, 0x00	; 0
  28:	30 e0       	ldi	r19, 0x00	; 0
  2a:	40 e0       	ldi	r20, 0x00	; 0
  2c:	50 e0       	ldi	r21, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  32:	87 fd       	sbrc	r24, 7
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN5Print10printFloatEdh+0x36>
  36:	c0 e0       	ldi	r28, 0x00	; 0
  38:	d0 e0       	ldi	r29, 0x00	; 0
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN5Print10printFloatEdh+0x3c>
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
  3c:	d4 01       	movw	r26, r8
  3e:	ed 91       	ld	r30, X+
  40:	fc 91       	ld	r31, X
  42:	01 90       	ld	r0, Z+
  44:	f0 81       	ld	r31, Z
  46:	e0 2d       	mov	r30, r0
  48:	c4 01       	movw	r24, r8
  4a:	6d e2       	ldi	r22, 0x2D	; 45
  4c:	19 95       	eicall
  4e:	ec 01       	movw	r28, r24
  
  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
     number = -number;
  50:	17 fb       	bst	r17, 7
  52:	10 95       	com	r17
  54:	17 f9       	bld	r17, 7
  56:	10 95       	com	r17
  58:	20 e0       	ldi	r18, 0x00	; 0
  5a:	30 e0       	ldi	r19, 0x00	; 0
  5c:	40 e0       	ldi	r20, 0x00	; 0
  5e:	5f e3       	ldi	r21, 0x3F	; 63
  60:	aa 24       	eor	r10, r10
  62:	00 c0       	rjmp	.+0      	; 0x64 <_ZN5Print10printFloatEdh+0x64>
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    rounding /= 10.0;
  64:	ca 01       	movw	r24, r20
  66:	b9 01       	movw	r22, r18
  68:	20 e0       	ldi	r18, 0x00	; 0
  6a:	30 e0       	ldi	r19, 0x00	; 0
  6c:	40 e2       	ldi	r20, 0x20	; 32
  6e:	51 e4       	ldi	r21, 0x41	; 65
  70:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  74:	9b 01       	movw	r18, r22
  76:	ac 01       	movw	r20, r24
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
  78:	a3 94       	inc	r10
  7a:	a7 14       	cp	r10, r7
  7c:	00 f0       	brcs	.+0      	; 0x7e <_ZN5Print10printFloatEdh+0x7e>
    rounding /= 10.0;
  
  number += rounding;
  7e:	c8 01       	movw	r24, r16
  80:	b7 01       	movw	r22, r14
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  86:	5b 01       	movw	r10, r22
  88:	6c 01       	movw	r12, r24

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  8e:	7b 01       	movw	r14, r22
  90:	8c 01       	movw	r16, r24
  double remainder = number - (double)int_part;
  n += print(int_part);
  92:	c4 01       	movw	r24, r8
  94:	b8 01       	movw	r22, r16
  96:	a7 01       	movw	r20, r14
  98:	2a e0       	ldi	r18, 0x0A	; 10
  9a:	30 e0       	ldi	r19, 0x00	; 0
  9c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  a0:	c8 0f       	add	r28, r24
  a2:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
  a4:	77 20       	and	r7, r7
  a6:	01 f0       	breq	.+0      	; 0xa8 <_ZN5Print10printFloatEdh+0xa8>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
  a8:	c4 01       	movw	r24, r8
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	70 e0       	ldi	r23, 0x00	; 0
  ae:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
  b2:	c8 0f       	add	r28, r24
  b4:	d9 1f       	adc	r29, r25
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  b6:	c8 01       	movw	r24, r16
  b8:	b7 01       	movw	r22, r14
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  be:	9b 01       	movw	r18, r22
  c0:	ac 01       	movw	r20, r24
  c2:	c6 01       	movw	r24, r12
  c4:	b5 01       	movw	r22, r10
  c6:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_ZN5Print10printFloatEdh+0xcc>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
  cc:	20 e0       	ldi	r18, 0x00	; 0
  ce:	30 e0       	ldi	r19, 0x00	; 0
  d0:	40 e2       	ldi	r20, 0x20	; 32
  d2:	51 e4       	ldi	r21, 0x41	; 65
  d4:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  d8:	7b 01       	movw	r14, r22
  da:	8c 01       	movw	r16, r24
    int toPrint = int(remainder);
  dc:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  e0:	5b 01       	movw	r10, r22
  e2:	6c 01       	movw	r12, r24
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
  e4:	cc 24       	eor	r12, r12
  e6:	b7 fc       	sbrc	r11, 7
  e8:	c0 94       	com	r12
  ea:	dc 2c       	mov	r13, r12
  ec:	c4 01       	movw	r24, r8
  ee:	b6 01       	movw	r22, r12
  f0:	a5 01       	movw	r20, r10
  f2:	2a e0       	ldi	r18, 0x0A	; 10
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
  fa:	c8 0f       	add	r28, r24
  fc:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
  fe:	c6 01       	movw	r24, r12
 100:	b5 01       	movw	r22, r10
 102:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 106:	9b 01       	movw	r18, r22
 108:	ac 01       	movw	r20, r24
 10a:	c8 01       	movw	r24, r16
 10c:	b7 01       	movw	r22, r14
 10e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print10printFloatEdh>
 112:	7a 94       	dec	r7
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 114:	77 20       	and	r7, r7
 116:	01 f4       	brne	.+0      	; 0x118 <_ZN5Print10printFloatEdh+0x118>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
 118:	ce 01       	movw	r24, r28
 11a:	df 91       	pop	r29
 11c:	cf 91       	pop	r28
 11e:	1f 91       	pop	r17
 120:	0f 91       	pop	r16
 122:	ff 90       	pop	r15
 124:	ef 90       	pop	r14
 126:	df 90       	pop	r13
 128:	cf 90       	pop	r12
 12a:	bf 90       	pop	r11
 12c:	af 90       	pop	r10
 12e:	9f 90       	pop	r9
 130:	8f 90       	pop	r8
 132:	7f 90       	pop	r7
 134:	08 95       	ret

Disassembly of section .text._ZN5Print5printEdi:

00000000 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   0:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printEdi>
}
   4:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEdi:

00000000 <_ZN5Print7printlnEdi>:
  size_t n = print(num, base);
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEdi>
  16:	08 0f       	add	r16, r24
  18:	19 1f       	adc	r17, r25
  return n;
}
  1a:	c8 01       	movw	r24, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	ff 90       	pop	r15
  22:	ef 90       	pop	r14
  24:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnEPKc:

00000000 <_ZN5Print7printlnEPKc>:
  size_t n = print(s);
  n += println();
  return n;
}

size_t Print::println(const char c[])
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
   e:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnEPKc>
  16:	08 0f       	add	r16, r24
  18:	19 1f       	adc	r17, r25
  return n;
}
  1a:	c8 01       	movw	r24, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	ff 90       	pop	r15
  22:	ef 90       	pop	r14
  24:	08 95       	ret

Disassembly of section .text._ZN5Print5printERK6String:

00000000 <_ZN5Print5printERK6String>:
    n += write(c);
  }
  return n;
}

size_t Print::print(const String &s)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	5c 01       	movw	r10, r24
  16:	6b 01       	movw	r12, r22
  18:	ee 24       	eor	r14, r14
  1a:	ff 24       	eor	r15, r15
  1c:	c0 e0       	ldi	r28, 0x00	; 0
  1e:	d0 e0       	ldi	r29, 0x00	; 0
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN5Print5printERK6String+0x22>
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    n += write(s[i]);
  22:	d5 01       	movw	r26, r10
  24:	ed 91       	ld	r30, X+
  26:	fc 91       	ld	r31, X
  28:	00 81       	ld	r16, Z
  2a:	11 81       	ldd	r17, Z+1	; 0x01
  2c:	c6 01       	movw	r24, r12
  2e:	be 01       	movw	r22, r28
  30:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print5printERK6String>
  34:	68 2f       	mov	r22, r24
  36:	c5 01       	movw	r24, r10
  38:	f8 01       	movw	r30, r16
  3a:	19 95       	eicall
  3c:	e8 0e       	add	r14, r24
  3e:	f9 1e       	adc	r15, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
  40:	21 96       	adiw	r28, 0x01	; 1
  42:	f6 01       	movw	r30, r12
  44:	84 81       	ldd	r24, Z+4	; 0x04
  46:	95 81       	ldd	r25, Z+5	; 0x05
  48:	c8 17       	cp	r28, r24
  4a:	d9 07       	cpc	r29, r25
  4c:	00 f0       	brcs	.+0      	; 0x4e <_ZN5Print5printERK6String+0x4e>
    n += write(s[i]);
  }
  return n;
}
  4e:	c7 01       	movw	r24, r14
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	ff 90       	pop	r15
  5a:	ef 90       	pop	r14
  5c:	df 90       	pop	r13
  5e:	cf 90       	pop	r12
  60:	bf 90       	pop	r11
  62:	af 90       	pop	r10
  64:	08 95       	ret

Disassembly of section .text._ZN5Print7printlnERK6String:

00000000 <_ZN5Print7printlnERK6String>:
  size_t n = print('\r');
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7c 01       	movw	r14, r24
{
  size_t n = print(s);
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
   e:	8c 01       	movw	r16, r24
  n += println();
  10:	c7 01       	movw	r24, r14
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Print7printlnERK6String>
  16:	9c 01       	movw	r18, r24
  18:	20 0f       	add	r18, r16
  1a:	31 1f       	adc	r19, r17
  return n;
}
  1c:	c9 01       	movw	r24, r18
  1e:	1f 91       	pop	r17
  20:	0f 91       	pop	r16
  22:	ff 90       	pop	r15
  24:	ef 90       	pop	r14
  26:	08 95       	ret

Servo.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 0000030e  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000760  00000000  00000000  00000342  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000540  00000000  00000000  00000aa2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._ZN5ServoC2Ev 00000034  00000000  00000000  00000fe2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN5ServoC1Ev 00000034  00000000  00000000  00001016  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN5Servo6detachEv 00000060  00000000  00000000  0000104a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN5Servo17writeMicrosecondsEi 0000008e  00000000  00000000  000010aa  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN5Servo16readMicrosecondsEv 0000003e  00000000  00000000  00001138  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN5Servo8attachedEv 00000024  00000000  00000000  00001176  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN5Servo4readEv 000000aa  00000000  00000000  0000119a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN5Servo5writeEi 000000d0  00000000  00000000  00001244  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN5Servo6attachEiii 00000160  00000000  00000000  00001314  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN5Servo6attachEi 0000000e  00000000  00000000  00001474  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZL17handle_interrupts18timer16_Sequence_tPVjS1_ 00000184  00000000  00000000  00001482  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text.__vector_47 0000005c  00000000  00000000  00001606  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text.__vector_42 0000005c  00000000  00000000  00001662  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text.__vector_32 0000005c  00000000  00000000  000016be  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text.__vector_17 0000005c  00000000  00000000  0000171a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .bss.ServoCount 00000001  00000000  00000000  00001776  2**0
                  ALLOC
 22 .bss._ZL6servos 00000090  00000000  00000000  00001776  2**0
                  ALLOC
 23 .bss._ZL7Channel 00000004  00000000  00000000  00001776  2**0
                  ALLOC
 24 .debug_frame  00000100  00000000  00000000  00001778  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 25 .debug_loc    00000433  00000000  00000000  00001878  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 26 .debug_pubnames 00000127  00000000  00000000  00001cab  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 27 .debug_aranges 00000090  00000000  00000000  00001dd2  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 28 .debug_ranges 000000b8  00000000  00000000  00001e62  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 29 .debug_str    0000030c  00000000  00000000  00001f1a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._ZN5ServoC2Ev:

00000000 <_ZN5ServoC2Ev>:
}


/****************** end of static functions ******************************/

Servo::Servo()
   0:	fc 01       	movw	r30, r24
{
  if( ServoCount < MAX_SERVOS) {
   2:	80 91 00 00 	lds	r24, 0x0000
   6:	80 33       	cpi	r24, 0x30	; 48
   8:	00 f4       	brcc	.+0      	; 0xa <_ZN5ServoC2Ev+0xa>
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
   a:	80 83       	st	Z, r24
   c:	8f 5f       	subi	r24, 0xFF	; 255
   e:	80 93 00 00 	sts	0x0000, r24
  12:	81 50       	subi	r24, 0x01	; 1
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	fc 01       	movw	r30, r24
  18:	ee 0f       	add	r30, r30
  1a:	ff 1f       	adc	r31, r31
  1c:	e8 0f       	add	r30, r24
  1e:	f9 1f       	adc	r31, r25
  20:	e0 50       	subi	r30, 0x00	; 0
  22:	f0 40       	sbci	r31, 0x00	; 0
  24:	88 eb       	ldi	r24, 0xB8	; 184
  26:	9b e0       	ldi	r25, 0x0B	; 11
  28:	92 83       	std	Z+2, r25	; 0x02
  2a:	81 83       	std	Z+1, r24	; 0x01
  2c:	08 95       	ret
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
  2e:	8f ef       	ldi	r24, 0xFF	; 255
  30:	80 83       	st	Z, r24
  32:	08 95       	ret

Disassembly of section .text._ZN5ServoC1Ev:

00000000 <_ZN5ServoC1Ev>:
}


/****************** end of static functions ******************************/

Servo::Servo()
   0:	fc 01       	movw	r30, r24
{
  if( ServoCount < MAX_SERVOS) {
   2:	80 91 00 00 	lds	r24, 0x0000
   6:	80 33       	cpi	r24, 0x30	; 48
   8:	00 f4       	brcc	.+0      	; 0xa <_ZN5ServoC1Ev+0xa>
    this->servoIndex = ServoCount++;                    // assign a servo index to this instance
   a:	80 83       	st	Z, r24
   c:	8f 5f       	subi	r24, 0xFF	; 255
   e:	80 93 00 00 	sts	0x0000, r24
  12:	81 50       	subi	r24, 0x01	; 1
	servos[this->servoIndex].ticks = usToTicks(DEFAULT_PULSE_WIDTH);   // store default values  - 12 Aug 2009
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	fc 01       	movw	r30, r24
  18:	ee 0f       	add	r30, r30
  1a:	ff 1f       	adc	r31, r31
  1c:	e8 0f       	add	r30, r24
  1e:	f9 1f       	adc	r31, r25
  20:	e0 50       	subi	r30, 0x00	; 0
  22:	f0 40       	sbci	r31, 0x00	; 0
  24:	88 eb       	ldi	r24, 0xB8	; 184
  26:	9b e0       	ldi	r25, 0x0B	; 11
  28:	92 83       	std	Z+2, r25	; 0x02
  2a:	81 83       	std	Z+1, r24	; 0x01
  2c:	08 95       	ret
  }
  else
    this->servoIndex = INVALID_SERVO ;  // too many servos 
  2e:	8f ef       	ldi	r24, 0xFF	; 255
  30:	80 83       	st	Z, r24
  32:	08 95       	ret

Disassembly of section .text._ZN5Servo6detachEv:

00000000 <_ZN5Servo6detachEv>:
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
  } 
  return this->servoIndex ;
}

void Servo::detach()  
   0:	dc 01       	movw	r26, r24
{
  servos[this->servoIndex].Pin.isActive = false;  
   2:	8c 91       	ld	r24, X
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	fc 01       	movw	r30, r24
   8:	ee 0f       	add	r30, r30
   a:	ff 1f       	adc	r31, r31
   c:	e8 0f       	add	r30, r24
   e:	f9 1f       	adc	r31, r25
  10:	e0 50       	subi	r30, 0x00	; 0
  12:	f0 40       	sbci	r31, 0x00	; 0
  14:	80 81       	ld	r24, Z
  16:	8f 7b       	andi	r24, 0xBF	; 191
  18:	80 83       	st	Z, r24

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
  1a:	8c 91       	ld	r24, X
  1c:	6c e0       	ldi	r22, 0x0C	; 12
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo6detachEv>
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	ac 01       	movw	r20, r24
  26:	44 0f       	add	r20, r20
  28:	55 1f       	adc	r21, r21
  2a:	48 0f       	add	r20, r24
  2c:	59 1f       	adc	r21, r25
  2e:	44 0f       	add	r20, r20
  30:	55 1f       	adc	r21, r21
  32:	44 0f       	add	r20, r20
  34:	55 1f       	adc	r21, r21
  36:	20 e0       	ldi	r18, 0x00	; 0
  38:	30 e0       	ldi	r19, 0x00	; 0
  3a:	c9 01       	movw	r24, r18
  3c:	84 0f       	add	r24, r20
  3e:	95 1f       	adc	r25, r21
  40:	fc 01       	movw	r30, r24
  42:	ee 0f       	add	r30, r30
  44:	ff 1f       	adc	r31, r31
  46:	e8 0f       	add	r30, r24
  48:	f9 1f       	adc	r31, r25
  4a:	e0 50       	subi	r30, 0x00	; 0
  4c:	f0 40       	sbci	r31, 0x00	; 0
  4e:	80 81       	ld	r24, Z
  50:	86 fd       	sbrc	r24, 6
  52:	00 c0       	rjmp	.+0      	; 0x54 <_ZN5Servo6detachEv+0x54>
  54:	2f 5f       	subi	r18, 0xFF	; 255
  56:	3f 4f       	sbci	r19, 0xFF	; 255
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
  58:	2c 30       	cpi	r18, 0x0C	; 12
  5a:	31 05       	cpc	r19, r1
  5c:	01 f4       	brne	.+0      	; 0x5e <_ZN5Servo6detachEv+0x5e>
  5e:	08 95       	ret

Disassembly of section .text._ZN5Servo17writeMicrosecondsEi:

00000000 <_ZN5Servo17writeMicrosecondsEi>:
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
  }
  this->writeMicroseconds(value);
}

void Servo::writeMicroseconds(int value)
   0:	fc 01       	movw	r30, r24
{
  // calculate and store the values for the given channel
  byte channel = this->servoIndex;
   2:	20 81       	ld	r18, Z
  if( (channel < MAX_SERVOS) )   // ensure channel is valid
   4:	20 33       	cpi	r18, 0x30	; 48
   6:	00 f0       	brcs	.+0      	; 0x8 <_ZN5Servo17writeMicrosecondsEi+0x8>
   8:	00 c0       	rjmp	.+0      	; 0xa <_ZN5Servo17writeMicrosecondsEi+0xa>
  {  
    if( value < SERVO_MIN() )          // ensure pulse width is valid
   a:	81 81       	ldd	r24, Z+1	; 0x01
   c:	99 27       	eor	r25, r25
   e:	87 fd       	sbrc	r24, 7
  10:	90 95       	com	r25
  12:	48 e8       	ldi	r20, 0x88	; 136
  14:	50 e0       	ldi	r21, 0x00	; 0
  16:	48 1b       	sub	r20, r24
  18:	59 0b       	sbc	r21, r25
  1a:	44 0f       	add	r20, r20
  1c:	55 1f       	adc	r21, r21
  1e:	44 0f       	add	r20, r20
  20:	55 1f       	adc	r21, r21
  22:	64 17       	cp	r22, r20
  24:	75 07       	cpc	r23, r21
  26:	04 f0       	brlt	.+0      	; 0x28 <_ZN5Servo17writeMicrosecondsEi+0x28>
  28:	82 81       	ldd	r24, Z+2	; 0x02
  2a:	99 27       	eor	r25, r25
  2c:	87 fd       	sbrc	r24, 7
  2e:	90 95       	com	r25
  30:	48 e5       	ldi	r20, 0x58	; 88
  32:	52 e0       	ldi	r21, 0x02	; 2
  34:	48 1b       	sub	r20, r24
  36:	59 0b       	sbc	r21, r25
  38:	44 0f       	add	r20, r20
  3a:	55 1f       	adc	r21, r21
  3c:	44 0f       	add	r20, r20
  3e:	55 1f       	adc	r21, r21
  40:	64 17       	cp	r22, r20
  42:	75 07       	cpc	r23, r21
  44:	04 f4       	brge	.+0      	; 0x46 <_ZN5Servo17writeMicrosecondsEi+0x46>
  46:	ab 01       	movw	r20, r22
      value = SERVO_MIN();
    else if( value > SERVO_MAX() )
      value = SERVO_MAX();   
    
  	value = value - TRIM_DURATION;
    value = usToTicks(value);  // convert to ticks after compensating for interrupt overhead - 12 Aug 2009
  48:	42 50       	subi	r20, 0x02	; 2
  4a:	50 40       	sbci	r21, 0x00	; 0
  4c:	ca 01       	movw	r24, r20
  4e:	aa 27       	eor	r26, r26
  50:	97 fd       	sbrc	r25, 7
  52:	a0 95       	com	r26
  54:	ba 2f       	mov	r27, r26
  56:	74 e0       	ldi	r23, 0x04	; 4
  58:	88 0f       	add	r24, r24
  5a:	99 1f       	adc	r25, r25
  5c:	aa 1f       	adc	r26, r26
  5e:	bb 1f       	adc	r27, r27
  60:	7a 95       	dec	r23
  62:	01 f4       	brne	.+0      	; 0x64 <_ZN5Servo17writeMicrosecondsEi+0x64>
  64:	63 e0       	ldi	r22, 0x03	; 3
  66:	b6 95       	lsr	r27
  68:	a7 95       	ror	r26
  6a:	97 95       	ror	r25
  6c:	87 95       	ror	r24
  6e:	6a 95       	dec	r22
  70:	01 f4       	brne	.+0      	; 0x72 <_ZN5Servo17writeMicrosecondsEi+0x72>

    uint8_t oldSREG = SREG;
  72:	4f b7       	in	r20, 0x3f	; 63
    cli();
  74:	f8 94       	cli
    servos[channel].ticks = value;  
  76:	30 e0       	ldi	r19, 0x00	; 0
  78:	f9 01       	movw	r30, r18
  7a:	ee 0f       	add	r30, r30
  7c:	ff 1f       	adc	r31, r31
  7e:	e2 0f       	add	r30, r18
  80:	f3 1f       	adc	r31, r19
  82:	e0 50       	subi	r30, 0x00	; 0
  84:	f0 40       	sbci	r31, 0x00	; 0
  86:	92 83       	std	Z+2, r25	; 0x02
  88:	81 83       	std	Z+1, r24	; 0x01
    SREG = oldSREG;   
  8a:	4f bf       	out	0x3f, r20	; 63
  8c:	08 95       	ret

Disassembly of section .text._ZN5Servo16readMicrosecondsEv:

00000000 <_ZN5Servo16readMicrosecondsEv>:
int Servo::read() // return the value as degrees
{
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);     
}

int Servo::readMicroseconds()
   0:	fc 01       	movw	r30, r24
{
  unsigned int pulsewidth;
  if( this->servoIndex != INVALID_SERVO )
   2:	80 81       	ld	r24, Z
   4:	8f 3f       	cpi	r24, 0xFF	; 255
   6:	01 f4       	brne	.+0      	; 0x8 <_ZN5Servo16readMicrosecondsEv+0x8>
   8:	20 e0       	ldi	r18, 0x00	; 0
   a:	30 e0       	ldi	r19, 0x00	; 0
   c:	00 c0       	rjmp	.+0      	; 0xe <_ZN5Servo16readMicrosecondsEv+0xe>
    pulsewidth = ticksToUs(servos[this->servoIndex].ticks)  + TRIM_DURATION ;   // 12 aug 2009
   e:	90 e0       	ldi	r25, 0x00	; 0
  10:	fc 01       	movw	r30, r24
  12:	ee 0f       	add	r30, r30
  14:	ff 1f       	adc	r31, r31
  16:	e8 0f       	add	r30, r24
  18:	f9 1f       	adc	r31, r25
  1a:	e0 50       	subi	r30, 0x00	; 0
  1c:	f0 40       	sbci	r31, 0x00	; 0
  1e:	21 81       	ldd	r18, Z+1	; 0x01
  20:	32 81       	ldd	r19, Z+2	; 0x02
  22:	83 e0       	ldi	r24, 0x03	; 3
  24:	22 0f       	add	r18, r18
  26:	33 1f       	adc	r19, r19
  28:	8a 95       	dec	r24
  2a:	01 f4       	brne	.+0      	; 0x2c <_ZN5Servo16readMicrosecondsEv+0x2c>
  2c:	b4 e0       	ldi	r27, 0x04	; 4
  2e:	36 95       	lsr	r19
  30:	27 95       	ror	r18
  32:	ba 95       	dec	r27
  34:	01 f4       	brne	.+0      	; 0x36 <_ZN5Servo16readMicrosecondsEv+0x36>
  36:	2e 5f       	subi	r18, 0xFE	; 254
  38:	3f 4f       	sbci	r19, 0xFF	; 255
  else 
    pulsewidth  = 0;

  return pulsewidth;   
}
  3a:	c9 01       	movw	r24, r18
  3c:	08 95       	ret

Disassembly of section .text._ZN5Servo8attachedEv:

00000000 <_ZN5Servo8attachedEv>:

bool Servo::attached()
   0:	fc 01       	movw	r30, r24
   2:	80 81       	ld	r24, Z
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	fc 01       	movw	r30, r24
   8:	ee 0f       	add	r30, r30
   a:	ff 1f       	adc	r31, r31
   c:	e8 0f       	add	r30, r24
   e:	f9 1f       	adc	r31, r25
  10:	e0 50       	subi	r30, 0x00	; 0
  12:	f0 40       	sbci	r31, 0x00	; 0
  14:	80 81       	ld	r24, Z
  16:	82 95       	swap	r24
  18:	86 95       	lsr	r24
  1a:	86 95       	lsr	r24
  1c:	81 70       	andi	r24, 0x01	; 1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN5Servo8attachedEv+0x20>
  20:	81 e0       	ldi	r24, 0x01	; 1
{
  return servos[this->servoIndex].Pin.isActive ;
}
  22:	08 95       	ret

Disassembly of section .text._ZN5Servo4readEv:

00000000 <_ZN5Servo4readEv>:
    servos[channel].ticks = value;  
    SREG = oldSREG;   
  } 
}

int Servo::read() // return the value as degrees
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	8c 01       	movw	r16, r24
{
  return  map( this->readMicroseconds()+1, SERVO_MIN(), SERVO_MAX(), 0, 180);     
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo4readEv>
  16:	00 d0       	rcall	.+0      	; 0x18 <_ZN5Servo4readEv+0x18>
  18:	0f 92       	push	r0
  1a:	01 96       	adiw	r24, 0x01	; 1
  1c:	aa 27       	eor	r26, r26
  1e:	97 fd       	sbrc	r25, 7
  20:	a0 95       	com	r26
  22:	ba 2f       	mov	r27, r26
  24:	f8 01       	movw	r30, r16
  26:	61 81       	ldd	r22, Z+1	; 0x01
  28:	77 27       	eor	r23, r23
  2a:	67 fd       	sbrc	r22, 7
  2c:	70 95       	com	r23
  2e:	28 e8       	ldi	r18, 0x88	; 136
  30:	30 e0       	ldi	r19, 0x00	; 0
  32:	26 1b       	sub	r18, r22
  34:	37 0b       	sbc	r19, r23
  36:	22 0f       	add	r18, r18
  38:	33 1f       	adc	r19, r19
  3a:	22 0f       	add	r18, r18
  3c:	33 1f       	adc	r19, r19
  3e:	44 27       	eor	r20, r20
  40:	37 fd       	sbrc	r19, 7
  42:	40 95       	com	r20
  44:	54 2f       	mov	r21, r20
  46:	62 81       	ldd	r22, Z+2	; 0x02
  48:	77 27       	eor	r23, r23
  4a:	67 fd       	sbrc	r22, 7
  4c:	70 95       	com	r23
  4e:	e8 e5       	ldi	r30, 0x58	; 88
  50:	ee 2e       	mov	r14, r30
  52:	e2 e0       	ldi	r30, 0x02	; 2
  54:	fe 2e       	mov	r15, r30
  56:	e6 1a       	sub	r14, r22
  58:	f7 0a       	sbc	r15, r23
  5a:	ee 0c       	add	r14, r14
  5c:	ff 1c       	adc	r15, r15
  5e:	ee 0c       	add	r14, r14
  60:	ff 1c       	adc	r15, r15
  62:	00 27       	eor	r16, r16
  64:	f7 fc       	sbrc	r15, 7
  66:	00 95       	com	r16
  68:	10 2f       	mov	r17, r16
  6a:	64 eb       	ldi	r22, 0xB4	; 180
  6c:	a6 2e       	mov	r10, r22
  6e:	b1 2c       	mov	r11, r1
  70:	c1 2c       	mov	r12, r1
  72:	d1 2c       	mov	r13, r1
  74:	ed b7       	in	r30, 0x3d	; 61
  76:	fe b7       	in	r31, 0x3e	; 62
  78:	a1 82       	std	Z+1, r10	; 0x01
  7a:	b2 82       	std	Z+2, r11	; 0x02
  7c:	c3 82       	std	Z+3, r12	; 0x03
  7e:	d4 82       	std	Z+4, r13	; 0x04
  80:	bc 01       	movw	r22, r24
  82:	cd 01       	movw	r24, r26
  84:	aa 24       	eor	r10, r10
  86:	bb 24       	eor	r11, r11
  88:	65 01       	movw	r12, r10
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo4readEv>
  8e:	0f 90       	pop	r0
  90:	0f 90       	pop	r0
  92:	0f 90       	pop	r0
  94:	0f 90       	pop	r0
}
  96:	cb 01       	movw	r24, r22
  98:	1f 91       	pop	r17
  9a:	0f 91       	pop	r16
  9c:	ff 90       	pop	r15
  9e:	ef 90       	pop	r14
  a0:	df 90       	pop	r13
  a2:	cf 90       	pop	r12
  a4:	bf 90       	pop	r11
  a6:	af 90       	pop	r10
  a8:	08 95       	ret

Disassembly of section .text._ZN5Servo5writeEi:

00000000 <_ZN5Servo5writeEi>:
  if(isTimerActive(timer) == false) {
    finISR(timer);
  }
}

void Servo::write(int value)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	ec 01       	movw	r28, r24
  16:	9b 01       	movw	r18, r22
{  
  if(value < MIN_PULSE_WIDTH)
  18:	82 e0       	ldi	r24, 0x02	; 2
  1a:	60 32       	cpi	r22, 0x20	; 32
  1c:	78 07       	cpc	r23, r24
  1e:	04 f0       	brlt	.+0      	; 0x20 <_ZN5Servo5writeEi+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN5Servo5writeEi+0x22>
  {  // treat values less than 544 as angles in degrees (valid values in microseconds are handled as microseconds)
    if(value < 0) value = 0;
  22:	77 ff       	sbrs	r23, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN5Servo5writeEi+0x26>
  26:	20 e0       	ldi	r18, 0x00	; 0
  28:	30 e0       	ldi	r19, 0x00	; 0
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN5Servo5writeEi+0x2c>
    if(value > 180) value = 180;
  2c:	65 3b       	cpi	r22, 0xB5	; 181
  2e:	71 05       	cpc	r23, r1
  30:	04 f0       	brlt	.+0      	; 0x32 <_ZN5Servo5writeEi+0x32>
  32:	24 eb       	ldi	r18, 0xB4	; 180
  34:	30 e0       	ldi	r19, 0x00	; 0
    value = map(value, 0, 180, SERVO_MIN(),  SERVO_MAX());      
  36:	00 d0       	rcall	.+0      	; 0x38 <_ZN5Servo5writeEi+0x38>
  38:	0f 92       	push	r0
  3a:	b9 01       	movw	r22, r18
  3c:	88 27       	eor	r24, r24
  3e:	77 fd       	sbrc	r23, 7
  40:	80 95       	com	r24
  42:	98 2f       	mov	r25, r24
  44:	29 81       	ldd	r18, Y+1	; 0x01
  46:	33 27       	eor	r19, r19
  48:	27 fd       	sbrc	r18, 7
  4a:	30 95       	com	r19
  4c:	e8 e8       	ldi	r30, 0x88	; 136
  4e:	ae 2e       	mov	r10, r30
  50:	b1 2c       	mov	r11, r1
  52:	a2 1a       	sub	r10, r18
  54:	b3 0a       	sbc	r11, r19
  56:	aa 0c       	add	r10, r10
  58:	bb 1c       	adc	r11, r11
  5a:	aa 0c       	add	r10, r10
  5c:	bb 1c       	adc	r11, r11
  5e:	cc 24       	eor	r12, r12
  60:	b7 fc       	sbrc	r11, 7
  62:	c0 94       	com	r12
  64:	dc 2c       	mov	r13, r12
  66:	ea 81       	ldd	r30, Y+2	; 0x02
  68:	ff 27       	eor	r31, r31
  6a:	e7 fd       	sbrc	r30, 7
  6c:	f0 95       	com	r31
  6e:	28 e5       	ldi	r18, 0x58	; 88
  70:	32 e0       	ldi	r19, 0x02	; 2
  72:	2e 1b       	sub	r18, r30
  74:	3f 0b       	sbc	r19, r31
  76:	22 0f       	add	r18, r18
  78:	33 1f       	adc	r19, r19
  7a:	22 0f       	add	r18, r18
  7c:	33 1f       	adc	r19, r19
  7e:	44 27       	eor	r20, r20
  80:	37 fd       	sbrc	r19, 7
  82:	40 95       	com	r20
  84:	54 2f       	mov	r21, r20
  86:	ed b7       	in	r30, 0x3d	; 61
  88:	fe b7       	in	r31, 0x3e	; 62
  8a:	21 83       	std	Z+1, r18	; 0x01
  8c:	32 83       	std	Z+2, r19	; 0x02
  8e:	43 83       	std	Z+3, r20	; 0x03
  90:	54 83       	std	Z+4, r21	; 0x04
  92:	20 e0       	ldi	r18, 0x00	; 0
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	40 e0       	ldi	r20, 0x00	; 0
  98:	50 e0       	ldi	r21, 0x00	; 0
  9a:	04 eb       	ldi	r16, 0xB4	; 180
  9c:	e0 2e       	mov	r14, r16
  9e:	f1 2c       	mov	r15, r1
  a0:	01 2d       	mov	r16, r1
  a2:	11 2d       	mov	r17, r1
  a4:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo5writeEi>
  a8:	9b 01       	movw	r18, r22
  aa:	0f 90       	pop	r0
  ac:	0f 90       	pop	r0
  ae:	0f 90       	pop	r0
  b0:	0f 90       	pop	r0
  }
  this->writeMicroseconds(value);
  b2:	ce 01       	movw	r24, r28
  b4:	b9 01       	movw	r22, r18
  b6:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo5writeEi>
}
  ba:	df 91       	pop	r29
  bc:	cf 91       	pop	r28
  be:	1f 91       	pop	r17
  c0:	0f 91       	pop	r16
  c2:	ff 90       	pop	r15
  c4:	ef 90       	pop	r14
  c6:	df 90       	pop	r13
  c8:	cf 90       	pop	r12
  ca:	bf 90       	pop	r11
  cc:	af 90       	pop	r10
  ce:	08 95       	ret

Disassembly of section .text._ZN5Servo6attachEiii:

00000000 <_ZN5Servo6attachEiii>:
uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
}

uint8_t Servo::attach(int pin, int min, int max)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	ec 01       	movw	r28, r24
  10:	16 2f       	mov	r17, r22
  12:	7a 01       	movw	r14, r20
  14:	69 01       	movw	r12, r18
{
  if(this->servoIndex < MAX_SERVOS ) {
  16:	88 81       	ld	r24, Y
  18:	80 33       	cpi	r24, 0x30	; 48
  1a:	00 f0       	brcs	.+0      	; 0x1c <_ZN5Servo6attachEiii+0x1c>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <_ZN5Servo6attachEiii+0x1e>
    pinMode( pin, OUTPUT) ;                                   // set servo pin to output
  1e:	86 2f       	mov	r24, r22
  20:	61 e0       	ldi	r22, 0x01	; 1
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo6attachEiii>
    servos[this->servoIndex].Pin.nbr = pin;  
  26:	88 81       	ld	r24, Y
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	fc 01       	movw	r30, r24
  2c:	ee 0f       	add	r30, r30
  2e:	ff 1f       	adc	r31, r31
  30:	e8 0f       	add	r30, r24
  32:	f9 1f       	adc	r31, r25
  34:	e0 50       	subi	r30, 0x00	; 0
  36:	f0 40       	sbci	r31, 0x00	; 0
  38:	1f 73       	andi	r17, 0x3F	; 63
  3a:	80 81       	ld	r24, Z
  3c:	80 7c       	andi	r24, 0xC0	; 192
  3e:	81 2b       	or	r24, r17
  40:	80 83       	st	Z, r24
    // todo min/max check: abs(min - MIN_PULSE_WIDTH) /4 < 128 
    this->min  = (MIN_PULSE_WIDTH - min)/4; //resolution of min/max is 4 uS
  42:	80 e2       	ldi	r24, 0x20	; 32
  44:	92 e0       	ldi	r25, 0x02	; 2
  46:	8e 19       	sub	r24, r14
  48:	9f 09       	sbc	r25, r15
  4a:	64 e0       	ldi	r22, 0x04	; 4
  4c:	70 e0       	ldi	r23, 0x00	; 0
  4e:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo6attachEiii>
  52:	69 83       	std	Y+1, r22	; 0x01
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
  54:	80 e6       	ldi	r24, 0x60	; 96
  56:	99 e0       	ldi	r25, 0x09	; 9
  58:	8c 19       	sub	r24, r12
  5a:	9d 09       	sbc	r25, r13
  5c:	64 e0       	ldi	r22, 0x04	; 4
  5e:	70 e0       	ldi	r23, 0x00	; 0
  60:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo6attachEiii>
  64:	6a 83       	std	Y+2, r22	; 0x02
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
  66:	a8 81       	ld	r26, Y
  68:	8a 2f       	mov	r24, r26
  6a:	6c e0       	ldi	r22, 0x0C	; 12
  6c:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo6attachEiii>
  70:	68 2f       	mov	r22, r24
  72:	70 e0       	ldi	r23, 0x00	; 0

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
    if(SERVO(timer,channel).Pin.isActive == true)
  74:	ab 01       	movw	r20, r22
  76:	44 0f       	add	r20, r20
  78:	55 1f       	adc	r21, r21
  7a:	46 0f       	add	r20, r22
  7c:	57 1f       	adc	r21, r23
  7e:	44 0f       	add	r20, r20
  80:	55 1f       	adc	r21, r21
  82:	44 0f       	add	r20, r20
  84:	55 1f       	adc	r21, r21
  86:	20 e0       	ldi	r18, 0x00	; 0
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	c9 01       	movw	r24, r18
  8c:	84 0f       	add	r24, r20
  8e:	95 1f       	adc	r25, r21
  90:	fc 01       	movw	r30, r24
  92:	ee 0f       	add	r30, r30
  94:	ff 1f       	adc	r31, r31
  96:	e8 0f       	add	r30, r24
  98:	f9 1f       	adc	r31, r25
  9a:	e0 50       	subi	r30, 0x00	; 0
  9c:	f0 40       	sbci	r31, 0x00	; 0
  9e:	80 81       	ld	r24, Z
  a0:	86 fd       	sbrc	r24, 6
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN5Servo6attachEiii+0xa4>
  a4:	2f 5f       	subi	r18, 0xFF	; 255
  a6:	3f 4f       	sbci	r19, 0xFF	; 255
}

static boolean isTimerActive(timer16_Sequence_t timer)
{
  // returns true if any servo is active on this timer
  for(uint8_t channel=0; channel < SERVOS_PER_TIMER; channel++) {
  a8:	2c 30       	cpi	r18, 0x0C	; 12
  aa:	31 05       	cpc	r19, r1
  ac:	01 f4       	brne	.+0      	; 0xae <_ZN5Servo6attachEiii+0xae>
  ae:	00 c0       	rjmp	.+0      	; 0xb0 <_ZN5Servo6attachEiii+0xb0>

static void initISR(timer16_Sequence_t timer)
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
    TCCR1A = 0;             // normal counting mode 
  b0:	10 92 80 00 	sts	0x0080, r1
    TCCR1B = _BV(CS11);     // set prescaler of 8 
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	80 93 81 00 	sts	0x0081, r24
    TCNT1 = 0;              // clear the timer count 
  ba:	10 92 85 00 	sts	0x0085, r1
  be:	10 92 84 00 	sts	0x0084, r1
#if defined(__AVR_ATmega8__)|| defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF1A);      // clear any pending interrupts; 
    TIMSK |=  _BV(OCIE1A) ;  // enable the output compare interrupt  
#else
    // here if not ATmega8 or ATmega128
    TIFR1 |= _BV(OCF1A);     // clear any pending interrupts; 
  c2:	b1 9a       	sbi	0x16, 1	; 22
    TIMSK1 |=  _BV(OCIE1A) ; // enable the output compare interrupt 
  c4:	80 91 6f 00 	lds	r24, 0x006F
  c8:	82 60       	ori	r24, 0x02	; 2
  ca:	80 93 6f 00 	sts	0x006F, r24
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN5Servo6attachEiii+0xd0>
#endif	
  } 
#endif  

#if defined (_useTimer3)
  if(timer == _timer3) {
  d0:	62 30       	cpi	r22, 0x02	; 2
  d2:	71 05       	cpc	r23, r1
  d4:	01 f4       	brne	.+0      	; 0xd6 <_ZN5Servo6attachEiii+0xd6>
    TCCR3A = 0;             // normal counting mode 
  d6:	10 92 90 00 	sts	0x0090, r1
    TCCR3B = _BV(CS31);     // set prescaler of 8  
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 91 00 	sts	0x0091, r24
    TCNT3 = 0;              // clear the timer count 
  e0:	10 92 95 00 	sts	0x0095, r1
  e4:	10 92 94 00 	sts	0x0094, r1
#if defined(__AVR_ATmega128__)
    TIFR |= _BV(OCF3A);     // clear any pending interrupts;   
	ETIMSK |= _BV(OCIE3A);  // enable the output compare interrupt     
#else  
    TIFR3 = _BV(OCF3A);     // clear any pending interrupts; 
  e8:	88 bb       	out	0x18, r24	; 24
    TIMSK3 =  _BV(OCIE3A) ; // enable the output compare interrupt      
  ea:	80 93 71 00 	sts	0x0071, r24
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <_ZN5Servo6attachEiii+0xf0>
#endif  
  }
#endif

#if defined (_useTimer4)
  if(timer == _timer4) {
  f0:	63 30       	cpi	r22, 0x03	; 3
  f2:	71 05       	cpc	r23, r1
  f4:	01 f4       	brne	.+0      	; 0xf6 <_ZN5Servo6attachEiii+0xf6>
    TCCR4A = 0;             // normal counting mode 
  f6:	10 92 a0 00 	sts	0x00A0, r1
    TCCR4B = _BV(CS41);     // set prescaler of 8  
  fa:	82 e0       	ldi	r24, 0x02	; 2
  fc:	80 93 a1 00 	sts	0x00A1, r24
    TCNT4 = 0;              // clear the timer count 
 100:	10 92 a5 00 	sts	0x00A5, r1
 104:	10 92 a4 00 	sts	0x00A4, r1
    TIFR4 = _BV(OCF4A);     // clear any pending interrupts; 
 108:	89 bb       	out	0x19, r24	; 25
    TIMSK4 =  _BV(OCIE4A) ; // enable the output compare interrupt
 10a:	80 93 72 00 	sts	0x0072, r24
 10e:	00 c0       	rjmp	.+0      	; 0x110 <_ZN5Servo6attachEiii+0x110>
  }    
#endif

#if defined (_useTimer5)
  if(timer == _timer5) {
 110:	67 2b       	or	r22, r23
 112:	01 f4       	brne	.+0      	; 0x114 <_ZN5Servo6attachEiii+0x114>
    TCCR5A = 0;             // normal counting mode 
 114:	10 92 20 01 	sts	0x0120, r1
    TCCR5B = _BV(CS51);     // set prescaler of 8  
 118:	82 e0       	ldi	r24, 0x02	; 2
 11a:	80 93 21 01 	sts	0x0121, r24
    TCNT5 = 0;              // clear the timer count 
 11e:	10 92 25 01 	sts	0x0125, r1
 122:	10 92 24 01 	sts	0x0124, r1
    TIFR5 = _BV(OCF5A);     // clear any pending interrupts; 
 126:	8a bb       	out	0x1a, r24	; 26
    TIMSK5 =  _BV(OCIE5A) ; // enable the output compare interrupt      
 128:	80 93 73 00 	sts	0x0073, r24
    this->max  = (MAX_PULSE_WIDTH - max)/4; 
    // initialize the timer if it has not already been initialized 
    timer16_Sequence_t timer = SERVO_INDEX_TO_TIMER(servoIndex);
    if(isTimerActive(timer) == false)
      initISR(timer);    
    servos[this->servoIndex].Pin.isActive = true;  // this must be set after the check for isTimerActive
 12c:	8a 2f       	mov	r24, r26
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	fc 01       	movw	r30, r24
 132:	ee 0f       	add	r30, r30
 134:	ff 1f       	adc	r31, r31
 136:	e8 0f       	add	r30, r24
 138:	f9 1f       	adc	r31, r25
 13a:	e0 50       	subi	r30, 0x00	; 0
 13c:	f0 40       	sbci	r31, 0x00	; 0
 13e:	80 81       	ld	r24, Z
 140:	80 64       	ori	r24, 0x40	; 64
 142:	80 83       	st	Z, r24
  } 
  return this->servoIndex ;
}
 144:	88 81       	ld	r24, Y
 146:	df 91       	pop	r29
 148:	cf 91       	pop	r28
 14a:	1f 91       	pop	r17
 14c:	ff 90       	pop	r15
 14e:	ef 90       	pop	r14
 150:	df 90       	pop	r13
 152:	cf 90       	pop	r12
 154:	08 95       	ret


static void initISR(timer16_Sequence_t timer)
{  
#if defined (_useTimer1)
  if(timer == _timer1) {
 156:	61 30       	cpi	r22, 0x01	; 1
 158:	71 05       	cpc	r23, r1
 15a:	01 f0       	breq	.+0      	; 0x15c <_ZN5Servo6attachEiii+0x15c>
 15c:	00 c0       	rjmp	.+0      	; 0x15e <_ZN5Servo6attachEiii+0x15e>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <__SREG__+0x121>

Disassembly of section .text._ZN5Servo6attachEi:

00000000 <_ZN5Servo6attachEi>:
    this->servoIndex = INVALID_SERVO ;  // too many servos 
}

uint8_t Servo::attach(int pin)
{
  return this->attach(pin, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
   0:	40 e2       	ldi	r20, 0x20	; 32
   2:	52 e0       	ldi	r21, 0x02	; 2
   4:	20 e6       	ldi	r18, 0x60	; 96
   6:	39 e0       	ldi	r19, 0x09	; 9
   8:	0e 94 00 00 	call	0	; 0x0 <_ZN5Servo6attachEi>
}
   c:	08 95       	ret

Disassembly of section .text._ZL17handle_interrupts18timer16_Sequence_tPVjS1_:

00000000 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>:
#define SERVO_MIN() (MIN_PULSE_WIDTH - this->min * 4)  // minimum value in uS for this servo
#define SERVO_MAX() (MAX_PULSE_WIDTH - this->max * 4)  // maximum value in uS for this servo 

/************ static functions common to all instances ***********************/

static inline void handle_interrupts(timer16_Sequence_t timer, volatile uint16_t *TCNTn, volatile uint16_t* OCRnA)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	8b 01       	movw	r16, r22
   e:	7a 01       	movw	r14, r20
{
  if( Channel[timer] < 0 )
  10:	ec 01       	movw	r28, r24
  12:	dc 01       	movw	r26, r24
  14:	a0 50       	subi	r26, 0x00	; 0
  16:	b0 40       	sbci	r27, 0x00	; 0
  18:	8c 91       	ld	r24, X
  1a:	87 ff       	sbrs	r24, 7
  1c:	00 c0       	rjmp	.+0      	; 0x1e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x1e>
    *TCNTn = 0; // channel set to -1 indicated that refresh interval completed so reset the timer 
  1e:	fb 01       	movw	r30, r22
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x26>
  else{
    if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && SERVO(timer,Channel[timer]).Pin.isActive == true )  
  26:	ae 01       	movw	r20, r28
  28:	44 0f       	add	r20, r20
  2a:	55 1f       	adc	r21, r21
  2c:	4c 0f       	add	r20, r28
  2e:	5d 1f       	adc	r21, r29
  30:	44 0f       	add	r20, r20
  32:	55 1f       	adc	r21, r21
  34:	44 0f       	add	r20, r20
  36:	55 1f       	adc	r21, r21
  38:	2c 91       	ld	r18, X
  3a:	33 27       	eor	r19, r19
  3c:	27 fd       	sbrc	r18, 7
  3e:	30 95       	com	r19
  40:	24 0f       	add	r18, r20
  42:	35 1f       	adc	r19, r21
  44:	80 91 00 00 	lds	r24, 0x0000
  48:	90 e0       	ldi	r25, 0x00	; 0
  4a:	28 17       	cp	r18, r24
  4c:	39 07       	cpc	r19, r25
  4e:	04 f4       	brge	.+0      	; 0x50 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x50>
  50:	8c 91       	ld	r24, X
  52:	99 27       	eor	r25, r25
  54:	87 fd       	sbrc	r24, 7
  56:	90 95       	com	r25
  58:	84 0f       	add	r24, r20
  5a:	95 1f       	adc	r25, r21
  5c:	fc 01       	movw	r30, r24
  5e:	ee 0f       	add	r30, r30
  60:	ff 1f       	adc	r31, r31
  62:	e8 0f       	add	r30, r24
  64:	f9 1f       	adc	r31, r25
  66:	e0 50       	subi	r30, 0x00	; 0
  68:	f0 40       	sbci	r31, 0x00	; 0
  6a:	80 81       	ld	r24, Z
  6c:	86 ff       	sbrs	r24, 6
  6e:	00 c0       	rjmp	.+0      	; 0x70 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x70>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,LOW); // pulse this channel low if activated   
  70:	8c 91       	ld	r24, X
  72:	99 27       	eor	r25, r25
  74:	87 fd       	sbrc	r24, 7
  76:	90 95       	com	r25
  78:	84 0f       	add	r24, r20
  7a:	95 1f       	adc	r25, r21
  7c:	fc 01       	movw	r30, r24
  7e:	ee 0f       	add	r30, r30
  80:	ff 1f       	adc	r31, r31
  82:	e8 0f       	add	r30, r24
  84:	f9 1f       	adc	r31, r25
  86:	e0 50       	subi	r30, 0x00	; 0
  88:	f0 40       	sbci	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 73       	andi	r24, 0x3F	; 63
  8e:	60 e0       	ldi	r22, 0x00	; 0
  90:	0e 94 00 00 	call	0	; 0x0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
  }

  Channel[timer]++;    // increment to the next channel
  94:	de 01       	movw	r26, r28
  96:	a0 50       	subi	r26, 0x00	; 0
  98:	b0 40       	sbci	r27, 0x00	; 0
  9a:	8c 91       	ld	r24, X
  9c:	8f 5f       	subi	r24, 0xFF	; 255
  9e:	8c 93       	st	X, r24
  if( SERVO_INDEX(timer,Channel[timer]) < ServoCount && Channel[timer] < SERVOS_PER_TIMER) {
  a0:	ae 01       	movw	r20, r28
  a2:	44 0f       	add	r20, r20
  a4:	55 1f       	adc	r21, r21
  a6:	4c 0f       	add	r20, r28
  a8:	5d 1f       	adc	r21, r29
  aa:	44 0f       	add	r20, r20
  ac:	55 1f       	adc	r21, r21
  ae:	44 0f       	add	r20, r20
  b0:	55 1f       	adc	r21, r21
  b2:	2c 91       	ld	r18, X
  b4:	33 27       	eor	r19, r19
  b6:	27 fd       	sbrc	r18, 7
  b8:	30 95       	com	r19
  ba:	24 0f       	add	r18, r20
  bc:	35 1f       	adc	r19, r21
  be:	80 91 00 00 	lds	r24, 0x0000
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	28 17       	cp	r18, r24
  c6:	39 07       	cpc	r19, r25
  c8:	04 f0       	brlt	.+0      	; 0xca <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xca>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xcc>
  cc:	8c 91       	ld	r24, X
  ce:	8c 30       	cpi	r24, 0x0C	; 12
  d0:	04 f0       	brlt	.+0      	; 0xd2 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd2>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0xd4>
    *OCRnA = *TCNTn + SERVO(timer,Channel[timer]).ticks;
  d4:	f8 01       	movw	r30, r16
  d6:	20 81       	ld	r18, Z
  d8:	31 81       	ldd	r19, Z+1	; 0x01
  da:	8c 91       	ld	r24, X
  dc:	99 27       	eor	r25, r25
  de:	87 fd       	sbrc	r24, 7
  e0:	90 95       	com	r25
  e2:	84 0f       	add	r24, r20
  e4:	95 1f       	adc	r25, r21
  e6:	fc 01       	movw	r30, r24
  e8:	ee 0f       	add	r30, r30
  ea:	ff 1f       	adc	r31, r31
  ec:	e8 0f       	add	r30, r24
  ee:	f9 1f       	adc	r31, r25
  f0:	e0 50       	subi	r30, 0x00	; 0
  f2:	f0 40       	sbci	r31, 0x00	; 0
  f4:	81 81       	ldd	r24, Z+1	; 0x01
  f6:	92 81       	ldd	r25, Z+2	; 0x02
  f8:	28 0f       	add	r18, r24
  fa:	39 1f       	adc	r19, r25
  fc:	f7 01       	movw	r30, r14
  fe:	31 83       	std	Z+1, r19	; 0x01
 100:	20 83       	st	Z, r18
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
 102:	8c 91       	ld	r24, X
 104:	99 27       	eor	r25, r25
 106:	87 fd       	sbrc	r24, 7
 108:	90 95       	com	r25
 10a:	84 0f       	add	r24, r20
 10c:	95 1f       	adc	r25, r21
 10e:	fc 01       	movw	r30, r24
 110:	ee 0f       	add	r30, r30
 112:	ff 1f       	adc	r31, r31
 114:	e8 0f       	add	r30, r24
 116:	f9 1f       	adc	r31, r25
 118:	e0 50       	subi	r30, 0x00	; 0
 11a:	f0 40       	sbci	r31, 0x00	; 0
 11c:	80 81       	ld	r24, Z
 11e:	86 ff       	sbrs	r24, 6
 120:	00 c0       	rjmp	.+0      	; 0x122 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x122>
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
 122:	8c 91       	ld	r24, X
 124:	99 27       	eor	r25, r25
 126:	87 fd       	sbrc	r24, 7
 128:	90 95       	com	r25
 12a:	84 0f       	add	r24, r20
 12c:	95 1f       	adc	r25, r21
 12e:	fc 01       	movw	r30, r24
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	e8 0f       	add	r30, r24
 136:	f9 1f       	adc	r31, r25
 138:	e0 50       	subi	r30, 0x00	; 0
 13a:	f0 40       	sbci	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z
 13e:	8f 73       	andi	r24, 0x3F	; 63
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	0e 94 00 00 	call	0	; 0x0 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_>
 146:	00 c0       	rjmp	.+0      	; 0x148 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x148>
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
 148:	80 e4       	ldi	r24, 0x40	; 64
 14a:	9c e9       	ldi	r25, 0x9C	; 156
 14c:	00 c0       	rjmp	.+0      	; 0x14e <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x14e>
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
 14e:	f8 01       	movw	r30, r16
 150:	80 81       	ld	r24, Z
 152:	91 81       	ldd	r25, Z+1	; 0x01
 154:	04 96       	adiw	r24, 0x04	; 4
 156:	f7 01       	movw	r30, r14
 158:	91 83       	std	Z+1, r25	; 0x01
 15a:	80 83       	st	Z, r24
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
 15c:	c0 50       	subi	r28, 0x00	; 0
 15e:	d0 40       	sbci	r29, 0x00	; 0
 160:	8f ef       	ldi	r24, 0xFF	; 255
 162:	88 83       	st	Y, r24
 164:	00 c0       	rjmp	.+0      	; 0x166 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x166>
    if(SERVO(timer,Channel[timer]).Pin.isActive == true)     // check if activated
      digitalWrite( SERVO(timer,Channel[timer]).Pin.nbr,HIGH); // its an active channel so pulse it high   
  }  
  else { 
    // finished all channels so wait for the refresh period to expire before starting over 
    if( ((unsigned)*TCNTn) + 4 < usToTicks(REFRESH_INTERVAL) )  // allow a few ticks to ensure the next OCR1A not missed
 166:	f8 01       	movw	r30, r16
 168:	80 81       	ld	r24, Z
 16a:	91 81       	ldd	r25, Z+1	; 0x01
 16c:	04 96       	adiw	r24, 0x04	; 4
 16e:	80 54       	subi	r24, 0x40	; 64
 170:	9c 49       	sbci	r25, 0x9C	; 156
 172:	00 f0       	brcs	.+0      	; 0x174 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x174>
 174:	00 c0       	rjmp	.+0      	; 0x176 <_ZL17handle_interrupts18timer16_Sequence_tPVjS1_+0x176>
      *OCRnA = (unsigned int)usToTicks(REFRESH_INTERVAL);  
    else 
      *OCRnA = *TCNTn + 4;  // at least REFRESH_INTERVAL has elapsed
    Channel[timer] = -1; // this will get incremented at the end of the refresh period to start again at the first channel
  }
}
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	1f 91       	pop	r17
 17c:	0f 91       	pop	r16
 17e:	ff 90       	pop	r15
 180:	ef 90       	pop	r14
 182:	08 95       	ret

Disassembly of section .text.__vector_47:

00000000 <__vector_47>:
  handle_interrupts(_timer4, &TCNT4, &OCR4A); 
}
#endif

#if defined(_useTimer5)
SIGNAL (TIMER5_COMPA_vect) 
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
{
  handle_interrupts(_timer5, &TCNT5, &OCR5A); 
  26:	80 e0       	ldi	r24, 0x00	; 0
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	64 e2       	ldi	r22, 0x24	; 36
  2c:	71 e0       	ldi	r23, 0x01	; 1
  2e:	48 e2       	ldi	r20, 0x28	; 40
  30:	51 e0       	ldi	r21, 0x01	; 1
  32:	0e 94 00 00 	call	0	; 0x0 <__vector_47>
}
  36:	ff 91       	pop	r31
  38:	ef 91       	pop	r30
  3a:	bf 91       	pop	r27
  3c:	af 91       	pop	r26
  3e:	9f 91       	pop	r25
  40:	8f 91       	pop	r24
  42:	7f 91       	pop	r23
  44:	6f 91       	pop	r22
  46:	5f 91       	pop	r21
  48:	4f 91       	pop	r20
  4a:	3f 91       	pop	r19
  4c:	2f 91       	pop	r18
  4e:	0f 90       	pop	r0
  50:	0b be       	out	0x3b, r0	; 59
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

Disassembly of section .text.__vector_42:

00000000 <__vector_42>:
  handle_interrupts(_timer3, &TCNT3, &OCR3A); 
}
#endif

#if defined(_useTimer4)
SIGNAL (TIMER4_COMPA_vect) 
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
{
  handle_interrupts(_timer4, &TCNT4, &OCR4A); 
  26:	83 e0       	ldi	r24, 0x03	; 3
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	64 ea       	ldi	r22, 0xA4	; 164
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	48 ea       	ldi	r20, 0xA8	; 168
  30:	50 e0       	ldi	r21, 0x00	; 0
  32:	0e 94 00 00 	call	0	; 0x0 <__vector_42>
}
  36:	ff 91       	pop	r31
  38:	ef 91       	pop	r30
  3a:	bf 91       	pop	r27
  3c:	af 91       	pop	r26
  3e:	9f 91       	pop	r25
  40:	8f 91       	pop	r24
  42:	7f 91       	pop	r23
  44:	6f 91       	pop	r22
  46:	5f 91       	pop	r21
  48:	4f 91       	pop	r20
  4a:	3f 91       	pop	r19
  4c:	2f 91       	pop	r18
  4e:	0f 90       	pop	r0
  50:	0b be       	out	0x3b, r0	; 59
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

Disassembly of section .text.__vector_32:

00000000 <__vector_32>:
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
}
#endif

#if defined(_useTimer3)
SIGNAL (TIMER3_COMPA_vect) 
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
{ 
  handle_interrupts(_timer3, &TCNT3, &OCR3A); 
  26:	82 e0       	ldi	r24, 0x02	; 2
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	64 e9       	ldi	r22, 0x94	; 148
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	48 e9       	ldi	r20, 0x98	; 152
  30:	50 e0       	ldi	r21, 0x00	; 0
  32:	0e 94 00 00 	call	0	; 0x0 <__vector_32>
}
  36:	ff 91       	pop	r31
  38:	ef 91       	pop	r30
  3a:	bf 91       	pop	r27
  3c:	af 91       	pop	r26
  3e:	9f 91       	pop	r25
  40:	8f 91       	pop	r24
  42:	7f 91       	pop	r23
  44:	6f 91       	pop	r22
  46:	5f 91       	pop	r21
  48:	4f 91       	pop	r20
  4a:	3f 91       	pop	r19
  4c:	2f 91       	pop	r18
  4e:	0f 90       	pop	r0
  50:	0b be       	out	0x3b, r0	; 59
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

Disassembly of section .text.__vector_17:

00000000 <__vector_17>:
}

#ifndef WIRING // Wiring pre-defines signal handlers so don't define any if compiling for the Wiring platform
// Interrupt handlers for Arduino 
#if defined(_useTimer1)
SIGNAL (TIMER1_COMPA_vect) 
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
{ 
  handle_interrupts(_timer1, &TCNT1, &OCR1A); 
  26:	81 e0       	ldi	r24, 0x01	; 1
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	64 e8       	ldi	r22, 0x84	; 132
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	48 e8       	ldi	r20, 0x88	; 136
  30:	50 e0       	ldi	r21, 0x00	; 0
  32:	0e 94 00 00 	call	0	; 0x0 <__vector_17>
}
  36:	ff 91       	pop	r31
  38:	ef 91       	pop	r30
  3a:	bf 91       	pop	r27
  3c:	af 91       	pop	r26
  3e:	9f 91       	pop	r25
  40:	8f 91       	pop	r24
  42:	7f 91       	pop	r23
  44:	6f 91       	pop	r22
  46:	5f 91       	pop	r21
  48:	4f 91       	pop	r20
  4a:	3f 91       	pop	r19
  4c:	2f 91       	pop	r18
  4e:	0f 90       	pop	r0
  50:	0b be       	out	0x3b, r0	; 59
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

SoftwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 000004f1  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001e40  00000000  00000000  00000525  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000872  00000000  00000000  00002365  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._ZN14SoftwareSerial6listenEv 00000038  00000000  00000000  00002bd7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN14SoftwareSerial4recvEv 000000d4  00000000  00000000  00002c0f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN14SoftwareSerial12tx_pin_writeEh 0000001e  00000000  00000000  00002ce3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN14SoftwareSerial11rx_pin_readEv 00000014  00000000  00000000  00002d01  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text.__vector_9 0000005c  00000000  00000000  00002d15  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.__vector_10 0000005c  00000000  00000000  00002d71  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.__vector_11 0000005c  00000000  00000000  00002dcd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN14SoftwareSerial5beginEl 000001c0  00000000  00000000  00002e29  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN14SoftwareSerial3endEv 0000007e  00000000  00000000  00002fe9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN14SoftwareSerialD1Ev 00000012  00000000  00000000  00003067  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN14SoftwareSerialD2Ev 00000012  00000000  00000000  00003079  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN14SoftwareSerial4readEv 00000042  00000000  00000000  0000308b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN14SoftwareSerial9availableEv 00000034  00000000  00000000  000030cd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN14SoftwareSerial5writeEh 00000164  00000000  00000000  00003101  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN14SoftwareSerial5flushEv 00000022  00000000  00000000  00003265  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN14SoftwareSerial4peekEv 00000038  00000000  00000000  00003287  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZN14SoftwareSerial5setRXEh 00000056  00000000  00000000  000032bf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZN14SoftwareSerial5setTXEh 00000056  00000000  00000000  00003315  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZN14SoftwareSerialC1Ehhb 0000005c  00000000  00000000  0000336b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZN14SoftwareSerialC2Ehhb 0000005c  00000000  00000000  000033c7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .bss._ZN14SoftwareSerial13active_objectE 00000002  00000000  00000000  00003423  2**0
                  ALLOC
 27 .bss._ZN14SoftwareSerial15_receive_bufferE 00000040  00000000  00000000  00003423  2**0
                  ALLOC
 28 .bss._ZN14SoftwareSerial20_receive_buffer_tailE 00000001  00000000  00000000  00003423  2**0
                  ALLOC
 29 .bss._ZN14SoftwareSerial20_receive_buffer_headE 00000001  00000000  00000000  00003423  2**0
                  ALLOC
 30 .rodata._ZTV14SoftwareSerial 00000010  00000000  00000000  00003423  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 31 .progmem.data 00000090  00000000  00000000  00003433  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 32 .rodata._ZTV6Stream 00000010  00000000  00000000  000034c3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA
 33 .debug_frame  00000150  00000000  00000000  000034d4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 34 .debug_loc    00000921  00000000  00000000  00003624  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 35 .debug_pubnames 000002c6  00000000  00000000  00003f45  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 36 .debug_aranges 000000b8  00000000  00000000  0000420b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 37 .debug_ranges 00000110  00000000  00000000  000042c3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 38 .debug_str    000010c1  00000000  00000000  000043d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._ZN14SoftwareSerial6listenEv:

00000000 <_ZN14SoftwareSerial6listenEv>:
    );
}

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
   0:	fc 01       	movw	r30, r24
{
  if (active_object != this)
   2:	80 91 00 00 	lds	r24, 0x0000
   6:	90 91 00 00 	lds	r25, 0x0000
   a:	8e 17       	cp	r24, r30
   c:	9f 07       	cpc	r25, r31
   e:	01 f4       	brne	.+0      	; 0x10 <_ZN14SoftwareSerial6listenEv+0x10>
  10:	80 e0       	ldi	r24, 0x00	; 0
  12:	08 95       	ret
  {
    _buffer_overflow = false;
  14:	83 8d       	ldd	r24, Z+27	; 0x1b
  16:	8e 7f       	andi	r24, 0xFE	; 254
  18:	83 8f       	std	Z+27, r24	; 0x1b
    uint8_t oldSREG = SREG;
  1a:	9f b7       	in	r25, 0x3f	; 63
    cli();
  1c:	f8 94       	cli
    _receive_buffer_head = _receive_buffer_tail = 0;
  1e:	10 92 00 00 	sts	0x0000, r1
  22:	80 91 00 00 	lds	r24, 0x0000
  26:	80 93 00 00 	sts	0x0000, r24
    active_object = this;
  2a:	f0 93 00 00 	sts	0x0000, r31
  2e:	e0 93 00 00 	sts	0x0000, r30
    SREG = oldSREG;
  32:	9f bf       	out	0x3f, r25	; 63
  34:	81 e0       	ldi	r24, 0x01	; 1
    return true;
  }

  return false;
}
  36:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial4recvEv:

00000000 <_ZN14SoftwareSerial4recvEv>:

//
// The receive routine called by the interrupt handler
//
void SoftwareSerial::recv()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	fc 01       	movw	r30, r24

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
   a:	73 8d       	ldd	r23, Z+27	; 0x1b
   c:	76 95       	lsr	r23
   e:	71 70       	andi	r23, 0x01	; 1
  10:	a6 85       	ldd	r26, Z+14	; 0x0e
  12:	b7 85       	ldd	r27, Z+15	; 0x0f
  14:	95 85       	ldd	r25, Z+13	; 0x0d
  16:	77 23       	and	r23, r23
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN14SoftwareSerial4recvEv+0x1a>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
  1a:	8c 91       	ld	r24, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
  1c:	89 23       	and	r24, r25
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN14SoftwareSerial4recvEv+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN14SoftwareSerial4recvEv+0x22>
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN14SoftwareSerial4recvEv+0x24>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
  24:	8c 91       	ld	r24, X

  uint8_t d = 0;

  // If RX line is high, then we don't see any start bit
  // so interrupt is probably not for us
  if (_inverse_logic ? rx_pin_read() : !rx_pin_read())
  26:	89 23       	and	r24, r25
  28:	01 f0       	breq	.+0      	; 0x2a <_ZN14SoftwareSerial4recvEv+0x2a>
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN14SoftwareSerial4recvEv+0x2c>
  {
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
  2c:	83 89       	ldd	r24, Z+19	; 0x13
  2e:	94 89       	ldd	r25, Z+20	; 0x14
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
  30:	20 e0       	ldi	r18, 0x00	; 0
  32:	01 97       	sbiw	r24, 0x01	; 1
  34:	2f ef       	ldi	r18, 0xFF	; 255
  36:	8f 3f       	cpi	r24, 0xFF	; 255
  38:	92 07       	cpc	r25, r18
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZN14SoftwareSerial4recvEv+0x3c>
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
  3c:	c5 89       	ldd	r28, Z+21	; 0x15
  3e:	d6 89       	ldd	r29, Z+22	; 0x16
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
  40:	a6 85       	ldd	r26, Z+14	; 0x0e
  42:	b7 85       	ldd	r27, Z+15	; 0x0f
  44:	15 85       	ldd	r17, Z+13	; 0x0d
  46:	60 e0       	ldi	r22, 0x00	; 0
  48:	31 e0       	ldi	r19, 0x01	; 1
  4a:	40 e0       	ldi	r20, 0x00	; 0
  4c:	50 e0       	ldi	r21, 0x00	; 0
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
  4e:	00 e0       	ldi	r16, 0x00	; 0
  50:	ce 01       	movw	r24, r28
  52:	20 2f       	mov	r18, r16
  54:	01 97       	sbiw	r24, 0x01	; 1
  56:	2f ef       	ldi	r18, 0xFF	; 255
  58:	8f 3f       	cpi	r24, 0xFF	; 255
  5a:	92 07       	cpc	r25, r18
  5c:	01 f4       	brne	.+0      	; 0x5e <_ZN14SoftwareSerial4recvEv+0x5e>
    *_transmitPortRegister |= _transmitBitMask;
}

uint8_t SoftwareSerial::rx_pin_read()
{
  return *_receivePortRegister & _receiveBitMask;
  5e:	8c 91       	ld	r24, X
    for (uint8_t i=0x1; i; i <<= 1)
    {
      tunedDelay(_rx_delay_intrabit);
      DebugPulse(_DEBUG_PIN2, 1);
      uint8_t noti = ~i;
      if (rx_pin_read())
  60:	81 23       	and	r24, r17
  62:	01 f0       	breq	.+0      	; 0x64 <_ZN14SoftwareSerial4recvEv+0x64>
        d |= i;
  64:	63 2b       	or	r22, r19
  66:	00 c0       	rjmp	.+0      	; 0x68 <_ZN14SoftwareSerial4recvEv+0x68>
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
  68:	83 2f       	mov	r24, r19
  6a:	80 95       	com	r24
  6c:	68 23       	and	r22, r24
    // Wait approximately 1/2 of a bit width to "center" the sample
    tunedDelay(_rx_delay_centering);
    DebugPulse(_DEBUG_PIN2, 1);

    // Read each of the 8 bits
    for (uint8_t i=0x1; i; i <<= 1)
  6e:	33 0f       	add	r19, r19
  70:	4f 5f       	subi	r20, 0xFF	; 255
  72:	5f 4f       	sbci	r21, 0xFF	; 255
  74:	48 30       	cpi	r20, 0x08	; 8
  76:	51 05       	cpc	r21, r1
  78:	01 f4       	brne	.+0      	; 0x7a <_ZN14SoftwareSerial4recvEv+0x7a>
      else // else clause added to ensure function timing is ~balanced
        d &= noti;
    }

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
  7a:	87 89       	ldd	r24, Z+23	; 0x17
  7c:	90 8d       	ldd	r25, Z+24	; 0x18
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
  7e:	20 e0       	ldi	r18, 0x00	; 0
  80:	01 97       	sbiw	r24, 0x01	; 1
  82:	2f ef       	ldi	r18, 0xFF	; 255
  84:	8f 3f       	cpi	r24, 0xFF	; 255
  86:	92 07       	cpc	r25, r18
  88:	01 f4       	brne	.+0      	; 0x8a <_ZN14SoftwareSerial4recvEv+0x8a>

    // skip the stop bit
    tunedDelay(_rx_delay_stopbit);
    DebugPulse(_DEBUG_PIN2, 1);

    if (_inverse_logic)
  8a:	71 11       	cpse	r23, r1
      d = ~d;
  8c:	60 95       	com	r22

    // if buffer full, set the overflow flag and return
    if ((_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF != _receive_buffer_head) 
  8e:	80 91 00 00 	lds	r24, 0x0000
  92:	20 91 00 00 	lds	r18, 0x0000
  96:	90 e0       	ldi	r25, 0x00	; 0
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	8f 73       	andi	r24, 0x3F	; 63
  9c:	90 70       	andi	r25, 0x00	; 0
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	82 17       	cp	r24, r18
  a2:	93 07       	cpc	r25, r19
  a4:	01 f0       	breq	.+0      	; 0xa6 <_ZN14SoftwareSerial4recvEv+0xa6>
    {
      // save new data in buffer: tail points to where byte goes
      _receive_buffer[_receive_buffer_tail] = d; // save new byte
  a6:	e0 91 00 00 	lds	r30, 0x0000
  aa:	f0 e0       	ldi	r31, 0x00	; 0
  ac:	e0 50       	subi	r30, 0x00	; 0
  ae:	f0 40       	sbci	r31, 0x00	; 0
  b0:	60 83       	st	Z, r22
      _receive_buffer_tail = (_receive_buffer_tail + 1) % _SS_MAX_RX_BUFF;
  b2:	80 91 00 00 	lds	r24, 0x0000
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	01 96       	adiw	r24, 0x01	; 1
  ba:	8f 73       	andi	r24, 0x3F	; 63
  bc:	90 70       	andi	r25, 0x00	; 0
  be:	80 93 00 00 	sts	0x0000, r24
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <_ZN14SoftwareSerial4recvEv+0xc4>
    else 
    {
#if _DEBUG // for scope: pulse pin as overflow indictator
      DebugPulse(_DEBUG_PIN1, 1);
#endif
      _buffer_overflow = true;
  c4:	83 8d       	ldd	r24, Z+27	; 0x1b
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	83 8f       	std	Z+27, r24	; 0x1b
    "pop r20 \n\t"
    "pop r19 \n\t"
    "pop r18 \n\t"
    ::);
#endif
}
  ca:	df 91       	pop	r29
  cc:	cf 91       	pop	r28
  ce:	1f 91       	pop	r17
  d0:	0f 91       	pop	r16
  d2:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial12tx_pin_writeEh:

00000000 <_ZN14SoftwareSerial12tx_pin_writeEh>:

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
   0:	fc 01       	movw	r30, r24
   2:	a1 89       	ldd	r26, Z+17	; 0x11
   4:	b2 89       	ldd	r27, Z+18	; 0x12
   6:	90 89       	ldd	r25, Z+16	; 0x10
{
  if (pin_state == LOW)
   8:	66 23       	and	r22, r22
   a:	01 f4       	brne	.+0      	; 0xc <_ZN14SoftwareSerial12tx_pin_writeEh+0xc>
    *_transmitPortRegister &= ~_transmitBitMask;
   c:	8c 91       	ld	r24, X
   e:	90 95       	com	r25
  10:	98 23       	and	r25, r24
  12:	9c 93       	st	X, r25
  14:	08 95       	ret
  else
    *_transmitPortRegister |= _transmitBitMask;
  16:	8c 91       	ld	r24, X
  18:	89 2b       	or	r24, r25
  1a:	8c 93       	st	X, r24
  1c:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial11rx_pin_readEv:

00000000 <_ZN14SoftwareSerial11rx_pin_readEv>:
}

uint8_t SoftwareSerial::rx_pin_read()
   0:	dc 01       	movw	r26, r24
{
  return *_receivePortRegister & _receiveBitMask;
   2:	1e 96       	adiw	r26, 0x0e	; 14
   4:	ed 91       	ld	r30, X+
   6:	fc 91       	ld	r31, X
   8:	1f 97       	sbiw	r26, 0x0f	; 15
   a:	80 81       	ld	r24, Z
   c:	1d 96       	adiw	r26, 0x0d	; 13
   e:	9c 91       	ld	r25, X
}
  10:	89 23       	and	r24, r25
  12:	08 95       	ret

Disassembly of section .text.__vector_9:

00000000 <__vector_9>:
    active_object->recv();
  }
}

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_9+0x32>
  {
    active_object->recv();
  32:	0e 94 00 00 	call	0	; 0x0 <__vector_9>

#if defined(PCINT0_vect)
ISR(PCINT0_vect)
{
  SoftwareSerial::handle_interrupt();
}
  36:	ff 91       	pop	r31
  38:	ef 91       	pop	r30
  3a:	bf 91       	pop	r27
  3c:	af 91       	pop	r26
  3e:	9f 91       	pop	r25
  40:	8f 91       	pop	r24
  42:	7f 91       	pop	r23
  44:	6f 91       	pop	r22
  46:	5f 91       	pop	r21
  48:	4f 91       	pop	r20
  4a:	3f 91       	pop	r19
  4c:	2f 91       	pop	r18
  4e:	0f 90       	pop	r0
  50:	0b be       	out	0x3b, r0	; 59
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

Disassembly of section .text.__vector_10:

00000000 <__vector_10>:
#endif

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_10+0x32>
  {
    active_object->recv();
  32:	0e 94 00 00 	call	0	; 0x0 <__vector_10>

#if defined(PCINT1_vect)
ISR(PCINT1_vect)
{
  SoftwareSerial::handle_interrupt();
}
  36:	ff 91       	pop	r31
  38:	ef 91       	pop	r30
  3a:	bf 91       	pop	r27
  3c:	af 91       	pop	r26
  3e:	9f 91       	pop	r25
  40:	8f 91       	pop	r24
  42:	7f 91       	pop	r23
  44:	6f 91       	pop	r22
  46:	5f 91       	pop	r21
  48:	4f 91       	pop	r20
  4a:	3f 91       	pop	r19
  4c:	2f 91       	pop	r18
  4e:	0f 90       	pop	r0
  50:	0b be       	out	0x3b, r0	; 59
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

Disassembly of section .text.__vector_11:

00000000 <__vector_11>:
#endif

#if defined(PCINT2_vect)
ISR(PCINT2_vect)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
//

/* static */
inline void SoftwareSerial::handle_interrupt()
{
  if (active_object)
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_11+0x32>
  {
    active_object->recv();
  32:	0e 94 00 00 	call	0	; 0x0 <__vector_11>

#if defined(PCINT2_vect)
ISR(PCINT2_vect)
{
  SoftwareSerial::handle_interrupt();
}
  36:	ff 91       	pop	r31
  38:	ef 91       	pop	r30
  3a:	bf 91       	pop	r27
  3c:	af 91       	pop	r26
  3e:	9f 91       	pop	r25
  40:	8f 91       	pop	r24
  42:	7f 91       	pop	r23
  44:	6f 91       	pop	r22
  46:	5f 91       	pop	r21
  48:	4f 91       	pop	r20
  4a:	3f 91       	pop	r19
  4c:	2f 91       	pop	r18
  4e:	0f 90       	pop	r0
  50:	0b be       	out	0x3b, r0	; 59
  52:	0f 90       	pop	r0
  54:	0f be       	out	0x3f, r0	; 63
  56:	0f 90       	pop	r0
  58:	1f 90       	pop	r1
  5a:	18 95       	reti

Disassembly of section .text._ZN14SoftwareSerial5beginEl:

00000000 <_ZN14SoftwareSerial5beginEl>:

//
// Public methods
//

void SoftwareSerial::begin(long speed)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	ec 01       	movw	r28, r24
  12:	7a 01       	movw	r14, r20
  14:	8b 01       	movw	r16, r22
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;
  16:	1a 8e       	std	Y+26, r1	; 0x1a
  18:	19 8e       	std	Y+25, r1	; 0x19
  1a:	18 8e       	std	Y+24, r1	; 0x18
  1c:	1f 8a       	std	Y+23, r1	; 0x17
  1e:	1e 8a       	std	Y+22, r1	; 0x16
  20:	1d 8a       	std	Y+21, r1	; 0x15
  22:	1c 8a       	std	Y+20, r1	; 0x14
  24:	1b 8a       	std	Y+19, r1	; 0x13
  26:	20 e0       	ldi	r18, 0x00	; 0
  28:	30 e0       	ldi	r19, 0x00	; 0

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
  {
    long baud = pgm_read_dword(&table[i].baud);
  2a:	69 01       	movw	r12, r18
  2c:	cc 0c       	add	r12, r12
  2e:	dd 1c       	adc	r13, r13
  30:	c2 0e       	add	r12, r18
  32:	d3 1e       	adc	r13, r19
  34:	b6 01       	movw	r22, r12
  36:	66 0f       	add	r22, r22
  38:	77 1f       	adc	r23, r23
  3a:	66 0f       	add	r22, r22
  3c:	77 1f       	adc	r23, r23
  3e:	ab 01       	movw	r20, r22
  40:	40 50       	subi	r20, 0x00	; 0
  42:	50 40       	sbci	r21, 0x00	; 0
  44:	fa 01       	movw	r30, r20
  46:	85 91       	lpm	r24, Z+
  48:	95 91       	lpm	r25, Z+
  4a:	a5 91       	lpm	r26, Z+
  4c:	b4 91       	lpm	r27, Z+
    if (baud == speed)
  4e:	8e 15       	cp	r24, r14
  50:	9f 05       	cpc	r25, r15
  52:	a0 07       	cpc	r26, r16
  54:	b1 07       	cpc	r27, r17
  56:	01 f4       	brne	.+0      	; 0x58 <_ZN14SoftwareSerial5beginEl+0x58>
    {
      _rx_delay_centering = pgm_read_word(&table[i].rx_delay_centering);
  58:	fb 01       	movw	r30, r22
  5a:	e0 50       	subi	r30, 0x00	; 0
  5c:	f0 40       	sbci	r31, 0x00	; 0
  5e:	85 91       	lpm	r24, Z+
  60:	94 91       	lpm	r25, Z+
  62:	9c 8b       	std	Y+20, r25	; 0x14
  64:	8b 8b       	std	Y+19, r24	; 0x13
      _rx_delay_intrabit = pgm_read_word(&table[i].rx_delay_intrabit);
  66:	fb 01       	movw	r30, r22
  68:	e0 50       	subi	r30, 0x00	; 0
  6a:	f0 40       	sbci	r31, 0x00	; 0
  6c:	85 91       	lpm	r24, Z+
  6e:	94 91       	lpm	r25, Z+
  70:	9e 8b       	std	Y+22, r25	; 0x16
  72:	8d 8b       	std	Y+21, r24	; 0x15
      _rx_delay_stopbit = pgm_read_word(&table[i].rx_delay_stopbit);
  74:	fb 01       	movw	r30, r22
  76:	e0 50       	subi	r30, 0x00	; 0
  78:	f0 40       	sbci	r31, 0x00	; 0
  7a:	85 91       	lpm	r24, Z+
  7c:	94 91       	lpm	r25, Z+
  7e:	98 8f       	std	Y+24, r25	; 0x18
  80:	8f 8b       	std	Y+23, r24	; 0x17
      _tx_delay = pgm_read_word(&table[i].tx_delay);
  82:	fb 01       	movw	r30, r22
  84:	e0 50       	subi	r30, 0x00	; 0
  86:	f0 40       	sbci	r31, 0x00	; 0
  88:	85 91       	lpm	r24, Z+
  8a:	94 91       	lpm	r25, Z+
  8c:	9a 8f       	std	Y+26, r25	; 0x1a
  8e:	89 8f       	std	Y+25, r24	; 0x19
  90:	00 c0       	rjmp	.+0      	; 0x92 <_ZN14SoftwareSerial5beginEl+0x92>

void SoftwareSerial::begin(long speed)
{
  _rx_delay_centering = _rx_delay_intrabit = _rx_delay_stopbit = _tx_delay = 0;

  for (unsigned i=0; i<sizeof(table)/sizeof(table[0]); ++i)
  92:	2f 5f       	subi	r18, 0xFF	; 255
  94:	3f 4f       	sbci	r19, 0xFF	; 255
  96:	2c 30       	cpi	r18, 0x0C	; 12
  98:	31 05       	cpc	r19, r1
  9a:	01 f0       	breq	.+0      	; 0x9c <_ZN14SoftwareSerial5beginEl+0x9c>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <_ZN14SoftwareSerial5beginEl+0x9e>
      break;
    }
  }

  // Set up RX interrupts, but only if we have a valid RX baud rate
  if (_rx_delay_stopbit)
  9e:	8f 89       	ldd	r24, Y+23	; 0x17
  a0:	98 8d       	ldd	r25, Y+24	; 0x18
  a2:	89 2b       	or	r24, r25
  a4:	01 f4       	brne	.+0      	; 0xa6 <_ZN14SoftwareSerial5beginEl+0xa6>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <_ZN14SoftwareSerial5beginEl+0xa8>
  {
    if (digitalPinToPCICR(_receivePin))
  a8:	9c 85       	ldd	r25, Y+12	; 0x0c
  aa:	29 2f       	mov	r18, r25
  ac:	2a 50       	subi	r18, 0x0A	; 10
  ae:	24 30       	cpi	r18, 0x04	; 4
  b0:	00 f0       	brcs	.+0      	; 0xb2 <_ZN14SoftwareSerial5beginEl+0xb2>
  b2:	89 2f       	mov	r24, r25
  b4:	82 53       	subi	r24, 0x32	; 50
  b6:	84 30       	cpi	r24, 0x04	; 4
  b8:	00 f0       	brcs	.+0      	; 0xba <_ZN14SoftwareSerial5beginEl+0xba>
  ba:	8c 50       	subi	r24, 0x0C	; 12
  bc:	88 30       	cpi	r24, 0x08	; 8
  be:	00 f0       	brcs	.+0      	; 0xc0 <_ZN14SoftwareSerial5beginEl+0xc0>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <_ZN14SoftwareSerial5beginEl+0xc2>
    {
      *digitalPinToPCICR(_receivePin) |= _BV(digitalPinToPCICRbit(_receivePin));
  c2:	30 91 68 00 	lds	r19, 0x0068
  c6:	24 30       	cpi	r18, 0x04	; 4
  c8:	00 f0       	brcs	.+0      	; 0xca <_ZN14SoftwareSerial5beginEl+0xca>
  ca:	89 2f       	mov	r24, r25
  cc:	82 53       	subi	r24, 0x32	; 50
  ce:	84 30       	cpi	r24, 0x04	; 4
  d0:	00 f0       	brcs	.+0      	; 0xd2 <_ZN14SoftwareSerial5beginEl+0xd2>
  d2:	9e 53       	subi	r25, 0x3E	; 62
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	00 f4       	brcc	.+0      	; 0xd8 <_ZN14SoftwareSerial5beginEl+0xd8>
  d8:	84 e0       	ldi	r24, 0x04	; 4
  da:	00 c0       	rjmp	.+0      	; 0xdc <_ZN14SoftwareSerial5beginEl+0xdc>
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	83 2b       	or	r24, r19
  e0:	80 93 68 00 	sts	0x0068, r24
      *digitalPinToPCMSK(_receivePin) |= _BV(digitalPinToPCMSKbit(_receivePin));
  e4:	2c 85       	ldd	r18, Y+12	; 0x0c
  e6:	92 2f       	mov	r25, r18
  e8:	9a 50       	subi	r25, 0x0A	; 10
  ea:	94 30       	cpi	r25, 0x04	; 4
  ec:	00 f0       	brcs	.+0      	; 0xee <_ZN14SoftwareSerial5beginEl+0xee>
  ee:	82 2f       	mov	r24, r18
  f0:	82 53       	subi	r24, 0x32	; 50
  f2:	84 30       	cpi	r24, 0x04	; 4
  f4:	00 f0       	brcs	.+0      	; 0xf6 <_ZN14SoftwareSerial5beginEl+0xf6>
  f6:	8c 50       	subi	r24, 0x0C	; 12
  f8:	88 30       	cpi	r24, 0x08	; 8
  fa:	00 f4       	brcc	.+0      	; 0xfc <_ZN14SoftwareSerial5beginEl+0xfc>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <_ZN14SoftwareSerial5beginEl+0xfe>
  fe:	a0 e0       	ldi	r26, 0x00	; 0
 100:	b0 e0       	ldi	r27, 0x00	; 0
 102:	88 30       	cpi	r24, 0x08	; 8
 104:	00 f0       	brcs	.+0      	; 0x106 <_ZN14SoftwareSerial5beginEl+0x106>
 106:	e0 e0       	ldi	r30, 0x00	; 0
 108:	f0 e0       	ldi	r31, 0x00	; 0
 10a:	00 c0       	rjmp	.+0      	; 0x10c <_ZN14SoftwareSerial5beginEl+0x10c>
 10c:	ed e6       	ldi	r30, 0x6D	; 109
 10e:	f0 e0       	ldi	r31, 0x00	; 0
 110:	00 c0       	rjmp	.+0      	; 0x112 <_ZN14SoftwareSerial5beginEl+0x112>
 112:	eb e6       	ldi	r30, 0x6B	; 107
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	ab e6       	ldi	r26, 0x6B	; 107
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	40 81       	ld	r20, Z
 11c:	94 30       	cpi	r25, 0x04	; 4
 11e:	00 f4       	brcc	.+0      	; 0x120 <_ZN14SoftwareSerial5beginEl+0x120>
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	26 50       	subi	r18, 0x06	; 6
 124:	30 40       	sbci	r19, 0x00	; 0
 126:	00 c0       	rjmp	.+0      	; 0x128 <_ZN14SoftwareSerial5beginEl+0x128>
 128:	22 33       	cpi	r18, 0x32	; 50
 12a:	01 f4       	brne	.+0      	; 0x12c <_ZN14SoftwareSerial5beginEl+0x12c>
 12c:	88 e0       	ldi	r24, 0x08	; 8
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_ZN14SoftwareSerial5beginEl+0x130>
 130:	23 33       	cpi	r18, 0x33	; 51
 132:	01 f4       	brne	.+0      	; 0x134 <_ZN14SoftwareSerial5beginEl+0x134>
 134:	84 e0       	ldi	r24, 0x04	; 4
 136:	00 c0       	rjmp	.+0      	; 0x138 <_ZN14SoftwareSerial5beginEl+0x138>
 138:	24 33       	cpi	r18, 0x34	; 52
 13a:	01 f4       	brne	.+0      	; 0x13c <_ZN14SoftwareSerial5beginEl+0x13c>
 13c:	82 e0       	ldi	r24, 0x02	; 2
 13e:	00 c0       	rjmp	.+0      	; 0x140 <_ZN14SoftwareSerial5beginEl+0x140>
 140:	25 33       	cpi	r18, 0x35	; 53
 142:	01 f0       	breq	.+0      	; 0x144 <_ZN14SoftwareSerial5beginEl+0x144>
 144:	82 2f       	mov	r24, r18
 146:	8e 53       	subi	r24, 0x3E	; 62
 148:	88 30       	cpi	r24, 0x08	; 8
 14a:	00 f4       	brcc	.+0      	; 0x14c <_ZN14SoftwareSerial5beginEl+0x14c>
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	2e 53       	subi	r18, 0x3E	; 62
 150:	30 40       	sbci	r19, 0x00	; 0
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	00 c0       	rjmp	.+0      	; 0x158 <_ZN14SoftwareSerial5beginEl+0x158>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	2a 95       	dec	r18
 15e:	02 f4       	brpl	.+0      	; 0x160 <_ZN14SoftwareSerial5beginEl+0x160>
 160:	00 c0       	rjmp	.+0      	; 0x162 <_ZN14SoftwareSerial5beginEl+0x162>
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	84 2b       	or	r24, r20
 166:	8c 93       	st	X, r24
    }
    tunedDelay(_tx_delay); // if we were low this establishes the end
 168:	89 8d       	ldd	r24, Y+25	; 0x19
 16a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
 16c:	20 e0       	ldi	r18, 0x00	; 0
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	2f ef       	ldi	r18, 0xFF	; 255
 172:	8f 3f       	cpi	r24, 0xFF	; 255
 174:	92 07       	cpc	r25, r18
 176:	01 f4       	brne	.+0      	; 0x178 <_ZN14SoftwareSerial5beginEl+0x178>

// This function sets the current object as the "listening"
// one and returns true if it replaces another 
bool SoftwareSerial::listen()
{
  if (active_object != this)
 178:	80 91 00 00 	lds	r24, 0x0000
 17c:	90 91 00 00 	lds	r25, 0x0000
 180:	8c 17       	cp	r24, r28
 182:	9d 07       	cpc	r25, r29
 184:	01 f0       	breq	.+0      	; 0x186 <_ZN14SoftwareSerial5beginEl+0x186>
  {
    _buffer_overflow = false;
 186:	8b 8d       	ldd	r24, Y+27	; 0x1b
 188:	8e 7f       	andi	r24, 0xFE	; 254
 18a:	8b 8f       	std	Y+27, r24	; 0x1b
    uint8_t oldSREG = SREG;
 18c:	9f b7       	in	r25, 0x3f	; 63
    cli();
 18e:	f8 94       	cli
    _receive_buffer_head = _receive_buffer_tail = 0;
 190:	10 92 00 00 	sts	0x0000, r1
 194:	80 91 00 00 	lds	r24, 0x0000
 198:	80 93 00 00 	sts	0x0000, r24
    active_object = this;
 19c:	d0 93 00 00 	sts	0x0000, r29
 1a0:	c0 93 00 00 	sts	0x0000, r28
    SREG = oldSREG;
 1a4:	9f bf       	out	0x3f, r25	; 63
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <_ZN14SoftwareSerial5beginEl+0x1a8>
  pinMode(_DEBUG_PIN1, OUTPUT);
  pinMode(_DEBUG_PIN2, OUTPUT);
#endif

  listen();
}
 1a8:	ad e6       	ldi	r26, 0x6D	; 109
 1aa:	b0 e0       	ldi	r27, 0x00	; 0
 1ac:	00 c0       	rjmp	.+0      	; 0x1ae <_ZN14SoftwareSerial5beginEl+0x1ae>
 1ae:	df 91       	pop	r29
 1b0:	cf 91       	pop	r28
 1b2:	1f 91       	pop	r17
 1b4:	0f 91       	pop	r16
 1b6:	ff 90       	pop	r15
 1b8:	ef 90       	pop	r14
 1ba:	df 90       	pop	r13
 1bc:	cf 90       	pop	r12
 1be:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial3endEv:

00000000 <_ZN14SoftwareSerial3endEv>:

void SoftwareSerial::end()
{
  if (digitalPinToPCMSK(_receivePin))
   0:	fc 01       	movw	r30, r24
   2:	24 85       	ldd	r18, Z+12	; 0x0c
   4:	92 2f       	mov	r25, r18
   6:	9a 50       	subi	r25, 0x0A	; 10
   8:	94 30       	cpi	r25, 0x04	; 4
   a:	00 f0       	brcs	.+0      	; 0xc <_ZN14SoftwareSerial3endEv+0xc>
   c:	82 2f       	mov	r24, r18
   e:	82 53       	subi	r24, 0x32	; 50
  10:	84 30       	cpi	r24, 0x04	; 4
  12:	00 f0       	brcs	.+0      	; 0x14 <_ZN14SoftwareSerial3endEv+0x14>
  14:	8c 50       	subi	r24, 0x0C	; 12
  16:	88 30       	cpi	r24, 0x08	; 8
  18:	00 f4       	brcc	.+0      	; 0x1a <_ZN14SoftwareSerial3endEv+0x1a>
  1a:	ed e6       	ldi	r30, 0x6D	; 109
  1c:	f0 e0       	ldi	r31, 0x00	; 0
  1e:	ad e6       	ldi	r26, 0x6D	; 109
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN14SoftwareSerial3endEv+0x24>
  24:	eb e6       	ldi	r30, 0x6B	; 107
  26:	f0 e0       	ldi	r31, 0x00	; 0
  28:	ab e6       	ldi	r26, 0x6B	; 107
  2a:	b0 e0       	ldi	r27, 0x00	; 0
    *digitalPinToPCMSK(_receivePin) &= ~_BV(digitalPinToPCMSKbit(_receivePin));
  2c:	40 81       	ld	r20, Z
  2e:	94 30       	cpi	r25, 0x04	; 4
  30:	00 f4       	brcc	.+0      	; 0x32 <_ZN14SoftwareSerial3endEv+0x32>
  32:	30 e0       	ldi	r19, 0x00	; 0
  34:	26 50       	subi	r18, 0x06	; 6
  36:	30 40       	sbci	r19, 0x00	; 0
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZN14SoftwareSerial3endEv+0x3a>
  3a:	22 33       	cpi	r18, 0x32	; 50
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZN14SoftwareSerial3endEv+0x3e>
  3e:	87 ef       	ldi	r24, 0xF7	; 247
  40:	00 c0       	rjmp	.+0      	; 0x42 <_ZN14SoftwareSerial3endEv+0x42>
  42:	23 33       	cpi	r18, 0x33	; 51
  44:	01 f4       	brne	.+0      	; 0x46 <_ZN14SoftwareSerial3endEv+0x46>
  46:	8b ef       	ldi	r24, 0xFB	; 251
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN14SoftwareSerial3endEv+0x4a>
  4a:	24 33       	cpi	r18, 0x34	; 52
  4c:	01 f4       	brne	.+0      	; 0x4e <_ZN14SoftwareSerial3endEv+0x4e>
  4e:	8d ef       	ldi	r24, 0xFD	; 253
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZN14SoftwareSerial3endEv+0x52>
  52:	25 33       	cpi	r18, 0x35	; 53
  54:	01 f0       	breq	.+0      	; 0x56 <_ZN14SoftwareSerial3endEv+0x56>
  56:	82 2f       	mov	r24, r18
  58:	8e 53       	subi	r24, 0x3E	; 62
  5a:	88 30       	cpi	r24, 0x08	; 8
  5c:	00 f4       	brcc	.+0      	; 0x5e <_ZN14SoftwareSerial3endEv+0x5e>
  5e:	30 e0       	ldi	r19, 0x00	; 0
  60:	2e 53       	subi	r18, 0x3E	; 62
  62:	30 40       	sbci	r19, 0x00	; 0
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	90 e0       	ldi	r25, 0x00	; 0
  68:	00 c0       	rjmp	.+0      	; 0x6a <_ZN14SoftwareSerial3endEv+0x6a>
  6a:	88 0f       	add	r24, r24
  6c:	99 1f       	adc	r25, r25
  6e:	2a 95       	dec	r18
  70:	02 f4       	brpl	.+0      	; 0x72 <_ZN14SoftwareSerial3endEv+0x72>
  72:	80 95       	com	r24
  74:	00 c0       	rjmp	.+0      	; 0x76 <_ZN14SoftwareSerial3endEv+0x76>
  76:	8e ef       	ldi	r24, 0xFE	; 254
  78:	84 23       	and	r24, r20
  7a:	8c 93       	st	X, r24
  7c:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerialD1Ev:

00000000 <_ZN14SoftwareSerialD1Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
{
  end();
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerialD1Ev>
}
  10:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerialD2Ev:

00000000 <_ZN14SoftwareSerialD2Ev>:
}

//
// Destructor
//
SoftwareSerial::~SoftwareSerial()
   0:	fc 01       	movw	r30, r24
   2:	80 e0       	ldi	r24, 0x00	; 0
   4:	90 e0       	ldi	r25, 0x00	; 0
   6:	91 83       	std	Z+1, r25	; 0x01
   8:	80 83       	st	Z, r24
{
  end();
   a:	cf 01       	movw	r24, r30
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerialD2Ev>
}
  10:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial4readEv:

00000000 <_ZN14SoftwareSerial4readEv>:


// Read data from buffer
int SoftwareSerial::read()
{
  if (!isListening())
   0:	20 91 00 00 	lds	r18, 0x0000
   4:	30 91 00 00 	lds	r19, 0x0000
   8:	28 17       	cp	r18, r24
   a:	39 07       	cpc	r19, r25
   c:	01 f4       	brne	.+0      	; 0xe <_ZN14SoftwareSerial4readEv+0xe>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
   e:	90 91 00 00 	lds	r25, 0x0000
  12:	80 91 00 00 	lds	r24, 0x0000
  16:	98 17       	cp	r25, r24
  18:	01 f4       	brne	.+0      	; 0x1a <_ZN14SoftwareSerial4readEv+0x1a>
  1a:	2f ef       	ldi	r18, 0xFF	; 255
  1c:	3f ef       	ldi	r19, 0xFF	; 255
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZN14SoftwareSerial4readEv+0x20>
    return -1;

  // Read from "head"
  uint8_t d = _receive_buffer[_receive_buffer_head]; // grab next byte
  20:	e0 91 00 00 	lds	r30, 0x0000
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	e0 50       	subi	r30, 0x00	; 0
  28:	f0 40       	sbci	r31, 0x00	; 0
  2a:	20 81       	ld	r18, Z
  _receive_buffer_head = (_receive_buffer_head + 1) % _SS_MAX_RX_BUFF;
  2c:	80 91 00 00 	lds	r24, 0x0000
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	01 96       	adiw	r24, 0x01	; 1
  34:	8f 73       	andi	r24, 0x3F	; 63
  36:	90 70       	andi	r25, 0x00	; 0
  38:	80 93 00 00 	sts	0x0000, r24
  return d;
  3c:	30 e0       	ldi	r19, 0x00	; 0
}
  3e:	c9 01       	movw	r24, r18
  40:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial9availableEv:

00000000 <_ZN14SoftwareSerial9availableEv>:

int SoftwareSerial::available()
{
  if (!isListening())
   0:	20 91 00 00 	lds	r18, 0x0000
   4:	30 91 00 00 	lds	r19, 0x0000
   8:	28 17       	cp	r18, r24
   a:	39 07       	cpc	r19, r25
   c:	01 f0       	breq	.+0      	; 0xe <_ZN14SoftwareSerial9availableEv+0xe>
   e:	20 e0       	ldi	r18, 0x00	; 0
  10:	30 e0       	ldi	r19, 0x00	; 0
  12:	00 c0       	rjmp	.+0      	; 0x14 <_ZN14SoftwareSerial9availableEv+0x14>
    return 0;

  return (_receive_buffer_tail + _SS_MAX_RX_BUFF - _receive_buffer_head) % _SS_MAX_RX_BUFF;
  14:	80 91 00 00 	lds	r24, 0x0000
  18:	20 91 00 00 	lds	r18, 0x0000
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	80 5c       	subi	r24, 0xC0	; 192
  20:	9f 4f       	sbci	r25, 0xFF	; 255
  22:	82 1b       	sub	r24, r18
  24:	91 09       	sbc	r25, r1
  26:	60 e4       	ldi	r22, 0x40	; 64
  28:	70 e0       	ldi	r23, 0x00	; 0
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerial9availableEv>
  2e:	9c 01       	movw	r18, r24
}
  30:	c9 01       	movw	r24, r18
  32:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial5writeEh:

00000000 <_ZN14SoftwareSerial5writeEh>:

size_t SoftwareSerial::write(uint8_t b)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	dc 01       	movw	r26, r24
{
  if (_tx_delay == 0) {
   6:	59 96       	adiw	r26, 0x19	; 25
   8:	8d 91       	ld	r24, X+
   a:	9c 91       	ld	r25, X
   c:	5a 97       	sbiw	r26, 0x1a	; 26
   e:	89 2b       	or	r24, r25
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN14SoftwareSerial5writeEh+0x12>
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  12:	81 e0       	ldi	r24, 0x01	; 1
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	13 96       	adiw	r26, 0x03	; 3
  18:	9c 93       	st	X, r25
  1a:	8e 93       	st	-X, r24
  1c:	12 97       	sbiw	r26, 0x02	; 2
  1e:	20 e0       	ldi	r18, 0x00	; 0
  20:	30 e0       	ldi	r19, 0x00	; 0
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN14SoftwareSerial5writeEh+0x24>
    setWriteError();
    return 0;
  }

  uint8_t oldSREG = SREG;
  24:	0f b7       	in	r16, 0x3f	; 63
  cli();  // turn off interrupts for a clean txmit
  26:	f8 94       	cli

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
  28:	5b 96       	adiw	r26, 0x1b	; 27
  2a:	8c 91       	ld	r24, X
  2c:	5b 97       	sbiw	r26, 0x1b	; 27
  2e:	51 96       	adiw	r26, 0x11	; 17
  30:	ed 91       	ld	r30, X+
  32:	fc 91       	ld	r31, X
  34:	52 97       	sbiw	r26, 0x12	; 18
  36:	50 96       	adiw	r26, 0x10	; 16
  38:	2c 91       	ld	r18, X
  3a:	50 97       	sbiw	r26, 0x10	; 16
  3c:	81 ff       	sbrs	r24, 1
  3e:	00 c0       	rjmp	.+0      	; 0x40 <_ZN14SoftwareSerial5writeEh+0x40>
void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
  40:	80 81       	ld	r24, Z
  42:	82 2b       	or	r24, r18
  44:	80 83       	st	Z, r24
  uint8_t oldSREG = SREG;
  cli();  // turn off interrupts for a clean txmit

  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);
  46:	59 96       	adiw	r26, 0x19	; 25
  48:	8d 91       	ld	r24, X+
  4a:	9c 91       	ld	r25, X
  4c:	5a 97       	sbiw	r26, 0x1a	; 26
  4e:	05 96       	adiw	r24, 0x05	; 5
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
  50:	20 e0       	ldi	r18, 0x00	; 0
  52:	01 97       	sbiw	r24, 0x01	; 1
  54:	2f ef       	ldi	r18, 0xFF	; 255
  56:	8f 3f       	cpi	r24, 0xFF	; 255
  58:	92 07       	cpc	r25, r18
  5a:	01 f4       	brne	.+0      	; 0x5c <_ZN14SoftwareSerial5writeEh+0x5c>
  // Write the start bit
  tx_pin_write(_inverse_logic ? HIGH : LOW);
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
  5c:	5b 96       	adiw	r26, 0x1b	; 27
  5e:	8c 91       	ld	r24, X
  60:	5b 97       	sbiw	r26, 0x1b	; 27
  62:	81 ff       	sbrs	r24, 1
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZN14SoftwareSerial5writeEh+0x66>
  66:	31 e0       	ldi	r19, 0x01	; 1
  68:	40 e0       	ldi	r20, 0x00	; 0
  6a:	50 e0       	ldi	r21, 0x00	; 0
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
  6c:	70 e0       	ldi	r23, 0x00	; 0
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
  6e:	10 e0       	ldi	r17, 0x00	; 0
  // Write each of the 8 bits
  if (_inverse_logic)
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
  70:	83 2f       	mov	r24, r19
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	86 23       	and	r24, r22
  76:	97 23       	and	r25, r23
  78:	51 96       	adiw	r26, 0x11	; 17
  7a:	ed 91       	ld	r30, X+
  7c:	fc 91       	ld	r31, X
  7e:	52 97       	sbiw	r26, 0x12	; 18
  80:	50 96       	adiw	r26, 0x10	; 16
  82:	2c 91       	ld	r18, X
  84:	50 97       	sbiw	r26, 0x10	; 16
  86:	89 2b       	or	r24, r25
  88:	01 f0       	breq	.+0      	; 0x8a <_ZN14SoftwareSerial5writeEh+0x8a>
}

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  8a:	80 81       	ld	r24, Z
  8c:	20 95       	com	r18
  8e:	28 23       	and	r18, r24
  90:	20 83       	st	Z, r18
  92:	00 c0       	rjmp	.+0      	; 0x94 <_ZN14SoftwareSerial5writeEh+0x94>
  else
    *_transmitPortRegister |= _transmitBitMask;
  94:	80 81       	ld	r24, Z
  96:	82 2b       	or	r24, r18
  98:	80 83       	st	Z, r24
      if (b & mask) // choose bit
        tx_pin_write(LOW); // send 1
      else
        tx_pin_write(HIGH); // send 0
    
      tunedDelay(_tx_delay);
  9a:	59 96       	adiw	r26, 0x19	; 25
  9c:	8d 91       	ld	r24, X+
  9e:	9c 91       	ld	r25, X
  a0:	5a 97       	sbiw	r26, 0x1a	; 26
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
  a2:	21 2f       	mov	r18, r17
  a4:	01 97       	sbiw	r24, 0x01	; 1
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	8f 3f       	cpi	r24, 0xFF	; 255
  aa:	92 07       	cpc	r25, r18
  ac:	01 f4       	brne	.+0      	; 0xae <_ZN14SoftwareSerial5writeEh+0xae>
  tunedDelay(_tx_delay + XMIT_START_ADJUSTMENT);

  // Write each of the 8 bits
  if (_inverse_logic)
  {
    for (byte mask = 0x01; mask; mask <<= 1)
  ae:	33 0f       	add	r19, r19
  b0:	4f 5f       	subi	r20, 0xFF	; 255
  b2:	5f 4f       	sbci	r21, 0xFF	; 255
  b4:	48 30       	cpi	r20, 0x08	; 8
  b6:	51 05       	cpc	r21, r1
  b8:	01 f4       	brne	.+0      	; 0xba <_ZN14SoftwareSerial5writeEh+0xba>
}

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  ba:	51 96       	adiw	r26, 0x11	; 17
  bc:	ed 91       	ld	r30, X+
  be:	fc 91       	ld	r31, X
  c0:	52 97       	sbiw	r26, 0x12	; 18
  c2:	90 81       	ld	r25, Z
  c4:	50 96       	adiw	r26, 0x10	; 16
  c6:	8c 91       	ld	r24, X
  c8:	50 97       	sbiw	r26, 0x10	; 16
  ca:	80 95       	com	r24
  cc:	89 23       	and	r24, r25
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_ZN14SoftwareSerial5writeEh+0xd0>
  d0:	31 e0       	ldi	r19, 0x01	; 1
  d2:	40 e0       	ldi	r20, 0x00	; 0
  d4:	50 e0       	ldi	r21, 0x00	; 0
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
  d6:	70 e0       	ldi	r23, 0x00	; 0
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
  d8:	10 e0       	ldi	r17, 0x00	; 0
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
    {
      if (b & mask) // choose bit
  da:	83 2f       	mov	r24, r19
  dc:	90 e0       	ldi	r25, 0x00	; 0
  de:	86 23       	and	r24, r22
  e0:	97 23       	and	r25, r23
  e2:	51 96       	adiw	r26, 0x11	; 17
  e4:	ed 91       	ld	r30, X+
  e6:	fc 91       	ld	r31, X
  e8:	52 97       	sbiw	r26, 0x12	; 18
  ea:	50 96       	adiw	r26, 0x10	; 16
  ec:	2c 91       	ld	r18, X
  ee:	50 97       	sbiw	r26, 0x10	; 16
  f0:	89 2b       	or	r24, r25
  f2:	01 f0       	breq	.+0      	; 0xf4 <_ZN14SoftwareSerial5writeEh+0xf4>
void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
  f4:	80 81       	ld	r24, Z
  f6:	82 2b       	or	r24, r18
  f8:	80 83       	st	Z, r24
  fa:	00 c0       	rjmp	.+0      	; 0xfc <_ZN14SoftwareSerial5writeEh+0xfc>
}

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  fc:	80 81       	ld	r24, Z
  fe:	20 95       	com	r18
 100:	28 23       	and	r18, r24
 102:	20 83       	st	Z, r18
      if (b & mask) // choose bit
        tx_pin_write(HIGH); // send 1
      else
        tx_pin_write(LOW); // send 0
    
      tunedDelay(_tx_delay);
 104:	59 96       	adiw	r26, 0x19	; 25
 106:	8d 91       	ld	r24, X+
 108:	9c 91       	ld	r25, X
 10a:	5a 97       	sbiw	r26, 0x1a	; 26
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
 10c:	21 2f       	mov	r18, r17
 10e:	01 97       	sbiw	r24, 0x01	; 1
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	8f 3f       	cpi	r24, 0xFF	; 255
 114:	92 07       	cpc	r25, r18
 116:	01 f4       	brne	.+0      	; 0x118 <_ZN14SoftwareSerial5writeEh+0x118>

    tx_pin_write(LOW); // restore pin to natural state
  }
  else
  {
    for (byte mask = 0x01; mask; mask <<= 1)
 118:	33 0f       	add	r19, r19
 11a:	4f 5f       	subi	r20, 0xFF	; 255
 11c:	5f 4f       	sbci	r21, 0xFF	; 255
 11e:	48 30       	cpi	r20, 0x08	; 8
 120:	51 05       	cpc	r21, r1
 122:	01 f4       	brne	.+0      	; 0x124 <_ZN14SoftwareSerial5writeEh+0x124>
void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
  else
    *_transmitPortRegister |= _transmitBitMask;
 124:	51 96       	adiw	r26, 0x11	; 17
 126:	ed 91       	ld	r30, X+
 128:	fc 91       	ld	r31, X
 12a:	52 97       	sbiw	r26, 0x12	; 18
 12c:	80 81       	ld	r24, Z
 12e:	50 96       	adiw	r26, 0x10	; 16
 130:	9c 91       	ld	r25, X
 132:	50 97       	sbiw	r26, 0x10	; 16
 134:	89 2b       	or	r24, r25
 136:	80 83       	st	Z, r24
    }

    tx_pin_write(HIGH); // restore pin to natural state
  }

  SREG = oldSREG; // turn interrupts back on
 138:	0f bf       	out	0x3f, r16	; 63
  tunedDelay(_tx_delay);
 13a:	59 96       	adiw	r26, 0x19	; 25
 13c:	8d 91       	ld	r24, X+
 13e:	9c 91       	ld	r25, X
 140:	5a 97       	sbiw	r26, 0x1a	; 26
    "cpi %A0, 0xFF \n\t"
    "cpc %B0, %1 \n\t"
    "brne .-10 \n\t"
    : "+r" (delay), "+a" (tmp)
    : "0" (delay)
    );
 142:	20 e0       	ldi	r18, 0x00	; 0
 144:	01 97       	sbiw	r24, 0x01	; 1
 146:	2f ef       	ldi	r18, 0xFF	; 255
 148:	8f 3f       	cpi	r24, 0xFF	; 255
 14a:	92 07       	cpc	r25, r18
 14c:	01 f4       	brne	.+0      	; 0x14e <_ZN14SoftwareSerial5writeEh+0x14e>
 14e:	21 e0       	ldi	r18, 0x01	; 1
 150:	30 e0       	ldi	r19, 0x00	; 0

  SREG = oldSREG; // turn interrupts back on
  tunedDelay(_tx_delay);
  
  return 1;
}
 152:	c9 01       	movw	r24, r18
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret
}

void SoftwareSerial::tx_pin_write(uint8_t pin_state)
{
  if (pin_state == LOW)
    *_transmitPortRegister &= ~_transmitBitMask;
 15a:	80 81       	ld	r24, Z
 15c:	20 95       	com	r18
 15e:	28 23       	and	r18, r24
 160:	20 83       	st	Z, r18
 162:	00 c0       	rjmp	.+0      	; 0x164 <__SREG__+0x125>

Disassembly of section .text._ZN14SoftwareSerial5flushEv:

00000000 <_ZN14SoftwareSerial5flushEv>:
  return 1;
}

void SoftwareSerial::flush()
{
  if (!isListening())
   0:	20 91 00 00 	lds	r18, 0x0000
   4:	30 91 00 00 	lds	r19, 0x0000
   8:	28 17       	cp	r18, r24
   a:	39 07       	cpc	r19, r25
   c:	01 f4       	brne	.+0      	; 0xe <_ZN14SoftwareSerial5flushEv+0xe>
    return;

  uint8_t oldSREG = SREG;
   e:	9f b7       	in	r25, 0x3f	; 63
  cli();
  10:	f8 94       	cli
  _receive_buffer_head = _receive_buffer_tail = 0;
  12:	10 92 00 00 	sts	0x0000, r1
  16:	80 91 00 00 	lds	r24, 0x0000
  1a:	80 93 00 00 	sts	0x0000, r24
  SREG = oldSREG;
  1e:	9f bf       	out	0x3f, r25	; 63
  20:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial4peekEv:

00000000 <_ZN14SoftwareSerial4peekEv>:
}

int SoftwareSerial::peek()
{
  if (!isListening())
   0:	20 91 00 00 	lds	r18, 0x0000
   4:	30 91 00 00 	lds	r19, 0x0000
   8:	28 17       	cp	r18, r24
   a:	39 07       	cpc	r19, r25
   c:	01 f4       	brne	.+0      	; 0xe <_ZN14SoftwareSerial4peekEv+0xe>
    return -1;

  // Empty buffer?
  if (_receive_buffer_head == _receive_buffer_tail)
   e:	90 91 00 00 	lds	r25, 0x0000
  12:	80 91 00 00 	lds	r24, 0x0000
  16:	98 17       	cp	r25, r24
  18:	01 f4       	brne	.+0      	; 0x1a <_ZN14SoftwareSerial4peekEv+0x1a>
  1a:	2f ef       	ldi	r18, 0xFF	; 255
  1c:	3f ef       	ldi	r19, 0xFF	; 255
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZN14SoftwareSerial4peekEv+0x20>
    return -1;

  // Read from "head"
  return _receive_buffer[_receive_buffer_head];
  20:	e0 91 00 00 	lds	r30, 0x0000
  24:	f0 e0       	ldi	r31, 0x00	; 0
  26:	e0 50       	subi	r30, 0x00	; 0
  28:	f0 40       	sbci	r31, 0x00	; 0
  2a:	80 81       	ld	r24, Z
  2c:	28 2f       	mov	r18, r24
  2e:	33 27       	eor	r19, r19
  30:	27 fd       	sbrc	r18, 7
  32:	30 95       	com	r19
}
  34:	c9 01       	movw	r24, r18
  36:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial5setRXEh:

00000000 <_ZN14SoftwareSerial5setRXEh>:
  _transmitBitMask = digitalPinToBitMask(tx);
  uint8_t port = digitalPinToPort(tx);
  _transmitPortRegister = portOutputRegister(port);
}

void SoftwareSerial::setRX(uint8_t rx)
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	ec 01       	movw	r28, r24
   8:	16 2f       	mov	r17, r22
{
  pinMode(rx, INPUT);
   a:	86 2f       	mov	r24, r22
   c:	60 e0       	ldi	r22, 0x00	; 0
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerial5setRXEh>
  if (!_inverse_logic)
  12:	8b 8d       	ldd	r24, Y+27	; 0x1b
  14:	81 fd       	sbrc	r24, 1
  16:	00 c0       	rjmp	.+0      	; 0x18 <_ZN14SoftwareSerial5setRXEh+0x18>
    digitalWrite(rx, HIGH);  // pullup for normal logic!
  18:	81 2f       	mov	r24, r17
  1a:	61 e0       	ldi	r22, 0x01	; 1
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerial5setRXEh>
  _receivePin = rx;
  20:	1c 87       	std	Y+12, r17	; 0x0c
  _receiveBitMask = digitalPinToBitMask(rx);
  22:	21 2f       	mov	r18, r17
  24:	30 e0       	ldi	r19, 0x00	; 0
  26:	c9 01       	movw	r24, r18
  28:	80 50       	subi	r24, 0x00	; 0
  2a:	90 40       	sbci	r25, 0x00	; 0
  2c:	fc 01       	movw	r30, r24
  2e:	84 91       	lpm	r24, Z+
  30:	8d 87       	std	Y+13, r24	; 0x0d
  uint8_t port = digitalPinToPort(rx);
  32:	20 50       	subi	r18, 0x00	; 0
  34:	30 40       	sbci	r19, 0x00	; 0
  36:	f9 01       	movw	r30, r18
  38:	64 91       	lpm	r22, Z+
  _receivePortRegister = portInputRegister(port);
  3a:	e6 2f       	mov	r30, r22
  3c:	f0 e0       	ldi	r31, 0x00	; 0
  3e:	ee 0f       	add	r30, r30
  40:	ff 1f       	adc	r31, r31
  42:	e0 50       	subi	r30, 0x00	; 0
  44:	f0 40       	sbci	r31, 0x00	; 0
  46:	85 91       	lpm	r24, Z+
  48:	94 91       	lpm	r25, Z+
  4a:	9f 87       	std	Y+15, r25	; 0x0f
  4c:	8e 87       	std	Y+14, r24	; 0x0e
}
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
  54:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerial5setTXEh:

00000000 <_ZN14SoftwareSerial5setTXEh>:
SoftwareSerial::~SoftwareSerial()
{
  end();
}

void SoftwareSerial::setTX(uint8_t tx)
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
   6:	8c 01       	movw	r16, r24
   8:	f6 2e       	mov	r15, r22
{
  pinMode(tx, OUTPUT);
   a:	86 2f       	mov	r24, r22
   c:	61 e0       	ldi	r22, 0x01	; 1
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerial5setTXEh>
  digitalWrite(tx, HIGH);
  12:	8f 2d       	mov	r24, r15
  14:	61 e0       	ldi	r22, 0x01	; 1
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerial5setTXEh>
  _transmitBitMask = digitalPinToBitMask(tx);
  1a:	8f 2d       	mov	r24, r15
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	fc 01       	movw	r30, r24
  20:	e0 50       	subi	r30, 0x00	; 0
  22:	f0 40       	sbci	r31, 0x00	; 0
  24:	e4 91       	lpm	r30, Z+
  26:	d8 01       	movw	r26, r16
  28:	50 96       	adiw	r26, 0x10	; 16
  2a:	ec 93       	st	X, r30
  2c:	50 97       	sbiw	r26, 0x10	; 16
  uint8_t port = digitalPinToPort(tx);
  2e:	80 50       	subi	r24, 0x00	; 0
  30:	90 40       	sbci	r25, 0x00	; 0
  32:	fc 01       	movw	r30, r24
  34:	64 91       	lpm	r22, Z+
  _transmitPortRegister = portOutputRegister(port);
  36:	e6 2f       	mov	r30, r22
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	ee 0f       	add	r30, r30
  3c:	ff 1f       	adc	r31, r31
  3e:	e0 50       	subi	r30, 0x00	; 0
  40:	f0 40       	sbci	r31, 0x00	; 0
  42:	85 91       	lpm	r24, Z+
  44:	94 91       	lpm	r25, Z+
  46:	52 96       	adiw	r26, 0x12	; 18
  48:	9c 93       	st	X, r25
  4a:	8e 93       	st	-X, r24
  4c:	51 97       	sbiw	r26, 0x11	; 17
}
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	ff 90       	pop	r15
  54:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerialC1Ehhb:

00000000 <_ZN14SoftwareSerialC1Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
   6:	8c 01       	movw	r16, r24
   8:	f6 2e       	mov	r15, r22
  public:
    Print() : write_error(0) {}
   a:	fc 01       	movw	r30, r24
   c:	13 82       	std	Z+3, r1	; 0x03
   e:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
  10:	88 ee       	ldi	r24, 0xE8	; 232
  12:	93 e0       	ldi	r25, 0x03	; 3
  14:	a0 e0       	ldi	r26, 0x00	; 0
  16:	b0 e0       	ldi	r27, 0x00	; 0
  18:	84 83       	std	Z+4, r24	; 0x04
  1a:	95 83       	std	Z+5, r25	; 0x05
  1c:	a6 83       	std	Z+6, r26	; 0x06
  1e:	b7 83       	std	Z+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	91 83       	std	Z+1, r25	; 0x01
  26:	80 83       	st	Z, r24
  28:	14 8a       	std	Z+20, r1	; 0x14
  2a:	13 8a       	std	Z+19, r1	; 0x13
  2c:	16 8a       	std	Z+22, r1	; 0x16
  2e:	15 8a       	std	Z+21, r1	; 0x15
  30:	10 8e       	std	Z+24, r1	; 0x18
  32:	17 8a       	std	Z+23, r1	; 0x17
  34:	12 8e       	std	Z+26, r1	; 0x1a
  36:	11 8e       	std	Z+25, r1	; 0x19
  38:	83 8d       	ldd	r24, Z+27	; 0x1b
  3a:	21 70       	andi	r18, 0x01	; 1
  3c:	22 0f       	add	r18, r18
  3e:	8c 7f       	andi	r24, 0xFC	; 252
  40:	82 2b       	or	r24, r18
  42:	83 8f       	std	Z+27, r24	; 0x1b
{
  setTX(transmitPin);
  44:	c8 01       	movw	r24, r16
  46:	64 2f       	mov	r22, r20
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerialC1Ehhb>
  setRX(receivePin);
  4c:	c8 01       	movw	r24, r16
  4e:	6f 2d       	mov	r22, r15
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerialC1Ehhb>
}
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	ff 90       	pop	r15
  5a:	08 95       	ret

Disassembly of section .text._ZN14SoftwareSerialC2Ehhb:

00000000 <_ZN14SoftwareSerialC2Ehhb>:
#endif

//
// Constructor
//
SoftwareSerial::SoftwareSerial(uint8_t receivePin, uint8_t transmitPin, bool inverse_logic /* = false */) : 
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
   6:	8c 01       	movw	r16, r24
   8:	f6 2e       	mov	r15, r22
   a:	fc 01       	movw	r30, r24
   c:	13 82       	std	Z+3, r1	; 0x03
   e:	12 82       	std	Z+2, r1	; 0x02
  10:	88 ee       	ldi	r24, 0xE8	; 232
  12:	93 e0       	ldi	r25, 0x03	; 3
  14:	a0 e0       	ldi	r26, 0x00	; 0
  16:	b0 e0       	ldi	r27, 0x00	; 0
  18:	84 83       	std	Z+4, r24	; 0x04
  1a:	95 83       	std	Z+5, r25	; 0x05
  1c:	a6 83       	std	Z+6, r26	; 0x06
  1e:	b7 83       	std	Z+7, r27	; 0x07
  _rx_delay_centering(0),
  _rx_delay_intrabit(0),
  _rx_delay_stopbit(0),
  _tx_delay(0),
  _buffer_overflow(false),
  _inverse_logic(inverse_logic)
  20:	80 e0       	ldi	r24, 0x00	; 0
  22:	90 e0       	ldi	r25, 0x00	; 0
  24:	91 83       	std	Z+1, r25	; 0x01
  26:	80 83       	st	Z, r24
  28:	14 8a       	std	Z+20, r1	; 0x14
  2a:	13 8a       	std	Z+19, r1	; 0x13
  2c:	16 8a       	std	Z+22, r1	; 0x16
  2e:	15 8a       	std	Z+21, r1	; 0x15
  30:	10 8e       	std	Z+24, r1	; 0x18
  32:	17 8a       	std	Z+23, r1	; 0x17
  34:	12 8e       	std	Z+26, r1	; 0x1a
  36:	11 8e       	std	Z+25, r1	; 0x19
  38:	83 8d       	ldd	r24, Z+27	; 0x1b
  3a:	21 70       	andi	r18, 0x01	; 1
  3c:	22 0f       	add	r18, r18
  3e:	8c 7f       	andi	r24, 0xFC	; 252
  40:	82 2b       	or	r24, r18
  42:	83 8f       	std	Z+27, r24	; 0x1b
{
  setTX(transmitPin);
  44:	c8 01       	movw	r24, r16
  46:	64 2f       	mov	r22, r20
  48:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerialC2Ehhb>
  setRX(receivePin);
  4c:	c8 01       	movw	r24, r16
  4e:	6f 2d       	mov	r22, r15
  50:	0e 94 00 00 	call	0	; 0x0 <_ZN14SoftwareSerialC2Ehhb>
}
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	ff 90       	pop	r15
  5a:	08 95       	ret

Stream.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000001  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000035  2**0
                  ALLOC
  3 .debug_abbrev 000002e8  00000000  00000000  00000035  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000013e6  00000000  00000000  0000031d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000005a9  00000000  00000000  00001703  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._ZN6Stream10setTimeoutEm 0000000c  00000000  00000000  00001cac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  7 .text._ZN6Stream9timedPeekEv 00000058  00000000  00000000  00001cb8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6Stream13peekNextDigitEv 00000036  00000000  00000000  00001d10  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZN6Stream10parseFloatEc 00000142  00000000  00000000  00001d46  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6Stream10parseFloatEv 00000008  00000000  00000000  00001e88  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZN6Stream8parseIntEc 000000e0  00000000  00000000  00001e90  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6Stream8parseIntEv 00000008  00000000  00000000  00001f70  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6Stream9timedReadEv 00000058  00000000  00000000  00001f78  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6Stream15readStringUntilEc 0000005e  00000000  00000000  00001fd0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZN6Stream10readStringEv 0000003a  00000000  00000000  0000202e  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZN6Stream14readBytesUntilEcPcj 0000006a  00000000  00000000  00002068  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZN6Stream9readBytesEPcj 00000048  00000000  00000000  000020d2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZN6Stream9findUntilEPcjS0_j 000000c6  00000000  00000000  0000211a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZN6Stream9findUntilEPcS0_ 00000032  00000000  00000000  000021e0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZN6Stream4findEPc 0000000a  00000000  00000000  00002212  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZN6Stream4findEPcj 00000016  00000000  00000000  0000221c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .debug_frame  00000110  00000000  00000000  00002234  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 23 .debug_loc    000008a9  00000000  00000000  00002344  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 24 .debug_pubnames 00000179  00000000  00000000  00002bed  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 25 .debug_aranges 00000098  00000000  00000000  00002d66  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 26 .debug_ranges 00000090  00000000  00000000  00002dfe  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 27 .debug_str    00000b39  00000000  00000000  00002e8e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._ZN6Stream10setTimeoutEm:

00000000 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(unsigned long timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
   0:	fc 01       	movw	r30, r24
   2:	44 83       	std	Z+4, r20	; 0x04
   4:	55 83       	std	Z+5, r21	; 0x05
   6:	66 83       	std	Z+6, r22	; 0x06
   8:	77 83       	std	Z+7, r23	; 0x07
}
   a:	08 95       	ret

Disassembly of section .text._ZN6Stream9timedPeekEv:

00000000 <_ZN6Stream9timedPeekEv>:
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
}

// private method to peek stream with timeout
int Stream::timedPeek()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
  int c;
  _startMillis = millis();
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
   a:	68 87       	std	Y+8, r22	; 0x08
   c:	79 87       	std	Y+9, r23	; 0x09
   e:	8a 87       	std	Y+10, r24	; 0x0a
  10:	9b 87       	std	Y+11, r25	; 0x0b
  do {
    c = peek();
  12:	e8 81       	ld	r30, Y
  14:	f9 81       	ldd	r31, Y+1	; 0x01
  16:	00 84       	ldd	r0, Z+8	; 0x08
  18:	f1 85       	ldd	r31, Z+9	; 0x09
  1a:	e0 2d       	mov	r30, r0
  1c:	ce 01       	movw	r24, r28
  1e:	19 95       	eicall
  20:	9c 01       	movw	r18, r24
    if (c >= 0) return c;
  22:	97 ff       	sbrs	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9timedPeekEv+0x26>
// private method to peek stream with timeout
int Stream::timedPeek()
{
  int c;
  _startMillis = millis();
  do {
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedPeekEv>
  2a:	28 85       	ldd	r18, Y+8	; 0x08
  2c:	39 85       	ldd	r19, Y+9	; 0x09
  2e:	4a 85       	ldd	r20, Y+10	; 0x0a
  30:	5b 85       	ldd	r21, Y+11	; 0x0b
  32:	62 1b       	sub	r22, r18
  34:	73 0b       	sbc	r23, r19
  36:	84 0b       	sbc	r24, r20
  38:	95 0b       	sbc	r25, r21
  3a:	2c 81       	ldd	r18, Y+4	; 0x04
  3c:	3d 81       	ldd	r19, Y+5	; 0x05
  3e:	4e 81       	ldd	r20, Y+6	; 0x06
  40:	5f 81       	ldd	r21, Y+7	; 0x07
  42:	62 17       	cp	r22, r18
  44:	73 07       	cpc	r23, r19
  46:	84 07       	cpc	r24, r20
  48:	95 07       	cpc	r25, r21
  4a:	00 f0       	brcs	.+0      	; 0x4c <_ZN6Stream9timedPeekEv+0x4c>
  4c:	2f ef       	ldi	r18, 0xFF	; 255
  4e:	3f ef       	ldi	r19, 0xFF	; 255
    c = peek();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
  50:	c9 01       	movw	r24, r18
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	08 95       	ret

Disassembly of section .text._ZN6Stream13peekNextDigitEv:

00000000 <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
  int c;
  while (1) {
    c = timedPeek();
   6:	ce 01       	movw	r24, r28
   8:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream13peekNextDigitEv>
   c:	9c 01       	movw	r18, r24
    if (c < 0) return c;  // timeout
   e:	97 fd       	sbrc	r25, 7
  10:	00 c0       	rjmp	.+0      	; 0x12 <_ZN6Stream13peekNextDigitEv+0x12>
    if (c == '-') return c;
  12:	8d 32       	cpi	r24, 0x2D	; 45
  14:	91 05       	cpc	r25, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN6Stream13peekNextDigitEv+0x18>
    if (c >= '0' && c <= '9') return c;
  18:	c0 97       	sbiw	r24, 0x30	; 48
  1a:	0a 97       	sbiw	r24, 0x0a	; 10
  1c:	00 f0       	brcs	.+0      	; 0x1e <_ZN6Stream13peekNextDigitEv+0x1e>
    read();  // discard non-numeric
  1e:	e8 81       	ld	r30, Y
  20:	f9 81       	ldd	r31, Y+1	; 0x01
  22:	06 80       	ldd	r0, Z+6	; 0x06
  24:	f7 81       	ldd	r31, Z+7	; 0x07
  26:	e0 2d       	mov	r30, r0
  28:	ce 01       	movw	r24, r28
  2a:	19 95       	eicall
  2c:	00 c0       	rjmp	.+0      	; 0x2e <_ZN6Stream13peekNextDigitEv+0x2e>
  }
}
  2e:	c9 01       	movw	r24, r18
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28
  34:	08 95       	ret

Disassembly of section .text._ZN6Stream10parseFloatEc:

00000000 <_ZN6Stream10parseFloatEc>:
  return parseFloat(NO_SKIP_CHAR);
}

// as above but the given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
float Stream::parseFloat(char skipChar){
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	ec 01       	movw	r28, r24
  1e:	66 2e       	mov	r6, r22
  boolean isFraction = false;
  long value = 0;
  char c;
  float fraction = 1.0;

  c = peekNextDigit();
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  24:	d8 2e       	mov	r13, r24
    // ignore non numeric leading characters
  if(c < 0)
  26:	87 ff       	sbrs	r24, 7
  28:	00 c0       	rjmp	.+0      	; 0x2a <_ZN6Stream10parseFloatEc+0x2a>
  2a:	60 e0       	ldi	r22, 0x00	; 0
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	80 e0       	ldi	r24, 0x00	; 0
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN6Stream10parseFloatEc+0x34>
  34:	77 24       	eor	r7, r7
  36:	cc 24       	eor	r12, r12
  38:	ee 24       	eor	r14, r14
  3a:	ff 24       	eor	r15, r15
  3c:	87 01       	movw	r16, r14
  3e:	0f 2e       	mov	r0, r31
  40:	f0 e0       	ldi	r31, 0x00	; 0
  42:	8f 2e       	mov	r8, r31
  44:	f0 e0       	ldi	r31, 0x00	; 0
  46:	9f 2e       	mov	r9, r31
  48:	f0 e8       	ldi	r31, 0x80	; 128
  4a:	af 2e       	mov	r10, r31
  4c:	ff e3       	ldi	r31, 0x3F	; 63
  4e:	bf 2e       	mov	r11, r31
  50:	f0 2d       	mov	r31, r0
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
  52:	d6 14       	cp	r13, r6
  54:	01 f0       	breq	.+0      	; 0x56 <_ZN6Stream10parseFloatEc+0x56>
      ; // ignore
    else if(c == '-')
  56:	8d e2       	ldi	r24, 0x2D	; 45
  58:	d8 16       	cp	r13, r24
  5a:	01 f4       	brne	.+0      	; 0x5c <_ZN6Stream10parseFloatEc+0x5c>
  5c:	77 24       	eor	r7, r7
  5e:	73 94       	inc	r7
  60:	00 c0       	rjmp	.+0      	; 0x62 <_ZN6Stream10parseFloatEc+0x62>
      isNegative = true;
    else if (c == '.')
  62:	9e e2       	ldi	r25, 0x2E	; 46
  64:	d9 16       	cp	r13, r25
  66:	01 f4       	brne	.+0      	; 0x68 <_ZN6Stream10parseFloatEc+0x68>
  68:	cc 24       	eor	r12, r12
  6a:	c3 94       	inc	r12
  6c:	00 c0       	rjmp	.+0      	; 0x6e <_ZN6Stream10parseFloatEc+0x6e>
      isFraction = true;
    else if(c >= '0' && c <= '9')  {      // is c a digit?
  6e:	8d 2d       	mov	r24, r13
  70:	80 53       	subi	r24, 0x30	; 48
  72:	8a 30       	cpi	r24, 0x0A	; 10
  74:	00 f4       	brcc	.+0      	; 0x76 <_ZN6Stream10parseFloatEc+0x76>
      value = value * 10 + c - '0';
  76:	c8 01       	movw	r24, r16
  78:	b7 01       	movw	r22, r14
  7a:	2a e0       	ldi	r18, 0x0A	; 10
  7c:	30 e0       	ldi	r19, 0x00	; 0
  7e:	40 e0       	ldi	r20, 0x00	; 0
  80:	50 e0       	ldi	r21, 0x00	; 0
  82:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  86:	7b 01       	movw	r14, r22
  88:	8c 01       	movw	r16, r24
  8a:	8d 2d       	mov	r24, r13
  8c:	99 27       	eor	r25, r25
  8e:	87 fd       	sbrc	r24, 7
  90:	90 95       	com	r25
  92:	a9 2f       	mov	r26, r25
  94:	b9 2f       	mov	r27, r25
  96:	e8 0e       	add	r14, r24
  98:	f9 1e       	adc	r15, r25
  9a:	0a 1f       	adc	r16, r26
  9c:	1b 1f       	adc	r17, r27
  9e:	80 ed       	ldi	r24, 0xD0	; 208
  a0:	9f ef       	ldi	r25, 0xFF	; 255
  a2:	af ef       	ldi	r26, 0xFF	; 255
  a4:	bf ef       	ldi	r27, 0xFF	; 255
  a6:	e8 0e       	add	r14, r24
  a8:	f9 1e       	adc	r15, r25
  aa:	0a 1f       	adc	r16, r26
  ac:	1b 1f       	adc	r17, r27
      if(isFraction)
  ae:	cc 20       	and	r12, r12
  b0:	01 f0       	breq	.+0      	; 0xb2 <_ZN6Stream10parseFloatEc+0xb2>
         fraction *= 0.1;
  b2:	c5 01       	movw	r24, r10
  b4:	b4 01       	movw	r22, r8
  b6:	2d ec       	ldi	r18, 0xCD	; 205
  b8:	3c ec       	ldi	r19, 0xCC	; 204
  ba:	4c ec       	ldi	r20, 0xCC	; 204
  bc:	5d e3       	ldi	r21, 0x3D	; 61
  be:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  c2:	4b 01       	movw	r8, r22
  c4:	5c 01       	movw	r10, r24
    }
    read();  // consume the character we got with peek
  c6:	e8 81       	ld	r30, Y
  c8:	f9 81       	ldd	r31, Y+1	; 0x01
  ca:	06 80       	ldd	r0, Z+6	; 0x06
  cc:	f7 81       	ldd	r31, Z+7	; 0x07
  ce:	e0 2d       	mov	r30, r0
  d0:	ce 01       	movw	r24, r28
  d2:	19 95       	eicall
    c = timedPeek();
  d4:	ce 01       	movw	r24, r28
  d6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
  da:	98 2f       	mov	r25, r24
  dc:	d8 2e       	mov	r13, r24
  c = peekNextDigit();
    // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
  de:	80 53       	subi	r24, 0x30	; 48
  e0:	8a 30       	cpi	r24, 0x0A	; 10
  e2:	00 f4       	brcc	.+0      	; 0xe4 <_ZN6Stream10parseFloatEc+0xe4>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <_ZN6Stream10parseFloatEc+0xe6>
  e6:	9e 32       	cpi	r25, 0x2E	; 46
  e8:	01 f4       	brne	.+0      	; 0xea <_ZN6Stream10parseFloatEc+0xea>
  ea:	00 c0       	rjmp	.+0      	; 0xec <_ZN6Stream10parseFloatEc+0xec>
  ec:	96 15       	cp	r25, r6
  ee:	01 f4       	brne	.+0      	; 0xf0 <_ZN6Stream10parseFloatEc+0xf0>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <_ZN6Stream10parseFloatEc+0xf2>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9')  || c == '.' || c == skipChar );

  if(isNegative)
  f2:	77 20       	and	r7, r7
  f4:	01 f0       	breq	.+0      	; 0xf6 <_ZN6Stream10parseFloatEc+0xf6>
    value = -value;
  f6:	10 95       	com	r17
  f8:	00 95       	com	r16
  fa:	f0 94       	com	r15
  fc:	e0 94       	com	r14
  fe:	e1 1c       	adc	r14, r1
 100:	f1 1c       	adc	r15, r1
 102:	01 1d       	adc	r16, r1
 104:	11 1d       	adc	r17, r1
  if(isFraction)
 106:	cc 20       	and	r12, r12
 108:	01 f0       	breq	.+0      	; 0x10a <_ZN6Stream10parseFloatEc+0x10a>
    return value * fraction;
 10a:	c8 01       	movw	r24, r16
 10c:	b7 01       	movw	r22, r14
 10e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 112:	a5 01       	movw	r20, r10
 114:	94 01       	movw	r18, r8
 116:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <_ZN6Stream10parseFloatEc+0x11c>
  else
    return value;
 11c:	c8 01       	movw	r24, r16
 11e:	b7 01       	movw	r22, r14
 120:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEc>
}
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	1f 91       	pop	r17
 12a:	0f 91       	pop	r16
 12c:	ff 90       	pop	r15
 12e:	ef 90       	pop	r14
 130:	df 90       	pop	r13
 132:	cf 90       	pop	r12
 134:	bf 90       	pop	r11
 136:	af 90       	pop	r10
 138:	9f 90       	pop	r9
 13a:	8f 90       	pop	r8
 13c:	7f 90       	pop	r7
 13e:	6f 90       	pop	r6
 140:	08 95       	ret

Disassembly of section .text._ZN6Stream10parseFloatEv:

00000000 <_ZN6Stream10parseFloatEv>:


// as parseInt but returns a floating point value
float Stream::parseFloat()
{
  return parseFloat(NO_SKIP_CHAR);
   0:	61 e0       	ldi	r22, 0x01	; 1
   2:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10parseFloatEv>
}
   6:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntEc:

00000000 <_ZN6Stream8parseIntEc>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
   0:	9f 92       	push	r9
   2:	af 92       	push	r10
   4:	bf 92       	push	r11
   6:	cf 92       	push	r12
   8:	df 92       	push	r13
   a:	ef 92       	push	r14
   c:	ff 92       	push	r15
   e:	0f 93       	push	r16
  10:	1f 93       	push	r17
  12:	cf 93       	push	r28
  14:	df 93       	push	r29
  16:	6c 01       	movw	r12, r24
  18:	b6 2e       	mov	r11, r22
{
  boolean isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  1e:	ec 01       	movw	r28, r24
  // ignore non numeric leading characters
  if(c < 0)
  20:	97 ff       	sbrs	r25, 7
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6Stream8parseIntEc+0x24>
  24:	ee 24       	eor	r14, r14
  26:	ff 24       	eor	r15, r15
  28:	87 01       	movw	r16, r14
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN6Stream8parseIntEc+0x2c>
  2c:	99 24       	eor	r9, r9
  2e:	ee 24       	eor	r14, r14
  30:	ff 24       	eor	r15, r15
  32:	87 01       	movw	r16, r14
    return 0; // zero returned if timeout

  do{
    if(c == skipChar)
  34:	ab 2c       	mov	r10, r11
  36:	bb 24       	eor	r11, r11
  38:	a7 fc       	sbrc	r10, 7
  3a:	b0 94       	com	r11
  3c:	ca 15       	cp	r28, r10
  3e:	db 05       	cpc	r29, r11
  40:	01 f0       	breq	.+0      	; 0x42 <_ZN6Stream8parseIntEc+0x42>
      ; // ignore this charactor
    else if(c == '-')
  42:	cd 32       	cpi	r28, 0x2D	; 45
  44:	d1 05       	cpc	r29, r1
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN6Stream8parseIntEc+0x48>
  48:	99 24       	eor	r9, r9
  4a:	93 94       	inc	r9
  4c:	00 c0       	rjmp	.+0      	; 0x4e <_ZN6Stream8parseIntEc+0x4e>
      isNegative = true;
    else if(c >= '0' && c <= '9')        // is c a digit?
  4e:	ce 01       	movw	r24, r28
  50:	c0 97       	sbiw	r24, 0x30	; 48
  52:	0a 97       	sbiw	r24, 0x0a	; 10
  54:	00 f4       	brcc	.+0      	; 0x56 <_ZN6Stream8parseIntEc+0x56>
      value = value * 10 + c - '0';
  56:	c8 01       	movw	r24, r16
  58:	b7 01       	movw	r22, r14
  5a:	2a e0       	ldi	r18, 0x0A	; 10
  5c:	30 e0       	ldi	r19, 0x00	; 0
  5e:	40 e0       	ldi	r20, 0x00	; 0
  60:	50 e0       	ldi	r21, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  66:	7b 01       	movw	r14, r22
  68:	8c 01       	movw	r16, r24
  6a:	ce 01       	movw	r24, r28
  6c:	aa 27       	eor	r26, r26
  6e:	97 fd       	sbrc	r25, 7
  70:	a0 95       	com	r26
  72:	ba 2f       	mov	r27, r26
  74:	e8 0e       	add	r14, r24
  76:	f9 1e       	adc	r15, r25
  78:	0a 1f       	adc	r16, r26
  7a:	1b 1f       	adc	r17, r27
  7c:	80 ed       	ldi	r24, 0xD0	; 208
  7e:	9f ef       	ldi	r25, 0xFF	; 255
  80:	af ef       	ldi	r26, 0xFF	; 255
  82:	bf ef       	ldi	r27, 0xFF	; 255
  84:	e8 0e       	add	r14, r24
  86:	f9 1e       	adc	r15, r25
  88:	0a 1f       	adc	r16, r26
  8a:	1b 1f       	adc	r17, r27
    read();  // consume the character we got with peek
  8c:	d6 01       	movw	r26, r12
  8e:	ed 91       	ld	r30, X+
  90:	fc 91       	ld	r31, X
  92:	06 80       	ldd	r0, Z+6	; 0x06
  94:	f7 81       	ldd	r31, Z+7	; 0x07
  96:	e0 2d       	mov	r30, r0
  98:	c6 01       	movw	r24, r12
  9a:	19 95       	eicall
    c = timedPeek();
  9c:	c6 01       	movw	r24, r12
  9e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEc>
  a2:	ec 01       	movw	r28, r24
  c = peekNextDigit();
  // ignore non numeric leading characters
  if(c < 0)
    return 0; // zero returned if timeout

  do{
  a4:	c0 97       	sbiw	r24, 0x30	; 48
  a6:	0a 97       	sbiw	r24, 0x0a	; 10
  a8:	00 f0       	brcs	.+0      	; 0xaa <_ZN6Stream8parseIntEc+0xaa>
  aa:	ca 15       	cp	r28, r10
  ac:	db 05       	cpc	r29, r11
  ae:	01 f0       	breq	.+0      	; 0xb0 <_ZN6Stream8parseIntEc+0xb0>
    read();  // consume the character we got with peek
    c = timedPeek();
  }
  while( (c >= '0' && c <= '9') || c == skipChar );

  if(isNegative)
  b0:	99 20       	and	r9, r9
  b2:	01 f0       	breq	.+0      	; 0xb4 <_ZN6Stream8parseIntEc+0xb4>
    value = -value;
  b4:	10 95       	com	r17
  b6:	00 95       	com	r16
  b8:	f0 94       	com	r15
  ba:	e0 94       	com	r14
  bc:	e1 1c       	adc	r14, r1
  be:	f1 1c       	adc	r15, r1
  c0:	01 1d       	adc	r16, r1
  c2:	11 1d       	adc	r17, r1
  return value;
}
  c4:	b7 01       	movw	r22, r14
  c6:	c8 01       	movw	r24, r16
  c8:	df 91       	pop	r29
  ca:	cf 91       	pop	r28
  cc:	1f 91       	pop	r17
  ce:	0f 91       	pop	r16
  d0:	ff 90       	pop	r15
  d2:	ef 90       	pop	r14
  d4:	df 90       	pop	r13
  d6:	cf 90       	pop	r12
  d8:	bf 90       	pop	r11
  da:	af 90       	pop	r10
  dc:	9f 90       	pop	r9
  de:	08 95       	ret

Disassembly of section .text._ZN6Stream8parseIntEv:

00000000 <_ZN6Stream8parseIntEv>:
// returns the first valid (long) integer value from the current position.
// initial characters that are not digits (or the minus sign) are skipped
// function is terminated by the first character that is not a digit.
long Stream::parseInt()
{
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
   0:	61 e0       	ldi	r22, 0x01	; 1
   2:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream8parseIntEv>
}
   6:	08 95       	ret

Disassembly of section .text._ZN6Stream9timedReadEv:

00000000 <_ZN6Stream9timedReadEv>:

#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
  int c;
  _startMillis = millis();
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
   a:	68 87       	std	Y+8, r22	; 0x08
   c:	79 87       	std	Y+9, r23	; 0x09
   e:	8a 87       	std	Y+10, r24	; 0x0a
  10:	9b 87       	std	Y+11, r25	; 0x0b
  do {
    c = read();
  12:	e8 81       	ld	r30, Y
  14:	f9 81       	ldd	r31, Y+1	; 0x01
  16:	06 80       	ldd	r0, Z+6	; 0x06
  18:	f7 81       	ldd	r31, Z+7	; 0x07
  1a:	e0 2d       	mov	r30, r0
  1c:	ce 01       	movw	r24, r28
  1e:	19 95       	eicall
  20:	9c 01       	movw	r18, r24
    if (c >= 0) return c;
  22:	97 ff       	sbrs	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9timedReadEv+0x26>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9timedReadEv>
  2a:	28 85       	ldd	r18, Y+8	; 0x08
  2c:	39 85       	ldd	r19, Y+9	; 0x09
  2e:	4a 85       	ldd	r20, Y+10	; 0x0a
  30:	5b 85       	ldd	r21, Y+11	; 0x0b
  32:	62 1b       	sub	r22, r18
  34:	73 0b       	sbc	r23, r19
  36:	84 0b       	sbc	r24, r20
  38:	95 0b       	sbc	r25, r21
  3a:	2c 81       	ldd	r18, Y+4	; 0x04
  3c:	3d 81       	ldd	r19, Y+5	; 0x05
  3e:	4e 81       	ldd	r20, Y+6	; 0x06
  40:	5f 81       	ldd	r21, Y+7	; 0x07
  42:	62 17       	cp	r22, r18
  44:	73 07       	cpc	r23, r19
  46:	84 07       	cpc	r24, r20
  48:	95 07       	cpc	r25, r21
  4a:	00 f0       	brcs	.+0      	; 0x4c <_ZN6Stream9timedReadEv+0x4c>
  4c:	2f ef       	ldi	r18, 0xFF	; 255
  4e:	3f ef       	ldi	r19, 0xFF	; 255
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
}
  50:	c9 01       	movw	r24, r18
  52:	df 91       	pop	r29
  54:	cf 91       	pop	r28
  56:	08 95       	ret

Disassembly of section .text._ZN6Stream15readStringUntilEc:

00000000 <_ZN6Stream15readStringUntilEc>:
    c = timedRead();
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	08 2f       	mov	r16, r24
  10:	f9 2e       	mov	r15, r25
  12:	6b 01       	movw	r12, r22
  14:	14 2f       	mov	r17, r20
{
  String ret;
  16:	60 e0       	ldi	r22, 0x00	; 0
  18:	70 e0       	ldi	r23, 0x00	; 0
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  int c = timedRead();
  1e:	c6 01       	movw	r24, r12
  20:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  24:	bc 01       	movw	r22, r24
  while (c >= 0 && c != terminator)
  26:	c1 2f       	mov	r28, r17
  28:	dd 27       	eor	r29, r29
  2a:	c7 fd       	sbrc	r28, 7
  2c:	d0 95       	com	r29
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZN6Stream15readStringUntilEc+0x30>
	
	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
  30:	80 2f       	mov	r24, r16
  32:	9f 2d       	mov	r25, r15
  34:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  {
    ret += (char)c;
    c = timedRead();
  38:	c6 01       	movw	r24, r12
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream15readStringUntilEc>
  3e:	bc 01       	movw	r22, r24

String Stream::readStringUntil(char terminator)
{
  String ret;
  int c = timedRead();
  while (c >= 0 && c != terminator)
  40:	77 fd       	sbrc	r23, 7
  42:	00 c0       	rjmp	.+0      	; 0x44 <_ZN6Stream15readStringUntilEc+0x44>
  44:	6c 17       	cp	r22, r28
  46:	7d 07       	cpc	r23, r29
  48:	01 f4       	brne	.+0      	; 0x4a <_ZN6Stream15readStringUntilEc+0x4a>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
  4a:	80 2f       	mov	r24, r16
  4c:	9f 2d       	mov	r25, r15
  4e:	df 91       	pop	r29
  50:	cf 91       	pop	r28
  52:	1f 91       	pop	r17
  54:	0f 91       	pop	r16
  56:	ff 90       	pop	r15
  58:	df 90       	pop	r13
  5a:	cf 90       	pop	r12
  5c:	08 95       	ret

Disassembly of section .text._ZN6Stream10readStringEv:

00000000 <_ZN6Stream10readStringEv>:
    index++;
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	18 2f       	mov	r17, r24
   a:	09 2f       	mov	r16, r25
   c:	eb 01       	movw	r28, r22
{
  String ret;
   e:	60 e0       	ldi	r22, 0x00	; 0
  10:	70 e0       	ldi	r23, 0x00	; 0
  12:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  16:	00 c0       	rjmp	.+0      	; 0x18 <_ZN6Stream10readStringEv+0x18>
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  int c = timedRead();
  while (c >= 0)
  {
    ret += (char)c;
    c = timedRead();
  20:	ce 01       	movw	r24, r28
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream10readStringEv>
  26:	bc 01       	movw	r22, r24

String Stream::readString()
{
  String ret;
  int c = timedRead();
  while (c >= 0)
  28:	97 ff       	sbrs	r25, 7
  2a:	00 c0       	rjmp	.+0      	; 0x2c <_ZN6Stream10readStringEv+0x2c>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
  2c:	81 2f       	mov	r24, r17
  2e:	90 2f       	mov	r25, r16
  30:	df 91       	pop	r29
  32:	cf 91       	pop	r28
  34:	1f 91       	pop	r17
  36:	0f 91       	pop	r16
  38:	08 95       	ret

Disassembly of section .text._ZN6Stream14readBytesUntilEcPcj:

00000000 <_ZN6Stream14readBytesUntilEcPcj>:

// as readBytes with terminator character
// terminates if length characters have been read, timeout, or if the terminator character  detected
// returns the number of characters placed in the buffer (0 means no valid data found)

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	5c 01       	movw	r10, r24
  16:	7a 01       	movw	r14, r20
  18:	89 01       	movw	r16, r18
{
  if (length < 1) return 0;
  1a:	21 15       	cp	r18, r1
  1c:	31 05       	cpc	r19, r1
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN6Stream14readBytesUntilEcPcj+0x20>
  20:	c0 e0       	ldi	r28, 0x00	; 0
  22:	d0 e0       	ldi	r29, 0x00	; 0
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream14readBytesUntilEcPcj+0x26>
  26:	c0 e0       	ldi	r28, 0x00	; 0
  28:	d0 e0       	ldi	r29, 0x00	; 0
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
    if (c < 0 || c == terminator) break;
  2a:	c6 2e       	mov	r12, r22
  2c:	dd 24       	eor	r13, r13
  2e:	c7 fc       	sbrc	r12, 7
  30:	d0 94       	com	r13
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN6Stream14readBytesUntilEcPcj+0x34>
size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
    int c = timedRead();
  34:	c5 01       	movw	r24, r10
  36:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream14readBytesUntilEcPcj>
    if (c < 0 || c == terminator) break;
  3a:	97 fd       	sbrc	r25, 7
  3c:	00 c0       	rjmp	.+0      	; 0x3e <_ZN6Stream14readBytesUntilEcPcj+0x3e>
  3e:	8c 15       	cp	r24, r12
  40:	9d 05       	cpc	r25, r13
  42:	01 f0       	breq	.+0      	; 0x44 <_ZN6Stream14readBytesUntilEcPcj+0x44>
    *buffer++ = (char)c;
  44:	f7 01       	movw	r30, r14
  46:	81 93       	st	Z+, r24
  48:	7f 01       	movw	r14, r30
    index++;
  4a:	21 96       	adiw	r28, 0x01	; 1

size_t Stream::readBytesUntil(char terminator, char *buffer, size_t length)
{
  if (length < 1) return 0;
  size_t index = 0;
  while (index < length) {
  4c:	c0 17       	cp	r28, r16
  4e:	d1 07       	cpc	r29, r17
  50:	00 f0       	brcs	.+0      	; 0x52 <_ZN6Stream14readBytesUntilEcPcj+0x52>
    if (c < 0 || c == terminator) break;
    *buffer++ = (char)c;
    index++;
  }
  return index; // return number of characters, not including null terminator
}
  52:	ce 01       	movw	r24, r28
  54:	df 91       	pop	r29
  56:	cf 91       	pop	r28
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	df 90       	pop	r13
  62:	cf 90       	pop	r12
  64:	bf 90       	pop	r11
  66:	af 90       	pop	r10
  68:	08 95       	ret

Disassembly of section .text._ZN6Stream9readBytesEPcj:

00000000 <_ZN6Stream9readBytesEPcj>:
// read characters from stream into buffer
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	6c 01       	movw	r12, r24
  12:	8b 01       	movw	r16, r22
  14:	7a 01       	movw	r14, r20
  16:	c0 e0       	ldi	r28, 0x00	; 0
  18:	d0 e0       	ldi	r29, 0x00	; 0
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZN6Stream9readBytesEPcj+0x1c>
{
  size_t count = 0;
  while (count < length) {
    int c = timedRead();
  1c:	c6 01       	movw	r24, r12
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9readBytesEPcj>
    if (c < 0) break;
  22:	97 fd       	sbrc	r25, 7
  24:	00 c0       	rjmp	.+0      	; 0x26 <_ZN6Stream9readBytesEPcj+0x26>
    *buffer++ = (char)c;
  26:	f8 01       	movw	r30, r16
  28:	81 93       	st	Z+, r24
  2a:	8f 01       	movw	r16, r30
    count++;
  2c:	21 96       	adiw	r28, 0x01	; 1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
  2e:	ce 15       	cp	r28, r14
  30:	df 05       	cpc	r29, r15
  32:	00 f0       	brcs	.+0      	; 0x34 <_ZN6Stream9readBytesEPcj+0x34>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
  34:	ce 01       	movw	r24, r28
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	1f 91       	pop	r17
  3c:	0f 91       	pop	r16
  3e:	ff 90       	pop	r15
  40:	ef 90       	pop	r14
  42:	df 90       	pop	r13
  44:	cf 90       	pop	r12
  46:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcjS0_j:

00000000 <_ZN6Stream9findUntilEPcjS0_j>:
}

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
   0:	6f 92       	push	r6
   2:	7f 92       	push	r7
   4:	8f 92       	push	r8
   6:	9f 92       	push	r9
   8:	af 92       	push	r10
   a:	bf 92       	push	r11
   c:	cf 92       	push	r12
   e:	df 92       	push	r13
  10:	ef 92       	push	r14
  12:	ff 92       	push	r15
  14:	0f 93       	push	r16
  16:	1f 93       	push	r17
  18:	cf 93       	push	r28
  1a:	df 93       	push	r29
  1c:	3c 01       	movw	r6, r24
  1e:	7b 01       	movw	r14, r22
  20:	4a 01       	movw	r8, r20
  22:	59 01       	movw	r10, r18
  24:	68 01       	movw	r12, r16
{
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;
  
  if( *target == 0)
  26:	fb 01       	movw	r30, r22
  28:	80 81       	ld	r24, Z
  2a:	88 23       	and	r24, r24
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN6Stream9findUntilEPcjS0_j+0x2e>
  2e:	c0 e0       	ldi	r28, 0x00	; 0
  30:	d0 e0       	ldi	r29, 0x00	; 0
  32:	00 c0       	rjmp	.+0      	; 0x34 <_ZN6Stream9findUntilEPcjS0_j+0x34>
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
    
    if(c != target[index])
  34:	f7 01       	movw	r30, r14
  36:	ec 0f       	add	r30, r28
  38:	fd 1f       	adc	r31, r29
  3a:	80 81       	ld	r24, Z
  3c:	99 27       	eor	r25, r25
  3e:	87 fd       	sbrc	r24, 7
  40:	90 95       	com	r25
  42:	28 17       	cp	r18, r24
  44:	39 07       	cpc	r19, r25
  46:	01 f0       	breq	.+0      	; 0x48 <_ZN6Stream9findUntilEPcjS0_j+0x48>
  48:	c0 e0       	ldi	r28, 0x00	; 0
  4a:	d0 e0       	ldi	r29, 0x00	; 0
      index = 0; // reset index if any char does not match
    
    if( c == target[index]){
  4c:	f7 01       	movw	r30, r14
  4e:	ec 0f       	add	r30, r28
  50:	fd 1f       	adc	r31, r29
  52:	80 81       	ld	r24, Z
  54:	99 27       	eor	r25, r25
  56:	87 fd       	sbrc	r24, 7
  58:	90 95       	com	r25
  5a:	28 17       	cp	r18, r24
  5c:	39 07       	cpc	r19, r25
  5e:	01 f4       	brne	.+0      	; 0x60 <_ZN6Stream9findUntilEPcjS0_j+0x60>
      //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
  60:	21 96       	adiw	r28, 0x01	; 1
  62:	c8 15       	cp	r28, r8
  64:	d9 05       	cpc	r29, r9
  66:	00 f4       	brcc	.+0      	; 0x68 <_ZN6Stream9findUntilEPcjS0_j+0x68>
        return true;
      }
    }
    
    if(termLen > 0 && c == terminator[termIndex]){
  68:	c1 14       	cp	r12, r1
  6a:	d1 04       	cpc	r13, r1
  6c:	01 f0       	breq	.+0      	; 0x6e <_ZN6Stream9findUntilEPcjS0_j+0x6e>
  6e:	f5 01       	movw	r30, r10
  70:	e0 0f       	add	r30, r16
  72:	f1 1f       	adc	r31, r17
  74:	80 81       	ld	r24, Z
  76:	99 27       	eor	r25, r25
  78:	87 fd       	sbrc	r24, 7
  7a:	90 95       	com	r25
  7c:	28 17       	cp	r18, r24
  7e:	39 07       	cpc	r19, r25
  80:	01 f4       	brne	.+0      	; 0x82 <_ZN6Stream9findUntilEPcjS0_j+0x82>
      if(++termIndex >= termLen)
  82:	0f 5f       	subi	r16, 0xFF	; 255
  84:	1f 4f       	sbci	r17, 0xFF	; 255
  86:	0c 15       	cp	r16, r12
  88:	1d 05       	cpc	r17, r13
  8a:	00 f0       	brcs	.+0      	; 0x8c <_ZN6Stream9findUntilEPcjS0_j+0x8c>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <_ZN6Stream9findUntilEPcjS0_j+0x8e>
  8e:	00 e0       	ldi	r16, 0x00	; 0
  90:	10 e0       	ldi	r17, 0x00	; 0
  size_t termIndex = 0;
  int c;
  
  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
  92:	c3 01       	movw	r24, r6
  94:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcjS0_j>
  98:	9c 01       	movw	r18, r24
  9a:	18 16       	cp	r1, r24
  9c:	19 06       	cpc	r1, r25
  9e:	04 f0       	brlt	.+0      	; 0xa0 <_ZN6Stream9findUntilEPcjS0_j+0xa0>
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <_ZN6Stream9findUntilEPcjS0_j+0xa2>
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	00 c0       	rjmp	.+0      	; 0xa6 <_ZN6Stream9findUntilEPcjS0_j+0xa6>
  a6:	80 e0       	ldi	r24, 0x00	; 0
    }
    else
      termIndex = 0;
  }
  return false;
}
  a8:	df 91       	pop	r29
  aa:	cf 91       	pop	r28
  ac:	1f 91       	pop	r17
  ae:	0f 91       	pop	r16
  b0:	ff 90       	pop	r15
  b2:	ef 90       	pop	r14
  b4:	df 90       	pop	r13
  b6:	cf 90       	pop	r12
  b8:	bf 90       	pop	r11
  ba:	af 90       	pop	r10
  bc:	9f 90       	pop	r9
  be:	8f 90       	pop	r8
  c0:	7f 90       	pop	r7
  c2:	6f 90       	pop	r6
  c4:	08 95       	ret

Disassembly of section .text._ZN6Stream9findUntilEPcS0_:

00000000 <_ZN6Stream9findUntilEPcS0_>:
{
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	9a 01       	movw	r18, r20
{
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   6:	db 01       	movw	r26, r22
   8:	0d 90       	ld	r0, X+
   a:	00 20       	and	r0, r0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6Stream9findUntilEPcS0_+0xe>
   e:	ad 01       	movw	r20, r26
  10:	41 50       	subi	r20, 0x01	; 1
  12:	50 40       	sbci	r21, 0x00	; 0
  14:	46 1b       	sub	r20, r22
  16:	57 0b       	sbc	r21, r23
  18:	d9 01       	movw	r26, r18
  1a:	0d 90       	ld	r0, X+
  1c:	00 20       	and	r0, r0
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN6Stream9findUntilEPcS0_+0x20>
  20:	11 97       	sbiw	r26, 0x01	; 1
  22:	a2 1b       	sub	r26, r18
  24:	b3 0b       	sbc	r27, r19
  26:	8d 01       	movw	r16, r26
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream9findUntilEPcS0_>
}
  2c:	1f 91       	pop	r17
  2e:	0f 91       	pop	r16
  30:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPc:

00000000 <_ZN6Stream4findEPc>:
}

 // find returns true if the target string is found
bool  Stream::find(char *target)
{
  return findUntil(target, NULL);
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream4findEPc>
}
   8:	08 95       	ret

Disassembly of section .text._ZN6Stream4findEPcj:

00000000 <_ZN6Stream4findEPcj>:

// reads data from the stream until the target string of given length is found
// returns true if target string is found, false if timed out
bool Stream::find(char *target, size_t length)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
{
  return findUntil(target, length, NULL, 0);
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	30 e0       	ldi	r19, 0x00	; 0
   8:	00 e0       	ldi	r16, 0x00	; 0
   a:	10 e0       	ldi	r17, 0x00	; 0
   c:	0e 94 00 00 	call	0	; 0x0 <_ZN6Stream4findEPcj>
}
  10:	1f 91       	pop	r17
  12:	0f 91       	pop	r16
  14:	08 95       	ret

Tone.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 000001e3  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000973  00000000  00000000  00000217  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000518  00000000  00000000  00000b8a  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._Z12disableTimerh 00000066  00000000  00000000  000010a2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z6noToneh 0000002e  00000000  00000000  00001108  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_13 000000c0  00000000  00000000  00001136  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._Z4tonehjm 000005f2  00000000  00000000  000011f6  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .bss.timer0_toggle_count 00000004  00000000  00000000  000017e8  2**0
                  ALLOC
 11 .bss.timer0_pin_port 00000002  00000000  00000000  000017e8  2**0
                  ALLOC
 12 .bss.timer0_pin_mask 00000001  00000000  00000000  000017e8  2**0
                  ALLOC
 13 .bss.timer1_toggle_count 00000004  00000000  00000000  000017e8  2**0
                  ALLOC
 14 .bss.timer1_pin_port 00000002  00000000  00000000  000017e8  2**0
                  ALLOC
 15 .bss.timer1_pin_mask 00000001  00000000  00000000  000017e8  2**0
                  ALLOC
 16 .bss.timer2_toggle_count 00000004  00000000  00000000  000017e8  2**0
                  ALLOC
 17 .bss.timer2_pin_port 00000002  00000000  00000000  000017e8  2**0
                  ALLOC
 18 .bss.timer2_pin_mask 00000001  00000000  00000000  000017e8  2**0
                  ALLOC
 19 .bss.timer3_toggle_count 00000004  00000000  00000000  000017e8  2**0
                  ALLOC
 20 .bss.timer3_pin_port 00000002  00000000  00000000  000017e8  2**0
                  ALLOC
 21 .bss.timer3_pin_mask 00000001  00000000  00000000  000017e8  2**0
                  ALLOC
 22 .bss.timer4_toggle_count 00000004  00000000  00000000  000017e8  2**0
                  ALLOC
 23 .bss.timer4_pin_port 00000002  00000000  00000000  000017e8  2**0
                  ALLOC
 24 .bss.timer4_pin_mask 00000001  00000000  00000000  000017e8  2**0
                  ALLOC
 25 .bss.timer5_toggle_count 00000004  00000000  00000000  000017e8  2**0
                  ALLOC
 26 .bss.timer5_pin_port 00000002  00000000  00000000  000017e8  2**0
                  ALLOC
 27 .bss.timer5_pin_mask 00000001  00000000  00000000  000017e8  2**0
                  ALLOC
 28 .data._ZL9tone_pins 00000001  00000000  00000000  000017e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 29 .progmem.data 00000001  00000000  00000000  000017e9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 30 .debug_frame  00000050  00000000  00000000  000017ec  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 31 .debug_loc    00000495  00000000  00000000  0000183c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 32 .debug_pubnames 000001c7  00000000  00000000  00001cd1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 33 .debug_aranges 00000038  00000000  00000000  00001e98  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 34 .debug_ranges 00000030  00000000  00000000  00001ed0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 35 .debug_str    00000331  00000000  00000000  00001f00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._Z12disableTimerh:

00000000 <_Z12disableTimerh>:
// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
{
  switch (_timer)
   0:	82 30       	cpi	r24, 0x02	; 2
   2:	01 f0       	breq	.+0      	; 0x4 <_Z12disableTimerh+0x4>
   4:	83 30       	cpi	r24, 0x03	; 3
   6:	00 f4       	brcc	.+0      	; 0x8 <_Z12disableTimerh+0x8>
   8:	88 23       	and	r24, r24
   a:	01 f0       	breq	.+0      	; 0xc <_Z12disableTimerh+0xc>
   c:	81 30       	cpi	r24, 0x01	; 1
   e:	01 f4       	brne	.+0      	; 0x10 <_Z12disableTimerh+0x10>
  10:	00 c0       	rjmp	.+0      	; 0x12 <_Z12disableTimerh+0x12>
  12:	84 30       	cpi	r24, 0x04	; 4
  14:	01 f0       	breq	.+0      	; 0x16 <_Z12disableTimerh+0x16>
  16:	84 30       	cpi	r24, 0x04	; 4
  18:	00 f0       	brcs	.+0      	; 0x1a <_Z12disableTimerh+0x1a>
  1a:	85 30       	cpi	r24, 0x05	; 5
  1c:	01 f4       	brne	.+0      	; 0x1e <_Z12disableTimerh+0x1e>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_Z12disableTimerh+0x20>
  {
    case 0:
      #if defined(TIMSK0)
        TIMSK0 = 0;
  20:	10 92 6e 00 	sts	0x006E, r1
  24:	08 95       	ret
      #endif
      break;

#if defined(TIMSK1) && defined(OCIE1A)
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
  26:	80 91 6f 00 	lds	r24, 0x006F
  2a:	8d 7f       	andi	r24, 0xFD	; 253
  2c:	80 93 6f 00 	sts	0x006F, r24
  30:	08 95       	ret
      break;
#endif

    case 2:
      #if defined(TIMSK2) && defined(OCIE2A)
        bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
  32:	80 91 70 00 	lds	r24, 0x0070
  36:	8d 7f       	andi	r24, 0xFD	; 253
  38:	80 93 70 00 	sts	0x0070, r24
      #endif
      #if defined(TCCR2A) && defined(WGM20)
        TCCR2A = (1 << WGM20);
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	80 93 b0 00 	sts	0x00B0, r24
      #endif
      #if defined(TCCR2B) && defined(CS22)
        TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
  42:	80 91 b1 00 	lds	r24, 0x00B1
  46:	88 7f       	andi	r24, 0xF8	; 248
  48:	84 60       	ori	r24, 0x04	; 4
  4a:	80 93 b1 00 	sts	0x00B1, r24
      #endif
      #if defined(OCR2A)
        OCR2A = 0;
  4e:	10 92 b3 00 	sts	0x00B3, r1
  52:	08 95       	ret
      #endif
      break;

#if defined(TIMSK3)
    case 3:
      TIMSK3 = 0;
  54:	10 92 71 00 	sts	0x0071, r1
  58:	08 95       	ret
      break;
#endif

#if defined(TIMSK4)
    case 4:
      TIMSK4 = 0;
  5a:	10 92 72 00 	sts	0x0072, r1
  5e:	08 95       	ret
      break;
#endif

#if defined(TIMSK5)
    case 5:
      TIMSK5 = 0;
  60:	10 92 73 00 	sts	0x0073, r1
  64:	08 95       	ret

Disassembly of section .text._Z6noToneh:

00000000 <_Z6noToneh>:
#endif
  }
}


void noTone(uint8_t _pin)
   0:	1f 93       	push	r17
   2:	18 2f       	mov	r17, r24
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
   4:	80 91 00 00 	lds	r24, 0x0000
   8:	81 17       	cp	r24, r17
   a:	01 f0       	breq	.+0      	; 0xc <_Z6noToneh+0xc>
   c:	9f ef       	ldi	r25, 0xFF	; 255
   e:	00 c0       	rjmp	.+0      	; 0x10 <_Z6noToneh+0x10>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  10:	e0 e0       	ldi	r30, 0x00	; 0
  12:	f0 e0       	ldi	r31, 0x00	; 0
  14:	94 91       	lpm	r25, Z+
      tone_pins[i] = 255;
  16:	8f ef       	ldi	r24, 0xFF	; 255
  18:	80 93 00 00 	sts	0x0000, r24
    }
  }
  
  disableTimer(_timer);
  1c:	89 2f       	mov	r24, r25
  1e:	0e 94 00 00 	call	0	; 0x0 <_Z6noToneh>

  digitalWrite(_pin, 0);
  22:	81 2f       	mov	r24, r17
  24:	60 e0       	ldi	r22, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_Z6noToneh>
}
  2a:	1f 91       	pop	r17
  2c:	08 95       	ret

Disassembly of section .text.__vector_13:

00000000 <__vector_13>:
  }
}
#endif


ISR(TIMER2_COMPA_vect)
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
{

  if (timer2_toggle_count != 0)
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	a0 91 00 00 	lds	r26, 0x0000
  32:	b0 91 00 00 	lds	r27, 0x0000
  36:	00 97       	sbiw	r24, 0x00	; 0
  38:	a1 05       	cpc	r26, r1
  3a:	b1 05       	cpc	r27, r1
  3c:	01 f0       	breq	.+0      	; 0x3e <__vector_13+0x3e>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
  3e:	e0 91 00 00 	lds	r30, 0x0000
  42:	f0 91 00 00 	lds	r31, 0x0000
  46:	80 81       	ld	r24, Z
  48:	90 91 00 00 	lds	r25, 0x0000
  4c:	89 27       	eor	r24, r25
  4e:	80 83       	st	Z, r24

    if (timer2_toggle_count > 0)
  50:	80 91 00 00 	lds	r24, 0x0000
  54:	90 91 00 00 	lds	r25, 0x0000
  58:	a0 91 00 00 	lds	r26, 0x0000
  5c:	b0 91 00 00 	lds	r27, 0x0000
  60:	18 16       	cp	r1, r24
  62:	19 06       	cpc	r1, r25
  64:	1a 06       	cpc	r1, r26
  66:	1b 06       	cpc	r1, r27
  68:	04 f4       	brge	.+0      	; 0x6a <__vector_13+0x6a>
      timer2_toggle_count--;
  6a:	80 91 00 00 	lds	r24, 0x0000
  6e:	90 91 00 00 	lds	r25, 0x0000
  72:	a0 91 00 00 	lds	r26, 0x0000
  76:	b0 91 00 00 	lds	r27, 0x0000
  7a:	01 97       	sbiw	r24, 0x01	; 1
  7c:	a1 09       	sbc	r26, r1
  7e:	b1 09       	sbc	r27, r1
  80:	80 93 00 00 	sts	0x0000, r24
  84:	90 93 00 00 	sts	0x0000, r25
  88:	a0 93 00 00 	sts	0x0000, r26
  8c:	b0 93 00 00 	sts	0x0000, r27
  90:	00 c0       	rjmp	.+0      	; 0x92 <__vector_13+0x92>
  else
  {
    // need to call noTone() so that the tone_pins[] entry is reset, so the
    // timer gets initialized next time we call tone().
    // XXX: this assumes timer 2 is always the first one used.
    noTone(tone_pins[0]);
  92:	80 91 00 00 	lds	r24, 0x0000
  96:	0e 94 00 00 	call	0	; 0x0 <__vector_13>
//    disableTimer(2);
//    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
  }
}
  9a:	ff 91       	pop	r31
  9c:	ef 91       	pop	r30
  9e:	bf 91       	pop	r27
  a0:	af 91       	pop	r26
  a2:	9f 91       	pop	r25
  a4:	8f 91       	pop	r24
  a6:	7f 91       	pop	r23
  a8:	6f 91       	pop	r22
  aa:	5f 91       	pop	r21
  ac:	4f 91       	pop	r20
  ae:	3f 91       	pop	r19
  b0:	2f 91       	pop	r18
  b2:	0f 90       	pop	r0
  b4:	0b be       	out	0x3b, r0	; 59
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

Disassembly of section .text._Z4tonehjm:

00000000 <_Z4tonehjm>:



// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	5f 92       	push	r5
   6:	6f 92       	push	r6
   8:	7f 92       	push	r7
   a:	8f 92       	push	r8
   c:	9f 92       	push	r9
   e:	af 92       	push	r10
  10:	bf 92       	push	r11
  12:	cf 92       	push	r12
  14:	df 92       	push	r13
  16:	ef 92       	push	r14
  18:	ff 92       	push	r15
  1a:	0f 93       	push	r16
  1c:	1f 93       	push	r17
  1e:	df 93       	push	r29
  20:	cf 93       	push	r28
  22:	00 d0       	rcall	.+0      	; 0x24 <_Z4tonehjm+0x24>
  24:	0f 92       	push	r0
  26:	cd b7       	in	r28, 0x3d	; 61
  28:	de b7       	in	r29, 0x3e	; 62
  2a:	a8 2f       	mov	r26, r24
  2c:	1b 01       	movw	r2, r22
  2e:	29 83       	std	Y+1, r18	; 0x01
  30:	3a 83       	std	Y+2, r19	; 0x02
  32:	4b 83       	std	Y+3, r20	; 0x03
  34:	5c 83       	std	Y+4, r21	; 0x04
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == _pin) {
  36:	80 91 00 00 	lds	r24, 0x0000
  3a:	8a 17       	cp	r24, r26
  3c:	01 f4       	brne	.+0      	; 0x3e <_Z4tonehjm+0x3e>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  3e:	e0 e0       	ldi	r30, 0x00	; 0
  40:	f0 e0       	ldi	r31, 0x00	; 0
  42:	54 90       	lpm	r5, Z+
  44:	00 c0       	rjmp	.+0      	; 0x46 <_Z4tonehjm+0x46>
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
    if (tone_pins[i] == 255) {
  46:	8f 3f       	cpi	r24, 0xFF	; 255
  48:	01 f0       	breq	.+0      	; 0x4a <_Z4tonehjm+0x4a>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_Z4tonehjm+0x4c>
      tone_pins[i] = _pin;
  4c:	a0 93 00 00 	sts	0x0000, r26
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  50:	e0 e0       	ldi	r30, 0x00	; 0
  52:	f0 e0       	ldi	r31, 0x00	; 0
  54:	54 90       	lpm	r5, Z+
      break;
    }
  }
  
  if (_timer != -1)
  56:	2f ef       	ldi	r18, 0xFF	; 255
  58:	52 16       	cp	r5, r18
  5a:	01 f4       	brne	.+0      	; 0x5c <_Z4tonehjm+0x5c>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <_Z4tonehjm+0x5e>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
  5e:	82 e0       	ldi	r24, 0x02	; 2
  60:	58 16       	cp	r5, r24
  62:	01 f4       	brne	.+0      	; 0x64 <_Z4tonehjm+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <_Z4tonehjm+0x66>
  66:	85 15       	cp	r24, r5
  68:	04 f0       	brlt	.+0      	; 0x6a <_Z4tonehjm+0x6a>
  6a:	55 20       	and	r5, r5
  6c:	01 f0       	breq	.+0      	; 0x6e <_Z4tonehjm+0x6e>
  6e:	91 e0       	ldi	r25, 0x01	; 1
  70:	59 16       	cp	r5, r25
  72:	01 f0       	breq	.+0      	; 0x74 <_Z4tonehjm+0x74>
  74:	00 c0       	rjmp	.+0      	; 0x76 <_Z4tonehjm+0x76>
  76:	00 c0       	rjmp	.+0      	; 0x78 <_Z4tonehjm+0x78>
  78:	b4 e0       	ldi	r27, 0x04	; 4
  7a:	5b 16       	cp	r5, r27
  7c:	01 f4       	brne	.+0      	; 0x7e <_Z4tonehjm+0x7e>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_Z4tonehjm+0x80>
  80:	5b 16       	cp	r5, r27
  82:	04 f4       	brge	.+0      	; 0x84 <_Z4tonehjm+0x84>
  84:	00 c0       	rjmp	.+0      	; 0x86 <_Z4tonehjm+0x86>
  86:	e5 e0       	ldi	r30, 0x05	; 5
  88:	5e 16       	cp	r5, r30
  8a:	01 f0       	breq	.+0      	; 0x8c <_Z4tonehjm+0x8c>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <_Z4tonehjm+0x8e>
  8e:	00 c0       	rjmp	.+0      	; 0x90 <_Z4tonehjm+0x90>
    {
      #if defined(TCCR0A) && defined(TCCR0B)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
  90:	14 bc       	out	0x24, r1	; 36
        TCCR0B = 0;
  92:	15 bc       	out	0x25, r1	; 37
        bitWrite(TCCR0A, WGM01, 1);
  94:	84 b5       	in	r24, 0x24	; 36
  96:	82 60       	ori	r24, 0x02	; 2
  98:	84 bd       	out	0x24, r24	; 36
        bitWrite(TCCR0B, CS00, 1);
  9a:	85 b5       	in	r24, 0x25	; 37
  9c:	81 60       	ori	r24, 0x01	; 1
  9e:	85 bd       	out	0x25, r24	; 37
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
  a0:	2a 2f       	mov	r18, r26
  a2:	30 e0       	ldi	r19, 0x00	; 0
  a4:	f9 01       	movw	r30, r18
  a6:	e0 50       	subi	r30, 0x00	; 0
  a8:	f0 40       	sbci	r31, 0x00	; 0
  aa:	e4 91       	lpm	r30, Z+
  ac:	f0 e0       	ldi	r31, 0x00	; 0
  ae:	ee 0f       	add	r30, r30
  b0:	ff 1f       	adc	r31, r31
  b2:	e0 50       	subi	r30, 0x00	; 0
  b4:	f0 40       	sbci	r31, 0x00	; 0
  b6:	85 91       	lpm	r24, Z+
  b8:	94 91       	lpm	r25, Z+
  ba:	90 93 00 00 	sts	0x0000, r25
  be:	80 93 00 00 	sts	0x0000, r24
        timer0_pin_mask = digitalPinToBitMask(_pin);
  c2:	20 50       	subi	r18, 0x00	; 0
  c4:	30 40       	sbci	r19, 0x00	; 0
  c6:	f9 01       	movw	r30, r18
  c8:	84 91       	lpm	r24, Z+
  ca:	80 93 00 00 	sts	0x0000, r24
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <_Z4tonehjm+0xd0>
      #endif

      #if defined(TCCR1A) && defined(TCCR1B) && defined(WGM12)
      case 1:
        // 16 bit timer
        TCCR1A = 0;
  d0:	10 92 80 00 	sts	0x0080, r1
        TCCR1B = 0;
  d4:	10 92 81 00 	sts	0x0081, r1
        bitWrite(TCCR1B, WGM12, 1);
  d8:	80 91 81 00 	lds	r24, 0x0081
  dc:	88 60       	ori	r24, 0x08	; 8
  de:	80 93 81 00 	sts	0x0081, r24
        bitWrite(TCCR1B, CS10, 1);
  e2:	80 91 81 00 	lds	r24, 0x0081
  e6:	81 60       	ori	r24, 0x01	; 1
  e8:	80 93 81 00 	sts	0x0081, r24
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
  ec:	2a 2f       	mov	r18, r26
  ee:	30 e0       	ldi	r19, 0x00	; 0
  f0:	f9 01       	movw	r30, r18
  f2:	e0 50       	subi	r30, 0x00	; 0
  f4:	f0 40       	sbci	r31, 0x00	; 0
  f6:	e4 91       	lpm	r30, Z+
  f8:	f0 e0       	ldi	r31, 0x00	; 0
  fa:	ee 0f       	add	r30, r30
  fc:	ff 1f       	adc	r31, r31
  fe:	e0 50       	subi	r30, 0x00	; 0
 100:	f0 40       	sbci	r31, 0x00	; 0
 102:	85 91       	lpm	r24, Z+
 104:	94 91       	lpm	r25, Z+
 106:	90 93 00 00 	sts	0x0000, r25
 10a:	80 93 00 00 	sts	0x0000, r24
        timer1_pin_mask = digitalPinToBitMask(_pin);
 10e:	20 50       	subi	r18, 0x00	; 0
 110:	30 40       	sbci	r19, 0x00	; 0
 112:	f9 01       	movw	r30, r18
 114:	84 91       	lpm	r24, Z+
 116:	80 93 00 00 	sts	0x0000, r24
 11a:	00 c0       	rjmp	.+0      	; 0x11c <_Z4tonehjm+0x11c>
      #endif

      #if defined(TCCR2A) && defined(TCCR2B)
      case 2:
        // 8 bit timer
        TCCR2A = 0;
 11c:	10 92 b0 00 	sts	0x00B0, r1
        TCCR2B = 0;
 120:	10 92 b1 00 	sts	0x00B1, r1
        bitWrite(TCCR2A, WGM21, 1);
 124:	80 91 b0 00 	lds	r24, 0x00B0
 128:	82 60       	ori	r24, 0x02	; 2
 12a:	80 93 b0 00 	sts	0x00B0, r24
        bitWrite(TCCR2B, CS20, 1);
 12e:	80 91 b1 00 	lds	r24, 0x00B1
 132:	81 60       	ori	r24, 0x01	; 1
 134:	80 93 b1 00 	sts	0x00B1, r24
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
 138:	2a 2f       	mov	r18, r26
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	f9 01       	movw	r30, r18
 13e:	e0 50       	subi	r30, 0x00	; 0
 140:	f0 40       	sbci	r31, 0x00	; 0
 142:	e4 91       	lpm	r30, Z+
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	ee 0f       	add	r30, r30
 148:	ff 1f       	adc	r31, r31
 14a:	e0 50       	subi	r30, 0x00	; 0
 14c:	f0 40       	sbci	r31, 0x00	; 0
 14e:	85 91       	lpm	r24, Z+
 150:	94 91       	lpm	r25, Z+
 152:	90 93 00 00 	sts	0x0000, r25
 156:	80 93 00 00 	sts	0x0000, r24
        timer2_pin_mask = digitalPinToBitMask(_pin);
 15a:	20 50       	subi	r18, 0x00	; 0
 15c:	30 40       	sbci	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	84 91       	lpm	r24, Z+
 162:	80 93 00 00 	sts	0x0000, r24
 166:	00 c0       	rjmp	.+0      	; 0x168 <_Z4tonehjm+0x168>
      #endif

      #if defined(TCCR3A) && defined(TCCR3B) &&  defined(TIMSK3)
      case 3:
        // 16 bit timer
        TCCR3A = 0;
 168:	10 92 90 00 	sts	0x0090, r1
        TCCR3B = 0;
 16c:	10 92 91 00 	sts	0x0091, r1
        bitWrite(TCCR3B, WGM32, 1);
 170:	80 91 91 00 	lds	r24, 0x0091
 174:	88 60       	ori	r24, 0x08	; 8
 176:	80 93 91 00 	sts	0x0091, r24
        bitWrite(TCCR3B, CS30, 1);
 17a:	80 91 91 00 	lds	r24, 0x0091
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	80 93 91 00 	sts	0x0091, r24
        timer3_pin_port = portOutputRegister(digitalPinToPort(_pin));
 184:	2a 2f       	mov	r18, r26
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	e0 50       	subi	r30, 0x00	; 0
 18c:	f0 40       	sbci	r31, 0x00	; 0
 18e:	e4 91       	lpm	r30, Z+
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	ee 0f       	add	r30, r30
 194:	ff 1f       	adc	r31, r31
 196:	e0 50       	subi	r30, 0x00	; 0
 198:	f0 40       	sbci	r31, 0x00	; 0
 19a:	85 91       	lpm	r24, Z+
 19c:	94 91       	lpm	r25, Z+
 19e:	90 93 00 00 	sts	0x0000, r25
 1a2:	80 93 00 00 	sts	0x0000, r24
        timer3_pin_mask = digitalPinToBitMask(_pin);
 1a6:	20 50       	subi	r18, 0x00	; 0
 1a8:	30 40       	sbci	r19, 0x00	; 0
 1aa:	f9 01       	movw	r30, r18
 1ac:	84 91       	lpm	r24, Z+
 1ae:	80 93 00 00 	sts	0x0000, r24
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <_Z4tonehjm+0x1b4>
      #endif

      #if defined(TCCR4A) && defined(TCCR4B) &&  defined(TIMSK4)
      case 4:
        // 16 bit timer
        TCCR4A = 0;
 1b4:	10 92 a0 00 	sts	0x00A0, r1
        TCCR4B = 0;
 1b8:	10 92 a1 00 	sts	0x00A1, r1
        #if defined(WGM42)
          bitWrite(TCCR4B, WGM42, 1);
 1bc:	80 91 a1 00 	lds	r24, 0x00A1
 1c0:	88 60       	ori	r24, 0x08	; 8
 1c2:	80 93 a1 00 	sts	0x00A1, r24
        #elif defined(CS43)
          #warning this may not be correct
          // atmega32u4
          bitWrite(TCCR4B, CS43, 1);
        #endif
        bitWrite(TCCR4B, CS40, 1);
 1c6:	80 91 a1 00 	lds	r24, 0x00A1
 1ca:	81 60       	ori	r24, 0x01	; 1
 1cc:	80 93 a1 00 	sts	0x00A1, r24
        timer4_pin_port = portOutputRegister(digitalPinToPort(_pin));
 1d0:	2a 2f       	mov	r18, r26
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	f9 01       	movw	r30, r18
 1d6:	e0 50       	subi	r30, 0x00	; 0
 1d8:	f0 40       	sbci	r31, 0x00	; 0
 1da:	e4 91       	lpm	r30, Z+
 1dc:	f0 e0       	ldi	r31, 0x00	; 0
 1de:	ee 0f       	add	r30, r30
 1e0:	ff 1f       	adc	r31, r31
 1e2:	e0 50       	subi	r30, 0x00	; 0
 1e4:	f0 40       	sbci	r31, 0x00	; 0
 1e6:	85 91       	lpm	r24, Z+
 1e8:	94 91       	lpm	r25, Z+
 1ea:	90 93 00 00 	sts	0x0000, r25
 1ee:	80 93 00 00 	sts	0x0000, r24
        timer4_pin_mask = digitalPinToBitMask(_pin);
 1f2:	20 50       	subi	r18, 0x00	; 0
 1f4:	30 40       	sbci	r19, 0x00	; 0
 1f6:	f9 01       	movw	r30, r18
 1f8:	84 91       	lpm	r24, Z+
 1fa:	80 93 00 00 	sts	0x0000, r24
 1fe:	00 c0       	rjmp	.+0      	; 0x200 <_Z4tonehjm+0x200>
      #endif

      #if defined(TCCR5A) && defined(TCCR5B) &&  defined(TIMSK5)
      case 5:
        // 16 bit timer
        TCCR5A = 0;
 200:	10 92 20 01 	sts	0x0120, r1
        TCCR5B = 0;
 204:	10 92 21 01 	sts	0x0121, r1
        bitWrite(TCCR5B, WGM52, 1);
 208:	80 91 21 01 	lds	r24, 0x0121
 20c:	88 60       	ori	r24, 0x08	; 8
 20e:	80 93 21 01 	sts	0x0121, r24
        bitWrite(TCCR5B, CS50, 1);
 212:	80 91 21 01 	lds	r24, 0x0121
 216:	81 60       	ori	r24, 0x01	; 1
 218:	80 93 21 01 	sts	0x0121, r24
        timer5_pin_port = portOutputRegister(digitalPinToPort(_pin));
 21c:	2a 2f       	mov	r18, r26
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	f9 01       	movw	r30, r18
 222:	e0 50       	subi	r30, 0x00	; 0
 224:	f0 40       	sbci	r31, 0x00	; 0
 226:	e4 91       	lpm	r30, Z+
 228:	f0 e0       	ldi	r31, 0x00	; 0
 22a:	ee 0f       	add	r30, r30
 22c:	ff 1f       	adc	r31, r31
 22e:	e0 50       	subi	r30, 0x00	; 0
 230:	f0 40       	sbci	r31, 0x00	; 0
 232:	85 91       	lpm	r24, Z+
 234:	94 91       	lpm	r25, Z+
 236:	90 93 00 00 	sts	0x0000, r25
 23a:	80 93 00 00 	sts	0x0000, r24
        timer5_pin_mask = digitalPinToBitMask(_pin);
 23e:	20 50       	subi	r18, 0x00	; 0
 240:	30 40       	sbci	r19, 0x00	; 0
 242:	f9 01       	movw	r30, r18
 244:	84 91       	lpm	r24, Z+
 246:	80 93 00 00 	sts	0x0000, r24
 24a:	00 c0       	rjmp	.+0      	; 0x24c <_Z4tonehjm+0x24c>
  uint32_t ocr = 0;
  int8_t _timer;

  _timer = toneBegin(_pin);

  if (_timer >= 0)
 24c:	57 fc       	sbrc	r5, 7
 24e:	00 c0       	rjmp	.+0      	; 0x250 <_Z4tonehjm+0x250>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
 250:	8a 2f       	mov	r24, r26
 252:	61 e0       	ldi	r22, 0x01	; 1
 254:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
 258:	55 20       	and	r5, r5
 25a:	01 f0       	breq	.+0      	; 0x25c <_Z4tonehjm+0x25c>
 25c:	f2 e0       	ldi	r31, 0x02	; 2
 25e:	5f 16       	cp	r5, r31
 260:	01 f0       	breq	.+0      	; 0x262 <_Z4tonehjm+0x262>
 262:	00 c0       	rjmp	.+0      	; 0x264 <_Z4tonehjm+0x264>
    {
      ocr = F_CPU / frequency / 2 - 1;
 264:	31 01       	movw	r6, r2
 266:	88 24       	eor	r8, r8
 268:	99 24       	eor	r9, r9
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	72 e1       	ldi	r23, 0x12	; 18
 26e:	8a e7       	ldi	r24, 0x7A	; 122
 270:	90 e0       	ldi	r25, 0x00	; 0
 272:	a4 01       	movw	r20, r8
 274:	93 01       	movw	r18, r6
 276:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 27a:	59 01       	movw	r10, r18
 27c:	6a 01       	movw	r12, r20
 27e:	86 01       	movw	r16, r12
 280:	75 01       	movw	r14, r10
 282:	08 94       	sec
 284:	e1 08       	sbc	r14, r1
 286:	f1 08       	sbc	r15, r1
 288:	01 09       	sbc	r16, r1
 28a:	11 09       	sbc	r17, r1
      prescalarbits = 0b001;  // ck/1: same for both timers
      if (ocr > 255)
 28c:	2f ef       	ldi	r18, 0xFF	; 255
 28e:	e2 16       	cp	r14, r18
 290:	f1 04       	cpc	r15, r1
 292:	01 05       	cpc	r16, r1
 294:	11 05       	cpc	r17, r1
 296:	01 f0       	breq	.+0      	; 0x298 <_Z4tonehjm+0x298>
 298:	00 f4       	brcc	.+0      	; 0x29a <_Z4tonehjm+0x29a>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <_Z4tonehjm+0x29c>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
 29c:	60 e4       	ldi	r22, 0x40	; 64
 29e:	72 e4       	ldi	r23, 0x42	; 66
 2a0:	8f e0       	ldi	r24, 0x0F	; 15
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	a4 01       	movw	r20, r8
 2a6:	93 01       	movw	r18, r6
 2a8:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 2ac:	79 01       	movw	r14, r18
 2ae:	8a 01       	movw	r16, r20
 2b0:	08 94       	sec
 2b2:	e1 08       	sbc	r14, r1
 2b4:	f1 08       	sbc	r15, r1
 2b6:	01 09       	sbc	r16, r1
 2b8:	11 09       	sbc	r17, r1
        prescalarbits = 0b010;  // ck/8: same for both timers

        if (_timer == 2 && ocr > 255)
 2ba:	82 e0       	ldi	r24, 0x02	; 2
 2bc:	58 16       	cp	r5, r24
 2be:	01 f4       	brne	.+0      	; 0x2c0 <_Z4tonehjm+0x2c0>
 2c0:	9f ef       	ldi	r25, 0xFF	; 255
 2c2:	e9 16       	cp	r14, r25
 2c4:	f1 04       	cpc	r15, r1
 2c6:	01 05       	cpc	r16, r1
 2c8:	11 05       	cpc	r17, r1
 2ca:	01 f0       	breq	.+0      	; 0x2cc <_Z4tonehjm+0x2cc>
 2cc:	00 f4       	brcc	.+0      	; 0x2ce <_Z4tonehjm+0x2ce>
 2ce:	00 c0       	rjmp	.+0      	; 0x2d0 <_Z4tonehjm+0x2d0>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
 2d0:	60 e9       	ldi	r22, 0x90	; 144
 2d2:	70 ed       	ldi	r23, 0xD0	; 208
 2d4:	83 e0       	ldi	r24, 0x03	; 3
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	a4 01       	movw	r20, r8
 2da:	93 01       	movw	r18, r6
 2dc:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 2e0:	79 01       	movw	r14, r18
 2e2:	8a 01       	movw	r16, r20
 2e4:	08 94       	sec
 2e6:	e1 08       	sbc	r14, r1
 2e8:	f1 08       	sbc	r15, r1
 2ea:	01 09       	sbc	r16, r1
 2ec:	11 09       	sbc	r17, r1
 2ee:	83 e0       	ldi	r24, 0x03	; 3
          prescalarbits = 0b011;
        }

        if (ocr > 255)
 2f0:	af ef       	ldi	r26, 0xFF	; 255
 2f2:	ea 16       	cp	r14, r26
 2f4:	f1 04       	cpc	r15, r1
 2f6:	01 05       	cpc	r16, r1
 2f8:	11 05       	cpc	r17, r1
 2fa:	01 f0       	breq	.+0      	; 0x2fc <_Z4tonehjm+0x2fc>
 2fc:	00 f4       	brcc	.+0      	; 0x2fe <_Z4tonehjm+0x2fe>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <_Z4tonehjm+0x300>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
 300:	68 e4       	ldi	r22, 0x48	; 72
 302:	78 ee       	ldi	r23, 0xE8	; 232
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	a4 01       	movw	r20, r8
 30a:	93 01       	movw	r18, r6
 30c:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 310:	79 01       	movw	r14, r18
 312:	8a 01       	movw	r16, r20
 314:	08 94       	sec
 316:	e1 08       	sbc	r14, r1
 318:	f1 08       	sbc	r15, r1
 31a:	01 09       	sbc	r16, r1
 31c:	11 09       	sbc	r17, r1
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
 31e:	55 20       	and	r5, r5
 320:	01 f4       	brne	.+0      	; 0x322 <_Z4tonehjm+0x322>
 322:	83 e0       	ldi	r24, 0x03	; 3
 324:	00 c0       	rjmp	.+0      	; 0x326 <_Z4tonehjm+0x326>

          if (_timer == 2 && ocr > 255)
 326:	b2 e0       	ldi	r27, 0x02	; 2
 328:	5b 16       	cp	r5, r27
 32a:	01 f0       	breq	.+0      	; 0x32c <_Z4tonehjm+0x32c>
 32c:	84 e0       	ldi	r24, 0x04	; 4
 32e:	00 c0       	rjmp	.+0      	; 0x330 <_Z4tonehjm+0x330>
 330:	ef ef       	ldi	r30, 0xFF	; 255
 332:	ee 16       	cp	r14, r30
 334:	f1 04       	cpc	r15, r1
 336:	01 05       	cpc	r16, r1
 338:	11 05       	cpc	r17, r1
 33a:	01 f0       	breq	.+0      	; 0x33c <_Z4tonehjm+0x33c>
 33c:	00 f4       	brcc	.+0      	; 0x33e <_Z4tonehjm+0x33e>
 33e:	00 c0       	rjmp	.+0      	; 0x340 <_Z4tonehjm+0x340>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
 340:	64 e2       	ldi	r22, 0x24	; 36
 342:	74 ef       	ldi	r23, 0xF4	; 244
 344:	80 e0       	ldi	r24, 0x00	; 0
 346:	90 e0       	ldi	r25, 0x00	; 0
 348:	a4 01       	movw	r20, r8
 34a:	93 01       	movw	r18, r6
 34c:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 350:	79 01       	movw	r14, r18
 352:	8a 01       	movw	r16, r20
 354:	08 94       	sec
 356:	e1 08       	sbc	r14, r1
 358:	f1 08       	sbc	r15, r1
 35a:	01 09       	sbc	r16, r1
 35c:	11 09       	sbc	r17, r1
 35e:	85 e0       	ldi	r24, 0x05	; 5
            prescalarbits = 0b101;
          }

          if (ocr > 255)
 360:	ff ef       	ldi	r31, 0xFF	; 255
 362:	ef 16       	cp	r14, r31
 364:	f1 04       	cpc	r15, r1
 366:	01 05       	cpc	r16, r1
 368:	11 05       	cpc	r17, r1
 36a:	01 f0       	breq	.+0      	; 0x36c <_Z4tonehjm+0x36c>
 36c:	00 f0       	brcs	.+0      	; 0x36e <_Z4tonehjm+0x36e>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
 36e:	62 e1       	ldi	r22, 0x12	; 18
 370:	7a e7       	ldi	r23, 0x7A	; 122
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	a4 01       	movw	r20, r8
 378:	93 01       	movw	r18, r6
 37a:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 37e:	79 01       	movw	r14, r18
 380:	8a 01       	movw	r16, r20
 382:	08 94       	sec
 384:	e1 08       	sbc	r14, r1
 386:	f1 08       	sbc	r15, r1
 388:	01 09       	sbc	r16, r1
 38a:	11 09       	sbc	r17, r1
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
 38c:	55 20       	and	r5, r5
 38e:	01 f0       	breq	.+0      	; 0x390 <_Z4tonehjm+0x390>
 390:	86 e0       	ldi	r24, 0x06	; 6
 392:	00 c0       	rjmp	.+0      	; 0x394 <_Z4tonehjm+0x394>
 394:	84 e0       	ldi	r24, 0x04	; 4
            if (ocr > 255)
 396:	2f ef       	ldi	r18, 0xFF	; 255
 398:	e2 16       	cp	r14, r18
 39a:	f1 04       	cpc	r15, r1
 39c:	01 05       	cpc	r16, r1
 39e:	11 05       	cpc	r17, r1
 3a0:	01 f0       	breq	.+0      	; 0x3a2 <_Z4tonehjm+0x3a2>
 3a2:	00 f0       	brcs	.+0      	; 0x3a4 <_Z4tonehjm+0x3a4>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
 3a4:	86 01       	movw	r16, r12
 3a6:	75 01       	movw	r14, r10
 3a8:	9a e0       	ldi	r25, 0x0A	; 10
 3aa:	16 95       	lsr	r17
 3ac:	07 95       	ror	r16
 3ae:	f7 94       	ror	r15
 3b0:	e7 94       	ror	r14
 3b2:	9a 95       	dec	r25
 3b4:	01 f4       	brne	.+0      	; 0x3b6 <_Z4tonehjm+0x3b6>
 3b6:	08 94       	sec
 3b8:	e1 08       	sbc	r14, r1
 3ba:	f1 08       	sbc	r15, r1
 3bc:	01 09       	sbc	r16, r1
 3be:	11 09       	sbc	r17, r1
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
 3c0:	55 20       	and	r5, r5
 3c2:	01 f0       	breq	.+0      	; 0x3c4 <_Z4tonehjm+0x3c4>
 3c4:	87 e0       	ldi	r24, 0x07	; 7
 3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <_Z4tonehjm+0x3c8>
 3c8:	85 e0       	ldi	r24, 0x05	; 5
 3ca:	00 c0       	rjmp	.+0      	; 0x3cc <_Z4tonehjm+0x3cc>
 3cc:	81 e0       	ldi	r24, 0x01	; 1
          }
        }
      }

#if defined(TCCR0B)
      if (_timer == 0)
 3ce:	55 20       	and	r5, r5
 3d0:	01 f4       	brne	.+0      	; 0x3d2 <_Z4tonehjm+0x3d2>
      {
        TCCR0B = prescalarbits;
 3d2:	85 bd       	out	0x25, r24	; 37
 3d4:	00 c0       	rjmp	.+0      	; 0x3d6 <_Z4tonehjm+0x3d6>
 3d6:	82 e0       	ldi	r24, 0x02	; 2
      }
      else
#endif
#if defined(TCCR2B)
      {
        TCCR2B = prescalarbits;
 3d8:	80 93 b1 00 	sts	0x00B1, r24
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <_Z4tonehjm+0x3de>
#endif
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
 3de:	51 01       	movw	r10, r2
 3e0:	cc 24       	eor	r12, r12
 3e2:	dd 24       	eor	r13, r13
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	72 e1       	ldi	r23, 0x12	; 18
 3e8:	8a e7       	ldi	r24, 0x7A	; 122
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a6 01       	movw	r20, r12
 3ee:	95 01       	movw	r18, r10
 3f0:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 3f4:	79 01       	movw	r14, r18
 3f6:	8a 01       	movw	r16, r20
 3f8:	08 94       	sec
 3fa:	e1 08       	sbc	r14, r1
 3fc:	f1 08       	sbc	r15, r1
 3fe:	01 09       	sbc	r16, r1
 400:	11 09       	sbc	r17, r1

      prescalarbits = 0b001;
      if (ocr > 0xffff)
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	e8 16       	cp	r14, r24
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	f8 06       	cpc	r15, r24
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	08 07       	cpc	r16, r24
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	18 07       	cpc	r17, r24
 412:	00 f4       	brcc	.+0      	; 0x414 <_Z4tonehjm+0x414>
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	00 c0       	rjmp	.+0      	; 0x418 <_Z4tonehjm+0x418>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
 418:	68 e4       	ldi	r22, 0x48	; 72
 41a:	78 ee       	ldi	r23, 0xE8	; 232
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	a6 01       	movw	r20, r12
 422:	95 01       	movw	r18, r10
 424:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 428:	79 01       	movw	r14, r18
 42a:	8a 01       	movw	r16, r20
 42c:	08 94       	sec
 42e:	e1 08       	sbc	r14, r1
 430:	f1 08       	sbc	r15, r1
 432:	01 09       	sbc	r16, r1
 434:	11 09       	sbc	r17, r1
 436:	93 e0       	ldi	r25, 0x03	; 3
        prescalarbits = 0b011;
      }

      if (_timer == 1)
 438:	a1 e0       	ldi	r26, 0x01	; 1
 43a:	5a 16       	cp	r5, r26
 43c:	01 f4       	brne	.+0      	; 0x43e <_Z4tonehjm+0x43e>
      {
#if defined(TCCR1B)
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
 43e:	80 91 81 00 	lds	r24, 0x0081
 442:	88 7f       	andi	r24, 0xF8	; 248
 444:	98 2b       	or	r25, r24
 446:	90 93 81 00 	sts	0x0081, r25
 44a:	00 c0       	rjmp	.+0      	; 0x44c <_Z4tonehjm+0x44c>
#endif
      }
#if defined(TCCR3B)
      else if (_timer == 3)
 44c:	b3 e0       	ldi	r27, 0x03	; 3
 44e:	5b 16       	cp	r5, r27
 450:	01 f4       	brne	.+0      	; 0x452 <_Z4tonehjm+0x452>
        TCCR3B = (TCCR3B & 0b11111000) | prescalarbits;
 452:	80 91 91 00 	lds	r24, 0x0091
 456:	88 7f       	andi	r24, 0xF8	; 248
 458:	98 2b       	or	r25, r24
 45a:	90 93 91 00 	sts	0x0091, r25
 45e:	00 c0       	rjmp	.+0      	; 0x460 <_Z4tonehjm+0x460>
#endif
#if defined(TCCR4B)
      else if (_timer == 4)
 460:	e4 e0       	ldi	r30, 0x04	; 4
 462:	5e 16       	cp	r5, r30
 464:	01 f4       	brne	.+0      	; 0x466 <_Z4tonehjm+0x466>
        TCCR4B = (TCCR4B & 0b11111000) | prescalarbits;
 466:	80 91 a1 00 	lds	r24, 0x00A1
 46a:	88 7f       	andi	r24, 0xF8	; 248
 46c:	98 2b       	or	r25, r24
 46e:	90 93 a1 00 	sts	0x00A1, r25
 472:	00 c0       	rjmp	.+0      	; 0x474 <_Z4tonehjm+0x474>
#endif
#if defined(TCCR5B)
      else if (_timer == 5)
 474:	f5 e0       	ldi	r31, 0x05	; 5
 476:	5f 16       	cp	r5, r31
 478:	01 f4       	brne	.+0      	; 0x47a <_Z4tonehjm+0x47a>
        TCCR5B = (TCCR5B & 0b11111000) | prescalarbits;
 47a:	80 91 21 01 	lds	r24, 0x0121
 47e:	88 7f       	andi	r24, 0xF8	; 248
 480:	98 2b       	or	r25, r24
 482:	90 93 21 01 	sts	0x0121, r25

    }
    

    // Calculate the toggle count
    if (duration > 0)
 486:	89 81       	ldd	r24, Y+1	; 0x01
 488:	9a 81       	ldd	r25, Y+2	; 0x02
 48a:	ab 81       	ldd	r26, Y+3	; 0x03
 48c:	bc 81       	ldd	r27, Y+4	; 0x04
 48e:	00 97       	sbiw	r24, 0x00	; 0
 490:	a1 05       	cpc	r26, r1
 492:	b1 05       	cpc	r27, r1
 494:	01 f4       	brne	.+0      	; 0x496 <_Z4tonehjm+0x496>
 496:	8f ef       	ldi	r24, 0xFF	; 255
 498:	9f ef       	ldi	r25, 0xFF	; 255
 49a:	af ef       	ldi	r26, 0xFF	; 255
 49c:	bf ef       	ldi	r27, 0xFF	; 255
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <_Z4tonehjm+0x4a0>
    {
      toggle_count = 2 * frequency * duration / 1000;
 4a0:	22 0c       	add	r2, r2
 4a2:	33 1c       	adc	r3, r3
 4a4:	b1 01       	movw	r22, r2
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	90 e0       	ldi	r25, 0x00	; 0
 4aa:	29 81       	ldd	r18, Y+1	; 0x01
 4ac:	3a 81       	ldd	r19, Y+2	; 0x02
 4ae:	4b 81       	ldd	r20, Y+3	; 0x03
 4b0:	5c 81       	ldd	r21, Y+4	; 0x04
 4b2:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 4b6:	28 ee       	ldi	r18, 0xE8	; 232
 4b8:	33 e0       	ldi	r19, 0x03	; 3
 4ba:	40 e0       	ldi	r20, 0x00	; 0
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	0e 94 00 00 	call	0	; 0x0 <_Z4tonehjm>
 4c2:	c9 01       	movw	r24, r18
 4c4:	da 01       	movw	r26, r20
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
 4c6:	e2 e0       	ldi	r30, 0x02	; 2
 4c8:	5e 16       	cp	r5, r30
 4ca:	01 f0       	breq	.+0      	; 0x4cc <_Z4tonehjm+0x4cc>
 4cc:	e5 15       	cp	r30, r5
 4ce:	04 f0       	brlt	.+0      	; 0x4d0 <_Z4tonehjm+0x4d0>
 4d0:	55 20       	and	r5, r5
 4d2:	01 f0       	breq	.+0      	; 0x4d4 <_Z4tonehjm+0x4d4>
 4d4:	f1 e0       	ldi	r31, 0x01	; 1
 4d6:	5f 16       	cp	r5, r31
 4d8:	01 f0       	breq	.+0      	; 0x4da <_Z4tonehjm+0x4da>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <_Z4tonehjm+0x4dc>
 4dc:	00 c0       	rjmp	.+0      	; 0x4de <_Z4tonehjm+0x4de>
 4de:	24 e0       	ldi	r18, 0x04	; 4
 4e0:	52 16       	cp	r5, r18
 4e2:	01 f4       	brne	.+0      	; 0x4e4 <_Z4tonehjm+0x4e4>
 4e4:	00 c0       	rjmp	.+0      	; 0x4e6 <_Z4tonehjm+0x4e6>
 4e6:	52 16       	cp	r5, r18
 4e8:	04 f0       	brlt	.+0      	; 0x4ea <_Z4tonehjm+0x4ea>
 4ea:	e5 e0       	ldi	r30, 0x05	; 5
 4ec:	5e 16       	cp	r5, r30
 4ee:	01 f0       	breq	.+0      	; 0x4f0 <_Z4tonehjm+0x4f0>
 4f0:	00 c0       	rjmp	.+0      	; 0x4f2 <_Z4tonehjm+0x4f2>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <_Z4tonehjm+0x4f4>
    {

#if defined(OCR0A) && defined(TIMSK0) && defined(OCIE0A)
      case 0:
        OCR0A = ocr;
 4f4:	e7 bc       	out	0x27, r14	; 39
        timer0_toggle_count = toggle_count;
 4f6:	80 93 00 00 	sts	0x0000, r24
 4fa:	90 93 00 00 	sts	0x0000, r25
 4fe:	a0 93 00 00 	sts	0x0000, r26
 502:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK0, OCIE0A, 1);
 506:	80 91 6e 00 	lds	r24, 0x006E
 50a:	82 60       	ori	r24, 0x02	; 2
 50c:	80 93 6e 00 	sts	0x006E, r24
 510:	00 c0       	rjmp	.+0      	; 0x512 <_Z4tonehjm+0x512>
        break;
#endif

      case 1:
#if defined(OCR1A) && defined(TIMSK1) && defined(OCIE1A)
        OCR1A = ocr;
 512:	f0 92 89 00 	sts	0x0089, r15
 516:	e0 92 88 00 	sts	0x0088, r14
        timer1_toggle_count = toggle_count;
 51a:	80 93 00 00 	sts	0x0000, r24
 51e:	90 93 00 00 	sts	0x0000, r25
 522:	a0 93 00 00 	sts	0x0000, r26
 526:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK1, OCIE1A, 1);
 52a:	80 91 6f 00 	lds	r24, 0x006F
 52e:	82 60       	ori	r24, 0x02	; 2
 530:	80 93 6f 00 	sts	0x006F, r24
 534:	00 c0       	rjmp	.+0      	; 0x536 <_Z4tonehjm+0x536>
#endif
        break;

#if defined(OCR2A) && defined(TIMSK2) && defined(OCIE2A)
      case 2:
        OCR2A = ocr;
 536:	e0 92 b3 00 	sts	0x00B3, r14
        timer2_toggle_count = toggle_count;
 53a:	80 93 00 00 	sts	0x0000, r24
 53e:	90 93 00 00 	sts	0x0000, r25
 542:	a0 93 00 00 	sts	0x0000, r26
 546:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK2, OCIE2A, 1);
 54a:	80 91 70 00 	lds	r24, 0x0070
 54e:	82 60       	ori	r24, 0x02	; 2
 550:	80 93 70 00 	sts	0x0070, r24
 554:	00 c0       	rjmp	.+0      	; 0x556 <_Z4tonehjm+0x556>
        break;
#endif

#if defined(TIMSK3)
      case 3:
        OCR3A = ocr;
 556:	f0 92 99 00 	sts	0x0099, r15
 55a:	e0 92 98 00 	sts	0x0098, r14
        timer3_toggle_count = toggle_count;
 55e:	80 93 00 00 	sts	0x0000, r24
 562:	90 93 00 00 	sts	0x0000, r25
 566:	a0 93 00 00 	sts	0x0000, r26
 56a:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK3, OCIE3A, 1);
 56e:	80 91 71 00 	lds	r24, 0x0071
 572:	82 60       	ori	r24, 0x02	; 2
 574:	80 93 71 00 	sts	0x0071, r24
 578:	00 c0       	rjmp	.+0      	; 0x57a <_Z4tonehjm+0x57a>
        break;
#endif

#if defined(TIMSK4)
      case 4:
        OCR4A = ocr;
 57a:	f0 92 a9 00 	sts	0x00A9, r15
 57e:	e0 92 a8 00 	sts	0x00A8, r14
        timer4_toggle_count = toggle_count;
 582:	80 93 00 00 	sts	0x0000, r24
 586:	90 93 00 00 	sts	0x0000, r25
 58a:	a0 93 00 00 	sts	0x0000, r26
 58e:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK4, OCIE4A, 1);
 592:	80 91 72 00 	lds	r24, 0x0072
 596:	82 60       	ori	r24, 0x02	; 2
 598:	80 93 72 00 	sts	0x0072, r24
 59c:	00 c0       	rjmp	.+0      	; 0x59e <_Z4tonehjm+0x59e>
        break;
#endif

#if defined(OCR5A) && defined(TIMSK5) && defined(OCIE5A)
      case 5:
        OCR5A = ocr;
 59e:	f0 92 29 01 	sts	0x0129, r15
 5a2:	e0 92 28 01 	sts	0x0128, r14
        timer5_toggle_count = toggle_count;
 5a6:	80 93 00 00 	sts	0x0000, r24
 5aa:	90 93 00 00 	sts	0x0000, r25
 5ae:	a0 93 00 00 	sts	0x0000, r26
 5b2:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK5, OCIE5A, 1);
 5b6:	80 91 73 00 	lds	r24, 0x0073
 5ba:	82 60       	ori	r24, 0x02	; 2
 5bc:	80 93 73 00 	sts	0x0073, r24
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <_Z4tonehjm+0x5c2>
        break;
#endif

    }
  }
}
 5c2:	84 e0       	ldi	r24, 0x04	; 4
 5c4:	00 c0       	rjmp	.+0      	; 0x5c6 <_Z4tonehjm+0x5c6>
 5c6:	0f 90       	pop	r0
 5c8:	0f 90       	pop	r0
 5ca:	0f 90       	pop	r0
 5cc:	0f 90       	pop	r0
 5ce:	cf 91       	pop	r28
 5d0:	df 91       	pop	r29
 5d2:	1f 91       	pop	r17
 5d4:	0f 91       	pop	r16
 5d6:	ff 90       	pop	r15
 5d8:	ef 90       	pop	r14
 5da:	df 90       	pop	r13
 5dc:	cf 90       	pop	r12
 5de:	bf 90       	pop	r11
 5e0:	af 90       	pop	r10
 5e2:	9f 90       	pop	r9
 5e4:	8f 90       	pop	r8
 5e6:	7f 90       	pop	r7
 5e8:	6f 90       	pop	r6
 5ea:	5f 90       	pop	r5
 5ec:	3f 90       	pop	r3
 5ee:	2f 90       	pop	r2
 5f0:	08 95       	ret

USBCore.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 00000063  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000195  00000000  00000000  00000097  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000000c1  00000000  00000000  0000022c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_str    000000ec  00000000  00000000  000002ed  2**0
                  CONTENTS, READONLY, DEBUGGING

WInterrupts.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 000000fc  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002cf  00000000  00000000  00000130  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000389  00000000  00000000  000003ff  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.attachInterrupt 000000f8  00000000  00000000  00000788  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.detachInterrupt 00000058  00000000  00000000  00000880  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.__vector_1 00000062  00000000  00000000  000008d8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.__vector_2 00000062  00000000  00000000  0000093a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.__vector_3 00000062  00000000  00000000  0000099c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.__vector_4 00000062  00000000  00000000  000009fe  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text.__vector_5 00000062  00000000  00000000  00000a60  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text.__vector_6 00000062  00000000  00000000  00000ac2  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text.__vector_7 00000062  00000000  00000000  00000b24  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text.__vector_8 00000062  00000000  00000000  00000b86  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .bss.intFunc  00000010  00000000  00000000  00000be8  2**0
                  ALLOC
 17 .debug_frame  000000b0  00000000  00000000  00000be8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 18 .debug_loc    00000093  00000000  00000000  00000c98  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 19 .debug_pubnames 000000b2  00000000  00000000  00000d2b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 20 .debug_aranges 00000068  00000000  00000000  00000ddd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 21 .debug_ranges 00000060  00000000  00000000  00000e45  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 22 .debug_str    00000175  00000000  00000000  00000ea5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.attachInterrupt:

00000000 <attachInterrupt>:

static volatile voidFuncPtr intFunc[EXTERNAL_NUM_INTERRUPTS];
// volatile static voidFuncPtr twiIntFunc;

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
   0:	88 30       	cpi	r24, 0x08	; 8
   2:	00 f0       	brcs	.+0      	; 0x4 <attachInterrupt+0x4>
   4:	00 c0       	rjmp	.+0      	; 0x6 <attachInterrupt+0x6>
    intFunc[interruptNum] = userFunc;
   6:	e8 2f       	mov	r30, r24
   8:	f0 e0       	ldi	r31, 0x00	; 0
   a:	ee 0f       	add	r30, r30
   c:	ff 1f       	adc	r31, r31
   e:	e0 50       	subi	r30, 0x00	; 0
  10:	f0 40       	sbci	r31, 0x00	; 0
  12:	71 83       	std	Z+1, r23	; 0x01
  14:	60 83       	st	Z, r22
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
  16:	83 30       	cpi	r24, 0x03	; 3
  18:	01 f0       	breq	.+0      	; 0x1a <attachInterrupt+0x1a>
  1a:	84 30       	cpi	r24, 0x04	; 4
  1c:	00 f4       	brcc	.+0      	; 0x1e <attachInterrupt+0x1e>
  1e:	81 30       	cpi	r24, 0x01	; 1
  20:	01 f4       	brne	.+0      	; 0x22 <attachInterrupt+0x22>
  22:	00 c0       	rjmp	.+0      	; 0x24 <attachInterrupt+0x24>
  24:	82 30       	cpi	r24, 0x02	; 2
  26:	00 f4       	brcc	.+0      	; 0x28 <attachInterrupt+0x28>
  28:	00 c0       	rjmp	.+0      	; 0x2a <attachInterrupt+0x2a>
  2a:	85 30       	cpi	r24, 0x05	; 5
  2c:	01 f0       	breq	.+0      	; 0x2e <attachInterrupt+0x2e>
  2e:	85 30       	cpi	r24, 0x05	; 5
  30:	00 f0       	brcs	.+0      	; 0x32 <attachInterrupt+0x32>
  32:	86 30       	cpi	r24, 0x06	; 6
  34:	01 f4       	brne	.+0      	; 0x36 <attachInterrupt+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <attachInterrupt+0x38>
  38:	87 30       	cpi	r24, 0x07	; 7
  3a:	01 f0       	breq	.+0      	; 0x3c <attachInterrupt+0x3c>
  3c:	00 c0       	rjmp	.+0      	; 0x3e <attachInterrupt+0x3e>
  3e:	00 c0       	rjmp	.+0      	; 0x40 <attachInterrupt+0x40>
		EICRA = (EICRA & ~((1<<ISC10) | (1<<ISC11))) | (mode << ISC10);
		EIMSK |= (1<<INT1);
		break;	
#elif defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
  40:	80 91 69 00 	lds	r24, 0x0069
  44:	8c 7f       	andi	r24, 0xFC	; 252
  46:	84 2b       	or	r24, r20
  48:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT0);
  4c:	e8 9a       	sbi	0x1d, 0	; 29
  4e:	08 95       	ret
      break;
    case 3:
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
  50:	80 91 69 00 	lds	r24, 0x0069
  54:	44 0f       	add	r20, r20
  56:	55 1f       	adc	r21, r21
  58:	44 0f       	add	r20, r20
  5a:	55 1f       	adc	r21, r21
  5c:	83 7f       	andi	r24, 0xF3	; 243
  5e:	84 2b       	or	r24, r20
  60:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT1);
  64:	e9 9a       	sbi	0x1d, 1	; 29
  66:	08 95       	ret
      break;
    case 4:
      EICRA = (EICRA & ~((1 << ISC20) | (1 << ISC21))) | (mode << ISC20);
  68:	80 91 69 00 	lds	r24, 0x0069
  6c:	74 e0       	ldi	r23, 0x04	; 4
  6e:	44 0f       	add	r20, r20
  70:	55 1f       	adc	r21, r21
  72:	7a 95       	dec	r23
  74:	01 f4       	brne	.+0      	; 0x76 <attachInterrupt+0x76>
  76:	8f 7c       	andi	r24, 0xCF	; 207
  78:	84 2b       	or	r24, r20
  7a:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT2);
  7e:	ea 9a       	sbi	0x1d, 2	; 29
  80:	08 95       	ret
      break;
    case 5:
      EICRA = (EICRA & ~((1 << ISC30) | (1 << ISC31))) | (mode << ISC30);
  82:	80 91 69 00 	lds	r24, 0x0069
  86:	66 e0       	ldi	r22, 0x06	; 6
  88:	44 0f       	add	r20, r20
  8a:	55 1f       	adc	r21, r21
  8c:	6a 95       	dec	r22
  8e:	01 f4       	brne	.+0      	; 0x90 <attachInterrupt+0x90>
  90:	8f 73       	andi	r24, 0x3F	; 63
  92:	84 2b       	or	r24, r20
  94:	80 93 69 00 	sts	0x0069, r24
      EIMSK |= (1 << INT3);
  98:	eb 9a       	sbi	0x1d, 3	; 29
  9a:	08 95       	ret
      break;
    case 0:
      EICRB = (EICRB & ~((1 << ISC40) | (1 << ISC41))) | (mode << ISC40);
  9c:	80 91 6a 00 	lds	r24, 0x006A
  a0:	8c 7f       	andi	r24, 0xFC	; 252
  a2:	84 2b       	or	r24, r20
  a4:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT4);
  a8:	ec 9a       	sbi	0x1d, 4	; 29
  aa:	08 95       	ret
      break;
    case 1:
      EICRB = (EICRB & ~((1 << ISC50) | (1 << ISC51))) | (mode << ISC50);
  ac:	80 91 6a 00 	lds	r24, 0x006A
  b0:	44 0f       	add	r20, r20
  b2:	55 1f       	adc	r21, r21
  b4:	44 0f       	add	r20, r20
  b6:	55 1f       	adc	r21, r21
  b8:	83 7f       	andi	r24, 0xF3	; 243
  ba:	84 2b       	or	r24, r20
  bc:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT5);
  c0:	ed 9a       	sbi	0x1d, 5	; 29
  c2:	08 95       	ret
      break;
    case 6:
      EICRB = (EICRB & ~((1 << ISC60) | (1 << ISC61))) | (mode << ISC60);
  c4:	80 91 6a 00 	lds	r24, 0x006A
  c8:	24 e0       	ldi	r18, 0x04	; 4
  ca:	44 0f       	add	r20, r20
  cc:	55 1f       	adc	r21, r21
  ce:	2a 95       	dec	r18
  d0:	01 f4       	brne	.+0      	; 0xd2 <attachInterrupt+0xd2>
  d2:	8f 7c       	andi	r24, 0xCF	; 207
  d4:	84 2b       	or	r24, r20
  d6:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT6);
  da:	ee 9a       	sbi	0x1d, 6	; 29
  dc:	08 95       	ret
      break;
    case 7:
      EICRB = (EICRB & ~((1 << ISC70) | (1 << ISC71))) | (mode << ISC70);
  de:	80 91 6a 00 	lds	r24, 0x006A
  e2:	96 e0       	ldi	r25, 0x06	; 6
  e4:	44 0f       	add	r20, r20
  e6:	55 1f       	adc	r21, r21
  e8:	9a 95       	dec	r25
  ea:	01 f4       	brne	.+0      	; 0xec <attachInterrupt+0xec>
  ec:	8f 73       	andi	r24, 0x3F	; 63
  ee:	84 2b       	or	r24, r20
  f0:	80 93 6a 00 	sts	0x006A, r24
      EIMSK |= (1 << INT7);
  f4:	ef 9a       	sbi	0x1d, 7	; 29
  f6:	08 95       	ret

Disassembly of section .text.detachInterrupt:

00000000 <detachInterrupt>:
    }
  }
}

void detachInterrupt(uint8_t interruptNum) {
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
   0:	88 30       	cpi	r24, 0x08	; 8
   2:	00 f4       	brcc	.+0      	; 0x4 <detachInterrupt+0x4>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
   4:	83 30       	cpi	r24, 0x03	; 3
   6:	01 f0       	breq	.+0      	; 0x8 <detachInterrupt+0x8>
   8:	84 30       	cpi	r24, 0x04	; 4
   a:	00 f4       	brcc	.+0      	; 0xc <detachInterrupt+0xc>
   c:	81 30       	cpi	r24, 0x01	; 1
   e:	01 f0       	breq	.+0      	; 0x10 <detachInterrupt+0x10>
  10:	82 30       	cpi	r24, 0x02	; 2
  12:	00 f4       	brcc	.+0      	; 0x14 <detachInterrupt+0x14>
  14:	00 c0       	rjmp	.+0      	; 0x16 <detachInterrupt+0x16>
  16:	85 30       	cpi	r24, 0x05	; 5
  18:	01 f0       	breq	.+0      	; 0x1a <detachInterrupt+0x1a>
  1a:	85 30       	cpi	r24, 0x05	; 5
  1c:	00 f0       	brcs	.+0      	; 0x1e <detachInterrupt+0x1e>
  1e:	86 30       	cpi	r24, 0x06	; 6
  20:	01 f0       	breq	.+0      	; 0x22 <detachInterrupt+0x22>
  22:	87 30       	cpi	r24, 0x07	; 7
  24:	01 f4       	brne	.+0      	; 0x26 <detachInterrupt+0x26>
  26:	00 c0       	rjmp	.+0      	; 0x28 <detachInterrupt+0x28>
	case 1:
		EIMSK &= ~(1<<INT1);
		break;		
#elif defined(EICRA) && defined(EICRB) && defined(EIMSK)
    case 2:
      EIMSK &= ~(1 << INT0);
  28:	e8 98       	cbi	0x1d, 0	; 29
  2a:	00 c0       	rjmp	.+0      	; 0x2c <detachInterrupt+0x2c>
      break;
    case 3:
      EIMSK &= ~(1 << INT1);
  2c:	e9 98       	cbi	0x1d, 1	; 29
  2e:	00 c0       	rjmp	.+0      	; 0x30 <detachInterrupt+0x30>
      break;
    case 4:
      EIMSK &= ~(1 << INT2);
  30:	ea 98       	cbi	0x1d, 2	; 29
  32:	00 c0       	rjmp	.+0      	; 0x34 <detachInterrupt+0x34>
      break;
    case 5:
      EIMSK &= ~(1 << INT3);
  34:	eb 98       	cbi	0x1d, 3	; 29
  36:	00 c0       	rjmp	.+0      	; 0x38 <detachInterrupt+0x38>
      break;
    case 0:
      EIMSK &= ~(1 << INT4);
  38:	ec 98       	cbi	0x1d, 4	; 29
  3a:	00 c0       	rjmp	.+0      	; 0x3c <detachInterrupt+0x3c>
      break;
    case 1:
      EIMSK &= ~(1 << INT5);
  3c:	ed 98       	cbi	0x1d, 5	; 29
  3e:	00 c0       	rjmp	.+0      	; 0x40 <detachInterrupt+0x40>
      break;
    case 6:
      EIMSK &= ~(1 << INT6);
  40:	ee 98       	cbi	0x1d, 6	; 29
  42:	00 c0       	rjmp	.+0      	; 0x44 <detachInterrupt+0x44>
      break;
    case 7:
      EIMSK &= ~(1 << INT7);
  44:	ef 98       	cbi	0x1d, 7	; 29
    #endif
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
  46:	e8 2f       	mov	r30, r24
  48:	f0 e0       	ldi	r31, 0x00	; 0
  4a:	ee 0f       	add	r30, r30
  4c:	ff 1f       	adc	r31, r31
  4e:	e0 50       	subi	r30, 0x00	; 0
  50:	f0 40       	sbci	r31, 0x00	; 0
  52:	11 82       	std	Z+1, r1	; 0x01
  54:	10 82       	st	Z, r1
  56:	08 95       	ret

Disassembly of section .text.__vector_1:

00000000 <__vector_1>:
		intFunc[EXTERNAL_INT_1]();
}

#elif defined(EICRA) && defined(EICRB)

SIGNAL(INT0_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_2])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	89 2b       	or	r24, r25
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_1+0x32>
    intFunc[EXTERNAL_INT_2]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_2:

00000000 <__vector_2>:

SIGNAL(INT1_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_3])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	89 2b       	or	r24, r25
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_2+0x32>
    intFunc[EXTERNAL_INT_3]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_3:

00000000 <__vector_3>:

SIGNAL(INT2_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_4])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	89 2b       	or	r24, r25
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_3+0x32>
    intFunc[EXTERNAL_INT_4]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_4:

00000000 <__vector_4>:

SIGNAL(INT3_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_5])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	89 2b       	or	r24, r25
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_4+0x32>
    intFunc[EXTERNAL_INT_5]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_5:

00000000 <__vector_5>:

SIGNAL(INT4_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_0])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	89 2b       	or	r24, r25
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_5+0x32>
    intFunc[EXTERNAL_INT_0]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_6:

00000000 <__vector_6>:

SIGNAL(INT5_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_1])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	89 2b       	or	r24, r25
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_6+0x32>
    intFunc[EXTERNAL_INT_1]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_7:

00000000 <__vector_7>:

SIGNAL(INT6_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_6])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	89 2b       	or	r24, r25
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_7+0x32>
    intFunc[EXTERNAL_INT_6]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

Disassembly of section .text.__vector_8:

00000000 <__vector_8>:

SIGNAL(INT7_vect) {
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	0b b6       	in	r0, 0x3b	; 59
   a:	0f 92       	push	r0
   c:	11 24       	eor	r1, r1
   e:	2f 93       	push	r18
  10:	3f 93       	push	r19
  12:	4f 93       	push	r20
  14:	5f 93       	push	r21
  16:	6f 93       	push	r22
  18:	7f 93       	push	r23
  1a:	8f 93       	push	r24
  1c:	9f 93       	push	r25
  1e:	af 93       	push	r26
  20:	bf 93       	push	r27
  22:	ef 93       	push	r30
  24:	ff 93       	push	r31
  if(intFunc[EXTERNAL_INT_7])
  26:	80 91 00 00 	lds	r24, 0x0000
  2a:	90 91 00 00 	lds	r25, 0x0000
  2e:	89 2b       	or	r24, r25
  30:	01 f0       	breq	.+0      	; 0x32 <__vector_8+0x32>
    intFunc[EXTERNAL_INT_7]();
  32:	e0 91 00 00 	lds	r30, 0x0000
  36:	f0 91 00 00 	lds	r31, 0x0000
  3a:	19 95       	eicall
}
  3c:	ff 91       	pop	r31
  3e:	ef 91       	pop	r30
  40:	bf 91       	pop	r27
  42:	af 91       	pop	r26
  44:	9f 91       	pop	r25
  46:	8f 91       	pop	r24
  48:	7f 91       	pop	r23
  4a:	6f 91       	pop	r22
  4c:	5f 91       	pop	r21
  4e:	4f 91       	pop	r20
  50:	3f 91       	pop	r19
  52:	2f 91       	pop	r18
  54:	0f 90       	pop	r0
  56:	0b be       	out	0x3b, r0	; 59
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

WMath.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 0000009f  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001b1  00000000  00000000  000000d3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000144  00000000  00000000  00000284  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._Z3maplllll 00000092  00000000  00000000  000003c8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._Z8makeWordj 00000002  00000000  00000000  0000045a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text._Z8makeWordhh 0000000e  00000000  00000000  0000045c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text._Z6randoml 00000044  00000000  00000000  0000046a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._Z6randomll 0000003c  00000000  00000000  000004ae  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._Z10randomSeedj 00000010  00000000  00000000  000004ea  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .debug_frame  00000070  00000000  00000000  000004fc  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 13 .debug_loc    00000248  00000000  00000000  0000056c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 14 .debug_pubnames 00000059  00000000  00000000  000007b4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 15 .debug_aranges 00000048  00000000  00000000  0000080d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 16 .debug_ranges 00000040  00000000  00000000  00000855  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 17 .debug_str    00000107  00000000  00000000  00000895  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._Z3maplllll:

00000000 <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	df 93       	push	r29
  22:	cf 93       	push	r28
  24:	cd b7       	in	r28, 0x3d	; 61
  26:	de b7       	in	r29, 0x3e	; 62
  28:	3b 01       	movw	r6, r22
  2a:	4c 01       	movw	r8, r24
  2c:	19 01       	movw	r2, r18
  2e:	2a 01       	movw	r4, r20
  30:	6e 89       	ldd	r22, Y+22	; 0x16
  32:	7f 89       	ldd	r23, Y+23	; 0x17
  34:	88 8d       	ldd	r24, Y+24	; 0x18
  36:	99 8d       	ldd	r25, Y+25	; 0x19
  38:	6a 19       	sub	r22, r10
  3a:	7b 09       	sbc	r23, r11
  3c:	8c 09       	sbc	r24, r12
  3e:	9d 09       	sbc	r25, r13
  40:	62 1a       	sub	r6, r18
  42:	73 0a       	sbc	r7, r19
  44:	84 0a       	sbc	r8, r20
  46:	95 0a       	sbc	r9, r21
  48:	a4 01       	movw	r20, r8
  4a:	93 01       	movw	r18, r6
  4c:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  50:	e2 18       	sub	r14, r2
  52:	f3 08       	sbc	r15, r3
  54:	04 09       	sbc	r16, r4
  56:	15 09       	sbc	r17, r5
  58:	a8 01       	movw	r20, r16
  5a:	97 01       	movw	r18, r14
  5c:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  60:	2a 0d       	add	r18, r10
  62:	3b 1d       	adc	r19, r11
  64:	4c 1d       	adc	r20, r12
  66:	5d 1d       	adc	r21, r13
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
}
  68:	b9 01       	movw	r22, r18
  6a:	ca 01       	movw	r24, r20
  6c:	cf 91       	pop	r28
  6e:	df 91       	pop	r29
  70:	1f 91       	pop	r17
  72:	0f 91       	pop	r16
  74:	ff 90       	pop	r15
  76:	ef 90       	pop	r14
  78:	df 90       	pop	r13
  7a:	cf 90       	pop	r12
  7c:	bf 90       	pop	r11
  7e:	af 90       	pop	r10
  80:	9f 90       	pop	r9
  82:	8f 90       	pop	r8
  84:	7f 90       	pop	r7
  86:	6f 90       	pop	r6
  88:	5f 90       	pop	r5
  8a:	4f 90       	pop	r4
  8c:	3f 90       	pop	r3
  8e:	2f 90       	pop	r2
  90:	08 95       	ret

Disassembly of section .text._Z8makeWordj:

00000000 <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
   0:	08 95       	ret

Disassembly of section .text._Z8makeWordhh:

00000000 <_Z8makeWordhh>:
   0:	70 e0       	ldi	r23, 0x00	; 0
   2:	38 2f       	mov	r19, r24
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	62 2b       	or	r22, r18
   8:	73 2b       	or	r23, r19
   a:	cb 01       	movw	r24, r22
   c:	08 95       	ret

Disassembly of section .text._Z6randoml:

00000000 <_Z6randoml>:
  if (seed != 0) {
    srandom(seed);
  }
}

long random(long howbig)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7b 01       	movw	r14, r22
   a:	8c 01       	movw	r16, r24
{
  if (howbig == 0) {
   c:	61 15       	cp	r22, r1
   e:	71 05       	cpc	r23, r1
  10:	81 05       	cpc	r24, r1
  12:	91 05       	cpc	r25, r1
  14:	01 f4       	brne	.+0      	; 0x16 <_Z6randoml+0x16>
  16:	20 e0       	ldi	r18, 0x00	; 0
  18:	30 e0       	ldi	r19, 0x00	; 0
  1a:	40 e0       	ldi	r20, 0x00	; 0
  1c:	50 e0       	ldi	r21, 0x00	; 0
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_Z6randoml+0x20>
    return 0;
  }
  return random() % howbig;
  20:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  24:	a8 01       	movw	r20, r16
  26:	97 01       	movw	r18, r14
  28:	0e 94 00 00 	call	0	; 0x0 <_Z6randoml>
  2c:	ac 01       	movw	r20, r24
  2e:	cb 01       	movw	r24, r22
  30:	da 01       	movw	r26, r20
  32:	9c 01       	movw	r18, r24
  34:	ad 01       	movw	r20, r26
}
  36:	b9 01       	movw	r22, r18
  38:	ca 01       	movw	r24, r20
  3a:	1f 91       	pop	r17
  3c:	0f 91       	pop	r16
  3e:	ff 90       	pop	r15
  40:	ef 90       	pop	r14
  42:	08 95       	ret

Disassembly of section .text._Z6randomll:

00000000 <_Z6randomll>:

long random(long howsmall, long howbig)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	7b 01       	movw	r14, r22
   a:	8c 01       	movw	r16, r24
{
  if (howsmall >= howbig) {
   c:	62 17       	cp	r22, r18
   e:	73 07       	cpc	r23, r19
  10:	84 07       	cpc	r24, r20
  12:	95 07       	cpc	r25, r21
  14:	04 f4       	brge	.+0      	; 0x16 <_Z6randomll+0x16>
    return howsmall;
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
  16:	26 1b       	sub	r18, r22
  18:	37 0b       	sbc	r19, r23
  1a:	48 0b       	sbc	r20, r24
  1c:	59 0b       	sbc	r21, r25
  1e:	ca 01       	movw	r24, r20
  20:	b9 01       	movw	r22, r18
  22:	0e 94 00 00 	call	0	; 0x0 <_Z6randomll>
  26:	e6 0e       	add	r14, r22
  28:	f7 1e       	adc	r15, r23
  2a:	08 1f       	adc	r16, r24
  2c:	19 1f       	adc	r17, r25
}
  2e:	b7 01       	movw	r22, r14
  30:	c8 01       	movw	r24, r16
  32:	1f 91       	pop	r17
  34:	0f 91       	pop	r16
  36:	ff 90       	pop	r15
  38:	ef 90       	pop	r14
  3a:	08 95       	ret

Disassembly of section .text._Z10randomSeedj:

00000000 <_Z10randomSeedj>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
   0:	00 97       	sbiw	r24, 0x00	; 0
   2:	01 f0       	breq	.+0      	; 0x4 <_Z10randomSeedj+0x4>
    srandom(seed);
   4:	bc 01       	movw	r22, r24
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	90 e0       	ldi	r25, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <_Z10randomSeedj>
   e:	08 95       	ret

WString.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000001  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000035  2**0
                  ALLOC
  3 .debug_abbrev 00000343  00000000  00000000  00000035  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000021c5  00000000  00000000  00000378  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000010fe  00000000  00000000  0000253d  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text._ZNK6String6charAtEj 00000022  00000000  00000000  0000363b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text._ZN6String9setCharAtEjc 0000001a  00000000  00000000  0000365d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text._ZN6StringixEj 0000002a  00000000  00000000  00003677  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text._ZNK6StringixEj 00000022  00000000  00000000  000036a1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text._ZN6String7replaceEcc 0000001e  00000000  00000000  000036c3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._ZNK6String5toIntEv 00000022  00000000  00000000  000036e1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .text._ZN6String4trimEv 000000b6  00000000  00000000  00003703  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 13 .text._ZN6String11toUpperCaseEv 00000028  00000000  00000000  000037b9  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 14 .text._ZN6String11toLowerCaseEv 00000028  00000000  00000000  000037e1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 15 .text._ZNK6String16equalsIgnoreCaseERKS_ 00000078  00000000  00000000  00003809  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 16 .text._ZNK6String11lastIndexOfERKS_j 0000009c  00000000  00000000  00003881  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 17 .text._ZNK6String11lastIndexOfERKS_ 0000001c  00000000  00000000  0000391d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 18 .text._ZNK6String7indexOfERKS_j 0000003c  00000000  00000000  00003939  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 19 .text._ZNK6String7indexOfERKS_ 0000000a  00000000  00000000  00003975  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 20 .text._ZNK6String11lastIndexOfEcj 0000006e  00000000  00000000  0000397f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 21 .text._ZNK6String11lastIndexOfEc 00000010  00000000  00000000  000039ed  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 22 .text._ZNK6String7indexOfEcj 0000003c  00000000  00000000  000039fd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 23 .text._ZNK6String7indexOfEc 0000000a  00000000  00000000  00003a39  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 24 .text._ZNK6String8getBytesEPhjj 0000005a  00000000  00000000  00003a43  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 25 .text._ZNK6String8endsWithERKS_ 00000044  00000000  00000000  00003a9d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 26 .text._ZNK6String6equalsEPKc 00000046  00000000  00000000  00003ae1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 27 .text._ZNK6String9compareToERKS_ 00000066  00000000  00000000  00003b27  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 28 .text._ZNK6StringgeERKS_ 00000010  00000000  00000000  00003b8d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 29 .text._ZNK6StringleERKS_ 00000012  00000000  00000000  00003b9d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 30 .text._ZNK6StringgtERKS_ 00000012  00000000  00000000  00003baf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 31 .text._ZNK6StringltERKS_ 0000000e  00000000  00000000  00003bc1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 32 .text._ZNK6String6equalsERKS_ 0000002c  00000000  00000000  00003bcf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 33 .text._ZNK6String10startsWithERKS_j 00000046  00000000  00000000  00003bfb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 34 .text._ZNK6String10startsWithERKS_ 00000026  00000000  00000000  00003c41  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 35 .text._ZN6String12changeBufferEj 00000034  00000000  00000000  00003c67  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 36 .text._ZN6String7replaceERKS_S1_ 0000020a  00000000  00000000  00003c9b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 37 .text._ZN6String7reserveEj 00000038  00000000  00000000  00003ea5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 38 .text._ZN6String6concatEPKcj 0000005a  00000000  00000000  00003edd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 39 .text._ZN6String6concatEm 00000064  00000000  00000000  00003f37  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 40 .text._ZN6String6concatEl 00000064  00000000  00000000  00003f9b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 41 .text._ZN6String6concatEj 0000005a  00000000  00000000  00003fff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 42 .text._ZN6String6concatEi 00000062  00000000  00000000  00004059  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 43 .text._ZN6String6concatEh 00000058  00000000  00000000  000040bb  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 44 .text._ZN6String6concatEc 00000028  00000000  00000000  00004113  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 45 .text._ZN6String6concatEPKc 00000020  00000000  00000000  0000413b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 46 .text._ZN6String6concatERKS_ 00000010  00000000  00000000  0000415b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 47 .text._ZN6String10invalidateEv 00000024  00000000  00000000  0000416b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 48 .text._ZplRK15StringSumHelperm 00000022  00000000  00000000  0000418f  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 49 .text._ZplRK15StringSumHelperl 00000022  00000000  00000000  000041b1  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 50 .text._ZplRK15StringSumHelperj 00000022  00000000  00000000  000041d3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 51 .text._ZplRK15StringSumHelperi 00000022  00000000  00000000  000041f5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 52 .text._ZplRK15StringSumHelperh 00000022  00000000  00000000  00004217  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 53 .text._ZplRK15StringSumHelperc 00000022  00000000  00000000  00004239  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 54 .text._ZplRK15StringSumHelperPKc 00000038  00000000  00000000  0000425b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 55 .text._ZplRK15StringSumHelperRK6String 0000002c  00000000  00000000  00004293  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 56 .text._ZN6String4copyEPKcj 00000042  00000000  00000000  000042bf  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 57 .text._ZN6StringC1EPKc 00000034  00000000  00000000  00004301  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 58 .text._ZN6StringC2EPKc 00000034  00000000  00000000  00004335  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 59 .text._ZN6StringaSEPKc 00000032  00000000  00000000  00004369  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 60 .text._ZN6StringC1Emh 00000064  00000000  00000000  0000439b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 61 .text._ZN6StringC2Emh 00000064  00000000  00000000  000043ff  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 62 .text._ZN6StringC1Elh 00000064  00000000  00000000  00004463  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 63 .text._ZN6StringC2Elh 00000064  00000000  00000000  000044c7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 64 .text._ZN6StringC1Ejh 00000062  00000000  00000000  0000452b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 65 .text._ZN6StringC2Ejh 00000062  00000000  00000000  0000458d  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 66 .text._ZN6StringC1Eih 00000062  00000000  00000000  000045ef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 67 .text._ZN6StringC2Eih 00000062  00000000  00000000  00004651  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 68 .text._ZN6StringC1Ehh 00000064  00000000  00000000  000046b3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 69 .text._ZN6StringC2Ehh 00000064  00000000  00000000  00004717  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 70 .text._ZN6StringC1Ec 00000034  00000000  00000000  0000477b  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 71 .text._ZN6StringC2Ec 00000034  00000000  00000000  000047af  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 72 .text._ZNK6String9substringEjj 0000008e  00000000  00000000  000047e3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 73 .text._ZNK6String9substringEj 00000018  00000000  00000000  00004871  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 74 .text._ZN6StringaSERKS_ 0000002e  00000000  00000000  00004889  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 75 .text._ZN6StringC1ERKS_ 00000016  00000000  00000000  000048b7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 76 .text._ZN6StringC2ERKS_ 00000016  00000000  00000000  000048cd  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 77 .text._ZN6StringD1Ev 0000000c  00000000  00000000  000048e3  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 78 .text._ZN6StringD2Ev 0000000c  00000000  00000000  000048ef  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 79 .bss._ZZN6StringixEjE19dummy_writable_char 00000001  00000000  00000000  000048fb  2**0
                  ALLOC
 80 .debug_frame  000004a0  00000000  00000000  000048fc  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 81 .debug_loc    00001f05  00000000  00000000  00004d9c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 82 .debug_pubnames 000005bf  00000000  00000000  00006ca1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 83 .debug_aranges 00000260  00000000  00000000  00007260  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 84 .debug_ranges 00000270  00000000  00000000  000074c0  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 85 .debug_str    00000981  00000000  00000000  00007730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text._ZNK6String6charAtEj:

00000000 <_ZNK6String6charAtEj>:

/*********************************************/
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
   0:	fc 01       	movw	r30, r24
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
   a:	00 f4       	brcc	.+0      	; 0xc <_ZNK6String6charAtEj+0xc>
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
  10:	e0 2d       	mov	r30, r0
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String6charAtEj+0x16>
	return buffer[index];
  16:	e6 0f       	add	r30, r22
  18:	f7 1f       	adc	r31, r23
  1a:	80 81       	ld	r24, Z
  1c:	08 95       	ret
  1e:	80 e0       	ldi	r24, 0x00	; 0
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
}
  20:	08 95       	ret

Disassembly of section .text._ZN6String9setCharAtEjc:

00000000 <_ZN6String9setCharAtEjc>:

void String::setCharAt(unsigned int loc, char c) 
   0:	fc 01       	movw	r30, r24
{
	if (loc < len) buffer[loc] = c;
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
   a:	00 f4       	brcc	.+0      	; 0xc <_ZN6String9setCharAtEjc+0xc>
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
  10:	e0 2d       	mov	r30, r0
  12:	e6 0f       	add	r30, r22
  14:	f7 1f       	adc	r31, r23
  16:	40 83       	st	Z, r20
  18:	08 95       	ret

Disassembly of section .text._ZN6StringixEj:

00000000 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
   0:	fc 01       	movw	r30, r24
   2:	9b 01       	movw	r18, r22
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
   4:	84 81       	ldd	r24, Z+4	; 0x04
   6:	95 81       	ldd	r25, Z+5	; 0x05
   8:	68 17       	cp	r22, r24
   a:	79 07       	cpc	r23, r25
   c:	00 f4       	brcc	.+0      	; 0xe <_ZN6StringixEj+0xe>
   e:	60 81       	ld	r22, Z
  10:	71 81       	ldd	r23, Z+1	; 0x01
  12:	61 15       	cp	r22, r1
  14:	71 05       	cpc	r23, r1
  16:	01 f4       	brne	.+0      	; 0x18 <_ZN6StringixEj+0x18>
		dummy_writable_char = 0;
  18:	10 92 00 00 	sts	0x0000, r1
  1c:	60 e0       	ldi	r22, 0x00	; 0
  1e:	70 e0       	ldi	r23, 0x00	; 0
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6StringixEj+0x22>
		return dummy_writable_char;
	}
	return buffer[index];
  22:	62 0f       	add	r22, r18
  24:	73 1f       	adc	r23, r19
}
  26:	cb 01       	movw	r24, r22
  28:	08 95       	ret

Disassembly of section .text._ZNK6StringixEj:

00000000 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
   0:	fc 01       	movw	r30, r24
{
	if (index >= len || !buffer) return 0;
   2:	84 81       	ldd	r24, Z+4	; 0x04
   4:	95 81       	ldd	r25, Z+5	; 0x05
   6:	68 17       	cp	r22, r24
   8:	79 07       	cpc	r23, r25
   a:	00 f4       	brcc	.+0      	; 0xc <_ZNK6StringixEj+0xc>
   c:	01 90       	ld	r0, Z+
   e:	f0 81       	ld	r31, Z
  10:	e0 2d       	mov	r30, r0
  12:	30 97       	sbiw	r30, 0x00	; 0
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6StringixEj+0x16>
	return buffer[index];
  16:	e6 0f       	add	r30, r22
  18:	f7 1f       	adc	r31, r23
  1a:	80 81       	ld	r24, Z
  1c:	08 95       	ret
  1e:	80 e0       	ldi	r24, 0x00	; 0
}
  20:	08 95       	ret

Disassembly of section .text._ZN6String7replaceEcc:

00000000 <_ZN6String7replaceEcc>:

/*********************************************/
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
   0:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
   2:	01 90       	ld	r0, Z+
   4:	f0 81       	ld	r31, Z
   6:	e0 2d       	mov	r30, r0
   8:	30 97       	sbiw	r30, 0x00	; 0
   a:	01 f4       	brne	.+0      	; 0xc <_ZN6String7replaceEcc+0xc>
   c:	08 95       	ret
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
   e:	86 17       	cp	r24, r22
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN6String7replaceEcc+0x12>
  12:	40 83       	st	Z, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
  14:	31 96       	adiw	r30, 0x01	; 1
  16:	80 81       	ld	r24, Z
  18:	88 23       	and	r24, r24
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6String7replaceEcc+0x1c>
  1c:	08 95       	ret

Disassembly of section .text._ZNK6String5toIntEv:

00000000 <_ZNK6String5toIntEv>:

/*********************************************/
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
   0:	fc 01       	movw	r30, r24
{
	if (buffer) return atol(buffer);
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	00 97       	sbiw	r24, 0x00	; 0
   8:	01 f4       	brne	.+0      	; 0xa <_ZNK6String5toIntEv+0xa>
   a:	20 e0       	ldi	r18, 0x00	; 0
   c:	30 e0       	ldi	r19, 0x00	; 0
   e:	40 e0       	ldi	r20, 0x00	; 0
  10:	50 e0       	ldi	r21, 0x00	; 0
  12:	00 c0       	rjmp	.+0      	; 0x14 <_ZNK6String5toIntEv+0x14>
  14:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String5toIntEv>
  18:	9b 01       	movw	r18, r22
  1a:	ac 01       	movw	r20, r24
	return 0;
}
  1c:	b9 01       	movw	r22, r18
  1e:	ca 01       	movw	r24, r20
  20:	08 95       	ret

Disassembly of section .text._ZN6String4trimEv:

00000000 <_ZN6String4trimEv>:
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
	}
}

void String::trim(void)
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	6c 01       	movw	r12, r24
{
	if (!buffer || len == 0) return;
  12:	dc 01       	movw	r26, r24
  14:	ed 90       	ld	r14, X+
  16:	fc 90       	ld	r15, X
  18:	11 97       	sbiw	r26, 0x01	; 1
  1a:	e1 14       	cp	r14, r1
  1c:	f1 04       	cpc	r15, r1
  1e:	01 f4       	brne	.+0      	; 0x20 <_ZN6String4trimEv+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6String4trimEv+0x22>
  22:	14 96       	adiw	r26, 0x04	; 4
  24:	cd 91       	ld	r28, X+
  26:	dc 91       	ld	r29, X
  28:	15 97       	sbiw	r26, 0x05	; 5
  2a:	20 97       	sbiw	r28, 0x00	; 0
  2c:	01 f0       	breq	.+0      	; 0x2e <_ZN6String4trimEv+0x2e>
  2e:	87 01       	movw	r16, r14
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZN6String4trimEv+0x32>
	char *begin = buffer;
	while (isspace(*begin)) begin++;
  32:	0f 5f       	subi	r16, 0xFF	; 255
  34:	1f 4f       	sbci	r17, 0xFF	; 255
  36:	f8 01       	movw	r30, r16
  38:	80 81       	ld	r24, Z
  3a:	99 27       	eor	r25, r25
  3c:	87 fd       	sbrc	r24, 7
  3e:	90 95       	com	r25
  40:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  44:	89 2b       	or	r24, r25
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN6String4trimEv+0x48>
	char *end = buffer + len - 1;
  48:	21 97       	sbiw	r28, 0x01	; 1
  4a:	ce 0d       	add	r28, r14
  4c:	df 1d       	adc	r29, r15
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZN6String4trimEv+0x50>
	while (isspace(*end) && end >= begin) end--;
  50:	21 97       	sbiw	r28, 0x01	; 1
  52:	88 81       	ld	r24, Y
  54:	99 27       	eor	r25, r25
  56:	87 fd       	sbrc	r24, 7
  58:	90 95       	com	r25
  5a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
  5e:	89 2b       	or	r24, r25
  60:	01 f0       	breq	.+0      	; 0x62 <_ZN6String4trimEv+0x62>
  62:	c0 17       	cp	r28, r16
  64:	d1 07       	cpc	r29, r17
  66:	00 f4       	brcc	.+0      	; 0x68 <_ZN6String4trimEv+0x68>
	len = end + 1 - begin;
  68:	fe 01       	movw	r30, r28
  6a:	31 96       	adiw	r30, 0x01	; 1
  6c:	e0 1b       	sub	r30, r16
  6e:	f1 0b       	sbc	r31, r17
  70:	d6 01       	movw	r26, r12
  72:	15 96       	adiw	r26, 0x05	; 5
  74:	fc 93       	st	X, r31
  76:	ee 93       	st	-X, r30
  78:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
  7a:	2d 91       	ld	r18, X+
  7c:	3c 91       	ld	r19, X
  7e:	20 17       	cp	r18, r16
  80:	31 07       	cpc	r19, r17
  82:	00 f4       	brcc	.+0      	; 0x84 <_ZN6String4trimEv+0x84>
  84:	c9 01       	movw	r24, r18
  86:	b8 01       	movw	r22, r16
  88:	af 01       	movw	r20, r30
  8a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4trimEv>
	buffer[len] = 0;
  8e:	d6 01       	movw	r26, r12
  90:	ed 91       	ld	r30, X+
  92:	fc 91       	ld	r31, X
  94:	11 97       	sbiw	r26, 0x01	; 1
  96:	14 96       	adiw	r26, 0x04	; 4
  98:	8d 91       	ld	r24, X+
  9a:	9c 91       	ld	r25, X
  9c:	15 97       	sbiw	r26, 0x05	; 5
  9e:	e8 0f       	add	r30, r24
  a0:	f9 1f       	adc	r31, r25
  a2:	10 82       	st	Z, r1
}
  a4:	df 91       	pop	r29
  a6:	cf 91       	pop	r28
  a8:	1f 91       	pop	r17
  aa:	0f 91       	pop	r16
  ac:	ff 90       	pop	r15
  ae:	ef 90       	pop	r14
  b0:	df 90       	pop	r13
  b2:	cf 90       	pop	r12
  b4:	08 95       	ret

Disassembly of section .text._ZN6String11toUpperCaseEv:

00000000 <_ZN6String11toUpperCaseEv>:
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
	}
}

void String::toUpperCase(void)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
   6:	c0 81       	ld	r28, Z
   8:	d1 81       	ldd	r29, Z+1	; 0x01
   a:	20 97       	sbiw	r28, 0x00	; 0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String11toUpperCaseEv+0xe>
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6String11toUpperCaseEv+0x10>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
  10:	99 27       	eor	r25, r25
  12:	87 fd       	sbrc	r24, 7
  14:	90 95       	com	r25
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toUpperCaseEv>
  1a:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
  1c:	88 81       	ld	r24, Y
  1e:	88 23       	and	r24, r24
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6String11toUpperCaseEv+0x22>
		*p = toupper(*p);
	}
}
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZN6String11toLowerCaseEv:

00000000 <_ZN6String11toLowerCaseEv>:
			index--;
		}
	}
}

void String::toLowerCase(void)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
{
	if (!buffer) return;
   6:	c0 81       	ld	r28, Z
   8:	d1 81       	ldd	r29, Z+1	; 0x01
   a:	20 97       	sbiw	r28, 0x00	; 0
   c:	01 f4       	brne	.+0      	; 0xe <_ZN6String11toLowerCaseEv+0xe>
   e:	00 c0       	rjmp	.+0      	; 0x10 <_ZN6String11toLowerCaseEv+0x10>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
  10:	99 27       	eor	r25, r25
  12:	87 fd       	sbrc	r24, 7
  14:	90 95       	com	r25
  16:	0e 94 00 00 	call	0	; 0x0 <_ZN6String11toLowerCaseEv>
  1a:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
  1c:	88 81       	ld	r24, Y
  1e:	88 23       	and	r24, r24
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6String11toLowerCaseEv+0x22>
		*p = tolower(*p);
	}
}
  22:	df 91       	pop	r29
  24:	cf 91       	pop	r28
  26:	08 95       	ret

Disassembly of section .text._ZNK6String16equalsIgnoreCaseERKS_:

00000000 <_ZNK6String16equalsIgnoreCaseERKS_>:
unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
}

unsigned char String::equalsIgnoreCase( const String &s2 ) const
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	fc 01       	movw	r30, r24
   e:	db 01       	movw	r26, r22
{
	if (this == &s2) return 1;
  10:	86 17       	cp	r24, r22
  12:	97 07       	cpc	r25, r23
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String16equalsIgnoreCaseERKS_+0x16>
	if (len != s2.len) return 0;
  16:	24 81       	ldd	r18, Z+4	; 0x04
  18:	35 81       	ldd	r19, Z+5	; 0x05
  1a:	14 96       	adiw	r26, 0x04	; 4
  1c:	8d 91       	ld	r24, X+
  1e:	9c 91       	ld	r25, X
  20:	15 97       	sbiw	r26, 0x05	; 5
  22:	28 17       	cp	r18, r24
  24:	39 07       	cpc	r19, r25
  26:	01 f4       	brne	.+0      	; 0x28 <_ZNK6String16equalsIgnoreCaseERKS_+0x28>
	if (len == 0) return 1;
  28:	23 2b       	or	r18, r19
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String16equalsIgnoreCaseERKS_+0x2c>
	const char *p1 = buffer;
  2c:	e0 80       	ld	r14, Z
  2e:	f1 80       	ldd	r15, Z+1	; 0x01
	const char *p2 = s2.buffer;
  30:	cd 91       	ld	r28, X+
  32:	dc 91       	ld	r29, X
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZNK6String16equalsIgnoreCaseERKS_+0x36>
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
  36:	99 27       	eor	r25, r25
  38:	87 fd       	sbrc	r24, 7
  3a:	90 95       	com	r25
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  40:	8c 01       	movw	r16, r24
  42:	88 81       	ld	r24, Y
  44:	99 27       	eor	r25, r25
  46:	87 fd       	sbrc	r24, 7
  48:	90 95       	com	r25
  4a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String16equalsIgnoreCaseERKS_>
  4e:	08 17       	cp	r16, r24
  50:	19 07       	cpc	r17, r25
  52:	01 f4       	brne	.+0      	; 0x54 <_ZNK6String16equalsIgnoreCaseERKS_+0x54>
  54:	08 94       	sec
  56:	e1 1c       	adc	r14, r1
  58:	f1 1c       	adc	r15, r1
  5a:	21 96       	adiw	r28, 0x01	; 1
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
  5c:	f7 01       	movw	r30, r14
  5e:	80 81       	ld	r24, Z
  60:	88 23       	and	r24, r24
  62:	01 f4       	brne	.+0      	; 0x64 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
  64:	81 e0       	ldi	r24, 0x01	; 1
  66:	00 c0       	rjmp	.+0      	; 0x68 <_ZNK6String16equalsIgnoreCaseERKS_+0x68>
  68:	80 e0       	ldi	r24, 0x00	; 0
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}
  6a:	df 91       	pop	r29
  6c:	cf 91       	pop	r28
  6e:	1f 91       	pop	r17
  70:	0f 91       	pop	r16
  72:	ff 90       	pop	r15
  74:	ef 90       	pop	r14
  76:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfERKS_j:

00000000 <_ZNK6String11lastIndexOfERKS_j>:
int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	cf 93       	push	r28
  12:	df 93       	push	r29
  14:	fc 01       	movw	r30, r24
  16:	5b 01       	movw	r10, r22
  18:	7a 01       	movw	r14, r20
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
  1a:	db 01       	movw	r26, r22
  1c:	14 96       	adiw	r26, 0x04	; 4
  1e:	2d 91       	ld	r18, X+
  20:	3c 91       	ld	r19, X
  22:	15 97       	sbiw	r26, 0x05	; 5
  24:	21 15       	cp	r18, r1
  26:	31 05       	cpc	r19, r1
  28:	01 f0       	breq	.+0      	; 0x2a <_ZNK6String11lastIndexOfERKS_j+0x2a>
  2a:	84 81       	ldd	r24, Z+4	; 0x04
  2c:	95 81       	ldd	r25, Z+5	; 0x05
  2e:	00 97       	sbiw	r24, 0x00	; 0
  30:	01 f0       	breq	.+0      	; 0x32 <_ZNK6String11lastIndexOfERKS_j+0x32>
  32:	82 17       	cp	r24, r18
  34:	93 07       	cpc	r25, r19
  36:	00 f0       	brcs	.+0      	; 0x38 <_ZNK6String11lastIndexOfERKS_j+0x38>
	if (fromIndex >= len) fromIndex = len - 1;
  38:	48 17       	cp	r20, r24
  3a:	59 07       	cpc	r21, r25
  3c:	00 f0       	brcs	.+0      	; 0x3e <_ZNK6String11lastIndexOfERKS_j+0x3e>
  3e:	7c 01       	movw	r14, r24
  40:	08 94       	sec
  42:	e1 08       	sbc	r14, r1
  44:	f1 08       	sbc	r15, r1
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
  46:	00 81       	ld	r16, Z
  48:	11 81       	ldd	r17, Z+1	; 0x01
  4a:	c8 01       	movw	r24, r16
  4c:	cf ef       	ldi	r28, 0xFF	; 255
  4e:	df ef       	ldi	r29, 0xFF	; 255
  50:	68 01       	movw	r12, r16
  52:	ce 0c       	add	r12, r14
  54:	df 1c       	adc	r13, r15
  56:	00 c0       	rjmp	.+0      	; 0x58 <_ZNK6String11lastIndexOfERKS_j+0x58>
		p = strstr(p, s2.buffer);
  58:	f5 01       	movw	r30, r10
  5a:	60 81       	ld	r22, Z
  5c:	71 81       	ldd	r23, Z+1	; 0x01
  5e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfERKS_j>
  62:	9c 01       	movw	r18, r24
		if (!p) break;
  64:	00 97       	sbiw	r24, 0x00	; 0
  66:	01 f0       	breq	.+0      	; 0x68 <_ZNK6String11lastIndexOfERKS_j+0x68>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
  68:	80 1b       	sub	r24, r16
  6a:	91 0b       	sbc	r25, r17
  6c:	e8 16       	cp	r14, r24
  6e:	f9 06       	cpc	r15, r25
  70:	00 f0       	brcs	.+0      	; 0x72 <_ZNK6String11lastIndexOfERKS_j+0x72>
  72:	ec 01       	movw	r28, r24
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
  74:	c9 01       	movw	r24, r18
  76:	01 96       	adiw	r24, 0x01	; 1
  78:	c8 16       	cp	r12, r24
  7a:	d9 06       	cpc	r13, r25
  7c:	00 f4       	brcc	.+0      	; 0x7e <_ZNK6String11lastIndexOfERKS_j+0x7e>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <_ZNK6String11lastIndexOfERKS_j+0x80>
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	df ef       	ldi	r29, 0xFF	; 255
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
  84:	ce 01       	movw	r24, r28
  86:	df 91       	pop	r29
  88:	cf 91       	pop	r28
  8a:	1f 91       	pop	r17
  8c:	0f 91       	pop	r16
  8e:	ff 90       	pop	r15
  90:	ef 90       	pop	r14
  92:	df 90       	pop	r13
  94:	cf 90       	pop	r12
  96:	bf 90       	pop	r11
  98:	af 90       	pop	r10
  9a:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfERKS_:

00000000 <_ZNK6String11lastIndexOfERKS_>:
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
{
	return lastIndexOf(s2, len - s2.len);
   4:	44 81       	ldd	r20, Z+4	; 0x04
   6:	55 81       	ldd	r21, Z+5	; 0x05
   8:	14 96       	adiw	r26, 0x04	; 4
   a:	8d 91       	ld	r24, X+
   c:	9c 91       	ld	r25, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	48 1b       	sub	r20, r24
  12:	59 0b       	sbc	r21, r25
  14:	cf 01       	movw	r24, r30
  16:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfERKS_>
}
  1a:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfERKS_j:

00000000 <_ZNK6String7indexOfERKS_j>:
int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
   6:	db 01       	movw	r26, r22
{
	if (fromIndex >= len) return -1;
   8:	84 81       	ldd	r24, Z+4	; 0x04
   a:	95 81       	ldd	r25, Z+5	; 0x05
   c:	48 17       	cp	r20, r24
   e:	59 07       	cpc	r21, r25
  10:	00 f4       	brcc	.+0      	; 0x12 <_ZNK6String7indexOfERKS_j+0x12>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
  12:	c0 81       	ld	r28, Z
  14:	d1 81       	ldd	r29, Z+1	; 0x01
  16:	6d 91       	ld	r22, X+
  18:	7c 91       	ld	r23, X
  1a:	ce 01       	movw	r24, r28
  1c:	84 0f       	add	r24, r20
  1e:	95 1f       	adc	r25, r21
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfERKS_j>
  24:	9c 01       	movw	r18, r24
	if (found == NULL) return -1;
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f4       	brne	.+0      	; 0x2a <_ZNK6String7indexOfERKS_j+0x2a>
  2a:	2f ef       	ldi	r18, 0xFF	; 255
  2c:	3f ef       	ldi	r19, 0xFF	; 255
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZNK6String7indexOfERKS_j+0x30>
	return found - buffer;
  30:	2c 1b       	sub	r18, r28
  32:	3d 0b       	sbc	r19, r29
}
  34:	c9 01       	movw	r24, r18
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfERKS_:

00000000 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfERKS_>
}
   8:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfEcj:

00000000 <_ZNK6String11lastIndexOfEcj>:
int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
   0:	df 92       	push	r13
   2:	ef 92       	push	r14
   4:	ff 92       	push	r15
   6:	0f 93       	push	r16
   8:	1f 93       	push	r17
   a:	cf 93       	push	r28
   c:	df 93       	push	r29
   e:	ec 01       	movw	r28, r24
{
	if (fromIndex >= len) return -1;
  10:	8c 81       	ldd	r24, Y+4	; 0x04
  12:	9d 81       	ldd	r25, Y+5	; 0x05
  14:	48 17       	cp	r20, r24
  16:	59 07       	cpc	r21, r25
  18:	00 f4       	brcc	.+0      	; 0x1a <_ZNK6String11lastIndexOfEcj+0x1a>
	char tempchar = buffer[fromIndex + 1];
  1a:	7a 01       	movw	r14, r20
  1c:	08 94       	sec
  1e:	e1 1c       	adc	r14, r1
  20:	f1 1c       	adc	r15, r1
  22:	e8 81       	ld	r30, Y
  24:	f9 81       	ldd	r31, Y+1	; 0x01
  26:	ee 0d       	add	r30, r14
  28:	ff 1d       	adc	r31, r15
  2a:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
  2c:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
  2e:	08 81       	ld	r16, Y
  30:	19 81       	ldd	r17, Y+1	; 0x01
  32:	77 27       	eor	r23, r23
  34:	67 fd       	sbrc	r22, 7
  36:	70 95       	com	r23
  38:	c8 01       	movw	r24, r16
  3a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfEcj>
  3e:	9c 01       	movw	r18, r24
	buffer[fromIndex + 1] = tempchar;
  40:	0e 0d       	add	r16, r14
  42:	1f 1d       	adc	r17, r15
  44:	f8 01       	movw	r30, r16
  46:	d0 82       	st	Z, r13
	if (temp == NULL) return -1;
  48:	00 97       	sbiw	r24, 0x00	; 0
  4a:	01 f4       	brne	.+0      	; 0x4c <_ZNK6String11lastIndexOfEcj+0x4c>
  4c:	ef ef       	ldi	r30, 0xFF	; 255
  4e:	ff ef       	ldi	r31, 0xFF	; 255
  50:	00 c0       	rjmp	.+0      	; 0x52 <_ZNK6String11lastIndexOfEcj+0x52>
	return temp - buffer;
  52:	88 81       	ld	r24, Y
  54:	99 81       	ldd	r25, Y+1	; 0x01
  56:	f9 01       	movw	r30, r18
  58:	e8 1b       	sub	r30, r24
  5a:	f9 0b       	sbc	r31, r25
}
  5c:	cf 01       	movw	r24, r30
  5e:	df 91       	pop	r29
  60:	cf 91       	pop	r28
  62:	1f 91       	pop	r17
  64:	0f 91       	pop	r16
  66:	ff 90       	pop	r15
  68:	ef 90       	pop	r14
  6a:	df 90       	pop	r13
  6c:	08 95       	ret

Disassembly of section .text._ZNK6String11lastIndexOfEc:

00000000 <_ZNK6String11lastIndexOfEc>:
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
   0:	fc 01       	movw	r30, r24
{
	return lastIndexOf(theChar, len - 1);
   2:	44 81       	ldd	r20, Z+4	; 0x04
   4:	55 81       	ldd	r21, Z+5	; 0x05
   6:	41 50       	subi	r20, 0x01	; 1
   8:	50 40       	sbci	r21, 0x00	; 0
   a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String11lastIndexOfEc>
}
   e:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEcj:

00000000 <_ZNK6String7indexOfEcj>:
int String::indexOf(char c) const
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	fc 01       	movw	r30, r24
{
	if (fromIndex >= len) return -1;
   6:	84 81       	ldd	r24, Z+4	; 0x04
   8:	95 81       	ldd	r25, Z+5	; 0x05
   a:	48 17       	cp	r20, r24
   c:	59 07       	cpc	r21, r25
   e:	00 f4       	brcc	.+0      	; 0x10 <_ZNK6String7indexOfEcj+0x10>
	const char* temp = strchr(buffer + fromIndex, ch);
  10:	c0 81       	ld	r28, Z
  12:	d1 81       	ldd	r29, Z+1	; 0x01
  14:	77 27       	eor	r23, r23
  16:	67 fd       	sbrc	r22, 7
  18:	70 95       	com	r23
  1a:	ce 01       	movw	r24, r28
  1c:	84 0f       	add	r24, r20
  1e:	95 1f       	adc	r25, r21
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfEcj>
  24:	9c 01       	movw	r18, r24
	if (temp == NULL) return -1;
  26:	00 97       	sbiw	r24, 0x00	; 0
  28:	01 f4       	brne	.+0      	; 0x2a <_ZNK6String7indexOfEcj+0x2a>
  2a:	2f ef       	ldi	r18, 0xFF	; 255
  2c:	3f ef       	ldi	r19, 0xFF	; 255
  2e:	00 c0       	rjmp	.+0      	; 0x30 <_ZNK6String7indexOfEcj+0x30>
	return temp - buffer;
  30:	2c 1b       	sub	r18, r28
  32:	3d 0b       	sbc	r19, r29
}
  34:	c9 01       	movw	r24, r18
  36:	df 91       	pop	r29
  38:	cf 91       	pop	r28
  3a:	08 95       	ret

Disassembly of section .text._ZNK6String7indexOfEc:

00000000 <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
   0:	40 e0       	ldi	r20, 0x00	; 0
   2:	50 e0       	ldi	r21, 0x00	; 0
   4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String7indexOfEc>
}
   8:	08 95       	ret

Disassembly of section .text._ZNK6String8getBytesEPhjj:

00000000 <_ZNK6String8getBytesEPhjj>:
{
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	fc 01       	movw	r30, r24
   a:	8b 01       	movw	r16, r22
{
	if (!bufsize || !buf) return;
   c:	41 15       	cp	r20, r1
   e:	51 05       	cpc	r21, r1
  10:	01 f0       	breq	.+0      	; 0x12 <_ZNK6String8getBytesEPhjj+0x12>
  12:	61 15       	cp	r22, r1
  14:	71 05       	cpc	r23, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZNK6String8getBytesEPhjj+0x18>
	if (index >= len) {
  18:	84 81       	ldd	r24, Z+4	; 0x04
  1a:	95 81       	ldd	r25, Z+5	; 0x05
  1c:	28 17       	cp	r18, r24
  1e:	39 07       	cpc	r19, r25
  20:	00 f0       	brcs	.+0      	; 0x22 <_ZNK6String8getBytesEPhjj+0x22>
		buf[0] = 0;
  22:	fb 01       	movw	r30, r22
  24:	10 82       	st	Z, r1
  26:	00 c0       	rjmp	.+0      	; 0x28 <_ZNK6String8getBytesEPhjj+0x28>
		return;
	}
	unsigned int n = bufsize - 1;
  28:	41 50       	subi	r20, 0x01	; 1
  2a:	50 40       	sbci	r21, 0x00	; 0
  2c:	ec 01       	movw	r28, r24
  2e:	c2 1b       	sub	r28, r18
  30:	d3 0b       	sbc	r29, r19
  32:	4c 17       	cp	r20, r28
  34:	5d 07       	cpc	r21, r29
  36:	00 f4       	brcc	.+0      	; 0x38 <_ZNK6String8getBytesEPhjj+0x38>
  38:	ea 01       	movw	r28, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
  3a:	60 81       	ld	r22, Z
  3c:	71 81       	ldd	r23, Z+1	; 0x01
  3e:	62 0f       	add	r22, r18
  40:	73 1f       	adc	r23, r19
  42:	c8 01       	movw	r24, r16
  44:	ae 01       	movw	r20, r28
  46:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8getBytesEPhjj>
	buf[n] = 0;
  4a:	c0 0f       	add	r28, r16
  4c:	d1 1f       	adc	r29, r17
  4e:	18 82       	st	Y, r1
}
  50:	df 91       	pop	r29
  52:	cf 91       	pop	r28
  54:	1f 91       	pop	r17
  56:	0f 91       	pop	r16
  58:	08 95       	ret

Disassembly of section .text._ZNK6String8endsWithERKS_:

00000000 <_ZNK6String8endsWithERKS_>:
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
   4:	24 81       	ldd	r18, Z+4	; 0x04
   6:	35 81       	ldd	r19, Z+5	; 0x05
   8:	14 96       	adiw	r26, 0x04	; 4
   a:	4d 91       	ld	r20, X+
   c:	5c 91       	ld	r21, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	24 17       	cp	r18, r20
  12:	35 07       	cpc	r19, r21
  14:	00 f0       	brcs	.+0      	; 0x16 <_ZNK6String8endsWithERKS_+0x16>
  16:	80 81       	ld	r24, Z
  18:	91 81       	ldd	r25, Z+1	; 0x01
  1a:	00 97       	sbiw	r24, 0x00	; 0
  1c:	01 f0       	breq	.+0      	; 0x1e <_ZNK6String8endsWithERKS_+0x1e>
  1e:	6d 91       	ld	r22, X+
  20:	7c 91       	ld	r23, X
  22:	61 15       	cp	r22, r1
  24:	71 05       	cpc	r23, r1
  26:	01 f0       	breq	.+0      	; 0x28 <_ZNK6String8endsWithERKS_+0x28>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
  28:	24 1b       	sub	r18, r20
  2a:	35 0b       	sbc	r19, r21
  2c:	82 0f       	add	r24, r18
  2e:	93 1f       	adc	r25, r19
  30:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String8endsWithERKS_>
  34:	9c 01       	movw	r18, r24
  36:	80 e0       	ldi	r24, 0x00	; 0
  38:	23 2b       	or	r18, r19
  3a:	01 f4       	brne	.+0      	; 0x3c <_ZNK6String8endsWithERKS_+0x3c>
  3c:	81 e0       	ldi	r24, 0x01	; 1
  3e:	08 95       	ret
  40:	80 e0       	ldi	r24, 0x00	; 0
}
  42:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsEPKc:

00000000 <_ZNK6String6equalsEPKc>:
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
   0:	dc 01       	movw	r26, r24
   2:	fb 01       	movw	r30, r22
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
   4:	14 96       	adiw	r26, 0x04	; 4
   6:	8d 91       	ld	r24, X+
   8:	9c 91       	ld	r25, X
   a:	15 97       	sbiw	r26, 0x05	; 5
   c:	89 2b       	or	r24, r25
   e:	01 f4       	brne	.+0      	; 0x10 <_ZNK6String6equalsEPKc+0x10>
  10:	61 15       	cp	r22, r1
  12:	71 05       	cpc	r23, r1
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String6equalsEPKc+0x16>
  16:	90 e0       	ldi	r25, 0x00	; 0
  18:	80 81       	ld	r24, Z
  1a:	00 c0       	rjmp	.+0      	; 0x1c <_ZNK6String6equalsEPKc+0x1c>
  1c:	0d 90       	ld	r0, X+
  1e:	bc 91       	ld	r27, X
  20:	a0 2d       	mov	r26, r0
	if (cstr == NULL) return buffer[0] == 0;
  22:	61 15       	cp	r22, r1
  24:	71 05       	cpc	r23, r1
  26:	01 f4       	brne	.+0      	; 0x28 <_ZNK6String6equalsEPKc+0x28>
  28:	90 e0       	ldi	r25, 0x00	; 0
  2a:	8c 91       	ld	r24, X
  2c:	88 23       	and	r24, r24
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZNK6String6equalsEPKc+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <_ZNK6String6equalsEPKc+0x32>
	return strcmp(buffer, cstr) == 0;
  32:	cd 01       	movw	r24, r26
  34:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsEPKc>
  38:	9c 01       	movw	r18, r24
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	23 2b       	or	r18, r19
  3e:	01 f4       	brne	.+0      	; 0x40 <_ZNK6String6equalsEPKc+0x40>
  40:	91 e0       	ldi	r25, 0x01	; 1
}
  42:	89 2f       	mov	r24, r25
  44:	08 95       	ret

Disassembly of section .text._ZNK6String9compareToERKS_:

00000000 <_ZNK6String9compareToERKS_>:

/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	9c 01       	movw	r18, r24
   6:	fb 01       	movw	r30, r22
{
	if (!buffer || !s.buffer) {
   8:	ec 01       	movw	r28, r24
   a:	a8 81       	ld	r26, Y
   c:	b9 81       	ldd	r27, Y+1	; 0x01
   e:	10 97       	sbiw	r26, 0x00	; 0
  10:	01 f0       	breq	.+0      	; 0x12 <_ZNK6String9compareToERKS_+0x12>
  12:	60 81       	ld	r22, Z
  14:	71 81       	ldd	r23, Z+1	; 0x01
  16:	61 15       	cp	r22, r1
  18:	71 05       	cpc	r23, r1
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZNK6String9compareToERKS_+0x1c>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
  1c:	c0 81       	ld	r28, Z
  1e:	d1 81       	ldd	r29, Z+1	; 0x01
  20:	20 97       	sbiw	r28, 0x00	; 0
  22:	01 f0       	breq	.+0      	; 0x24 <_ZNK6String9compareToERKS_+0x24>
  24:	84 81       	ldd	r24, Z+4	; 0x04
  26:	95 81       	ldd	r25, Z+5	; 0x05
  28:	89 2b       	or	r24, r25
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String9compareToERKS_+0x2c>
  2c:	88 81       	ld	r24, Y
  2e:	90 e0       	ldi	r25, 0x00	; 0
  30:	22 27       	eor	r18, r18
  32:	33 27       	eor	r19, r19
  34:	28 1b       	sub	r18, r24
  36:	39 0b       	sbc	r19, r25
  38:	00 c0       	rjmp	.+0      	; 0x3a <_ZNK6String9compareToERKS_+0x3a>
		if (buffer && len > 0) return *(unsigned char *)buffer;
  3a:	10 97       	sbiw	r26, 0x00	; 0
  3c:	01 f0       	breq	.+0      	; 0x3e <_ZNK6String9compareToERKS_+0x3e>
  3e:	f9 01       	movw	r30, r18
  40:	84 81       	ldd	r24, Z+4	; 0x04
  42:	95 81       	ldd	r25, Z+5	; 0x05
  44:	89 2b       	or	r24, r25
  46:	01 f0       	breq	.+0      	; 0x48 <_ZNK6String9compareToERKS_+0x48>
  48:	8c 91       	ld	r24, X
  4a:	28 2f       	mov	r18, r24
  4c:	30 e0       	ldi	r19, 0x00	; 0
  4e:	00 c0       	rjmp	.+0      	; 0x50 <_ZNK6String9compareToERKS_+0x50>
		return 0;
	}
	return strcmp(buffer, s.buffer);
  50:	cd 01       	movw	r24, r26
  52:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9compareToERKS_>
  56:	9c 01       	movw	r18, r24
  58:	00 c0       	rjmp	.+0      	; 0x5a <_ZNK6String9compareToERKS_+0x5a>
  5a:	20 e0       	ldi	r18, 0x00	; 0
  5c:	30 e0       	ldi	r19, 0x00	; 0
}
  5e:	c9 01       	movw	r24, r18
  60:	df 91       	pop	r29
  62:	cf 91       	pop	r28
  64:	08 95       	ret

Disassembly of section .text._ZNK6StringgeERKS_:

00000000 <_ZNK6StringgeERKS_>:
	return compareTo(rhs) <= 0;
}

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgeERKS_>
   4:	89 2f       	mov	r24, r25
   6:	80 95       	com	r24
}
   8:	88 1f       	adc	r24, r24
   a:	88 27       	eor	r24, r24
   c:	88 1f       	adc	r24, r24
   e:	08 95       	ret

Disassembly of section .text._ZNK6StringleERKS_:

00000000 <_ZNK6StringleERKS_>:
	return compareTo(rhs) > 0;
}

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringleERKS_>
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	18 16       	cp	r1, r24
   8:	19 06       	cpc	r1, r25
   a:	04 f0       	brlt	.+0      	; 0xc <_ZNK6StringleERKS_+0xc>
   c:	21 e0       	ldi	r18, 0x01	; 1
}
   e:	82 2f       	mov	r24, r18
  10:	08 95       	ret

Disassembly of section .text._ZNK6StringgtERKS_:

00000000 <_ZNK6StringgtERKS_>:
	return compareTo(rhs) < 0;
}

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringgtERKS_>
   4:	20 e0       	ldi	r18, 0x00	; 0
   6:	18 16       	cp	r1, r24
   8:	19 06       	cpc	r1, r25
   a:	04 f4       	brge	.+0      	; 0xc <_ZNK6StringgtERKS_+0xc>
   c:	21 e0       	ldi	r18, 0x01	; 1
}
   e:	82 2f       	mov	r24, r18
  10:	08 95       	ret

Disassembly of section .text._ZNK6StringltERKS_:

00000000 <_ZNK6StringltERKS_>:
	return strcmp(buffer, cstr) == 0;
}

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
   0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6StringltERKS_>
}
   4:	89 2f       	mov	r24, r25
   6:	88 1f       	adc	r24, r24
   8:	88 27       	eor	r24, r24
   a:	88 1f       	adc	r24, r24
   c:	08 95       	ret

Disassembly of section .text._ZNK6String6equalsERKS_:

00000000 <_ZNK6String6equalsERKS_>:
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
{
	return (len == s2.len && compareTo(s2) == 0);
   4:	24 81       	ldd	r18, Z+4	; 0x04
   6:	35 81       	ldd	r19, Z+5	; 0x05
   8:	14 96       	adiw	r26, 0x04	; 4
   a:	8d 91       	ld	r24, X+
   c:	9c 91       	ld	r25, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	28 17       	cp	r18, r24
  12:	39 07       	cpc	r19, r25
  14:	01 f0       	breq	.+0      	; 0x16 <_ZNK6String6equalsERKS_+0x16>
  16:	20 e0       	ldi	r18, 0x00	; 0
  18:	00 c0       	rjmp	.+0      	; 0x1a <_ZNK6String6equalsERKS_+0x1a>
  1a:	cf 01       	movw	r24, r30
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6equalsERKS_>
  20:	20 e0       	ldi	r18, 0x00	; 0
  22:	89 2b       	or	r24, r25
  24:	01 f4       	brne	.+0      	; 0x26 <_ZNK6String6equalsERKS_+0x26>
  26:	21 e0       	ldi	r18, 0x01	; 1
}
  28:	82 2f       	mov	r24, r18
  2a:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_j:

00000000 <_ZNK6String10startsWithERKS_j>:
{
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
   4:	14 96       	adiw	r26, 0x04	; 4
   6:	2d 91       	ld	r18, X+
   8:	3c 91       	ld	r19, X
   a:	15 97       	sbiw	r26, 0x05	; 5
   c:	84 81       	ldd	r24, Z+4	; 0x04
   e:	95 81       	ldd	r25, Z+5	; 0x05
  10:	82 1b       	sub	r24, r18
  12:	93 0b       	sbc	r25, r19
  14:	84 17       	cp	r24, r20
  16:	95 07       	cpc	r25, r21
  18:	00 f0       	brcs	.+0      	; 0x1a <_ZNK6String10startsWithERKS_j+0x1a>
  1a:	80 81       	ld	r24, Z
  1c:	91 81       	ldd	r25, Z+1	; 0x01
  1e:	00 97       	sbiw	r24, 0x00	; 0
  20:	01 f0       	breq	.+0      	; 0x22 <_ZNK6String10startsWithERKS_j+0x22>
  22:	6d 91       	ld	r22, X+
  24:	7c 91       	ld	r23, X
  26:	61 15       	cp	r22, r1
  28:	71 05       	cpc	r23, r1
  2a:	01 f0       	breq	.+0      	; 0x2c <_ZNK6String10startsWithERKS_j+0x2c>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
  2c:	84 0f       	add	r24, r20
  2e:	95 1f       	adc	r25, r21
  30:	a9 01       	movw	r20, r18
  32:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String10startsWithERKS_j>
  36:	9c 01       	movw	r18, r24
  38:	80 e0       	ldi	r24, 0x00	; 0
  3a:	23 2b       	or	r18, r19
  3c:	01 f4       	brne	.+0      	; 0x3e <_ZNK6String10startsWithERKS_j+0x3e>
  3e:	81 e0       	ldi	r24, 0x01	; 1
  40:	08 95       	ret
  42:	80 e0       	ldi	r24, 0x00	; 0
}
  44:	08 95       	ret

Disassembly of section .text._ZNK6String10startsWithERKS_:

00000000 <_ZNK6String10startsWithERKS_>:
		if (tolower(*p1++) != tolower(*p2++)) return 0;
	} 
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
   0:	fc 01       	movw	r30, r24
   2:	db 01       	movw	r26, r22
{
	if (len < s2.len) return 0;
   4:	24 81       	ldd	r18, Z+4	; 0x04
   6:	35 81       	ldd	r19, Z+5	; 0x05
   8:	14 96       	adiw	r26, 0x04	; 4
   a:	8d 91       	ld	r24, X+
   c:	9c 91       	ld	r25, X
   e:	15 97       	sbiw	r26, 0x05	; 5
  10:	28 17       	cp	r18, r24
  12:	39 07       	cpc	r19, r25
  14:	00 f4       	brcc	.+0      	; 0x16 <_ZNK6String10startsWithERKS_+0x16>
  16:	80 e0       	ldi	r24, 0x00	; 0
  18:	08 95       	ret
	return startsWith(s2, 0);
  1a:	cf 01       	movw	r24, r30
  1c:	40 e0       	ldi	r20, 0x00	; 0
  1e:	50 e0       	ldi	r21, 0x00	; 0
  20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String10startsWithERKS_>
}
  24:	08 95       	ret

Disassembly of section .text._ZN6String12changeBufferEj:

00000000 <_ZN6String12changeBufferEj>:
		return 1;
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	cf 93       	push	r28
   6:	df 93       	push	r29
   8:	ec 01       	movw	r28, r24
   a:	8b 01       	movw	r16, r22
{
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   c:	6f 5f       	subi	r22, 0xFF	; 255
   e:	7f 4f       	sbci	r23, 0xFF	; 255
  10:	88 81       	ld	r24, Y
  12:	99 81       	ldd	r25, Y+1	; 0x01
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String12changeBufferEj>
	if (newbuffer) {
  18:	00 97       	sbiw	r24, 0x00	; 0
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6String12changeBufferEj+0x1c>
  1c:	80 e0       	ldi	r24, 0x00	; 0
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZN6String12changeBufferEj+0x20>
		buffer = newbuffer;
  20:	99 83       	std	Y+1, r25	; 0x01
  22:	88 83       	st	Y, r24
		capacity = maxStrLen;
  24:	1b 83       	std	Y+3, r17	; 0x03
  26:	0a 83       	std	Y+2, r16	; 0x02
  28:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
  2a:	df 91       	pop	r29
  2c:	cf 91       	pop	r28
  2e:	1f 91       	pop	r17
  30:	0f 91       	pop	r16
  32:	08 95       	ret

Disassembly of section .text._ZN6String7replaceERKS_S1_:

00000000 <_ZN6String7replaceERKS_S1_>:
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
   0:	2f 92       	push	r2
   2:	3f 92       	push	r3
   4:	4f 92       	push	r4
   6:	5f 92       	push	r5
   8:	6f 92       	push	r6
   a:	7f 92       	push	r7
   c:	8f 92       	push	r8
   e:	9f 92       	push	r9
  10:	af 92       	push	r10
  12:	bf 92       	push	r11
  14:	cf 92       	push	r12
  16:	df 92       	push	r13
  18:	ef 92       	push	r14
  1a:	ff 92       	push	r15
  1c:	0f 93       	push	r16
  1e:	1f 93       	push	r17
  20:	cf 93       	push	r28
  22:	df 93       	push	r29
  24:	5c 01       	movw	r10, r24
  26:	2b 01       	movw	r4, r22
  28:	4a 01       	movw	r8, r20
{
	if (len == 0 || find.len == 0) return;
  2a:	dc 01       	movw	r26, r24
  2c:	14 96       	adiw	r26, 0x04	; 4
  2e:	0d 91       	ld	r16, X+
  30:	1c 91       	ld	r17, X
  32:	15 97       	sbiw	r26, 0x05	; 5
  34:	01 15       	cp	r16, r1
  36:	11 05       	cpc	r17, r1
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String7replaceERKS_S1_+0x3a>
  3a:	00 c0       	rjmp	.+0      	; 0x3c <_ZN6String7replaceERKS_S1_+0x3c>
  3c:	fb 01       	movw	r30, r22
  3e:	c4 80       	ldd	r12, Z+4	; 0x04
  40:	d5 80       	ldd	r13, Z+5	; 0x05
  42:	c1 14       	cp	r12, r1
  44:	d1 04       	cpc	r13, r1
  46:	01 f4       	brne	.+0      	; 0x48 <_ZN6String7replaceERKS_S1_+0x48>
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN6String7replaceERKS_S1_+0x4a>
	int diff = replace.len - find.len;
  4a:	da 01       	movw	r26, r20
  4c:	14 96       	adiw	r26, 0x04	; 4
  4e:	6d 90       	ld	r6, X+
  50:	7c 90       	ld	r7, X
  52:	15 97       	sbiw	r26, 0x05	; 5
  54:	6c 18       	sub	r6, r12
  56:	7d 08       	sbc	r7, r13
	char *readFrom = buffer;
  58:	fc 01       	movw	r30, r24
  5a:	e0 80       	ld	r14, Z
  5c:	f1 80       	ldd	r15, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
  5e:	61 14       	cp	r6, r1
  60:	71 04       	cpc	r7, r1
  62:	01 f0       	breq	.+0      	; 0x64 <_ZN6String7replaceERKS_S1_+0x64>
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZN6String7replaceERKS_S1_+0x66>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
  66:	d4 01       	movw	r26, r8
  68:	6c 91       	ld	r22, X
  6a:	11 96       	adiw	r26, 0x01	; 1
  6c:	7c 91       	ld	r23, X
  6e:	11 97       	sbiw	r26, 0x01	; 1
  70:	14 96       	adiw	r26, 0x04	; 4
  72:	4d 91       	ld	r20, X+
  74:	5c 91       	ld	r21, X
  76:	15 97       	sbiw	r26, 0x05	; 5
  78:	8c 2f       	mov	r24, r28
  7a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
			readFrom = foundAt + replace.len;
  7e:	f4 01       	movw	r30, r8
  80:	e4 80       	ldd	r14, Z+4	; 0x04
  82:	f5 80       	ldd	r15, Z+5	; 0x05
  84:	ec 0e       	add	r14, r28
  86:	fd 1e       	adc	r15, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
  88:	d2 01       	movw	r26, r4
  8a:	6d 91       	ld	r22, X+
  8c:	7c 91       	ld	r23, X
  8e:	c7 01       	movw	r24, r14
  90:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
  94:	ec 01       	movw	r28, r24
  96:	00 97       	sbiw	r24, 0x00	; 0
  98:	01 f4       	brne	.+0      	; 0x9a <_ZN6String7replaceERKS_S1_+0x9a>
  9a:	00 c0       	rjmp	.+0      	; 0x9c <_ZN6String7replaceERKS_S1_+0x9c>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
  9c:	77 fe       	sbrs	r7, 7
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <_ZN6String7replaceERKS_S1_+0xa0>
  a0:	67 01       	movw	r12, r14
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <_ZN6String7replaceERKS_S1_+0xa4>
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
  a4:	fb 01       	movw	r30, r22
  a6:	20 80       	ld	r2, Z
  a8:	31 80       	ldd	r3, Z+1	; 0x01
  aa:	e8 01       	movw	r28, r16
  ac:	00 c0       	rjmp	.+0      	; 0xae <_ZN6String7replaceERKS_S1_+0xae>
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
  ae:	8e 01       	movw	r16, r28
  b0:	0e 19       	sub	r16, r14
  b2:	1f 09       	sbc	r17, r15
			memcpy(writeTo, readFrom, n);
  b4:	c6 01       	movw	r24, r12
  b6:	b7 01       	movw	r22, r14
  b8:	a8 01       	movw	r20, r16
  ba:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
			writeTo += n;
  be:	0c 0d       	add	r16, r12
  c0:	1d 1d       	adc	r17, r13
			memcpy(writeTo, replace.buffer, replace.len);
  c2:	d4 01       	movw	r26, r8
  c4:	6c 91       	ld	r22, X
  c6:	11 96       	adiw	r26, 0x01	; 1
  c8:	7c 91       	ld	r23, X
  ca:	11 97       	sbiw	r26, 0x01	; 1
  cc:	14 96       	adiw	r26, 0x04	; 4
  ce:	4d 91       	ld	r20, X+
  d0:	5c 91       	ld	r21, X
  d2:	15 97       	sbiw	r26, 0x05	; 5
  d4:	c8 01       	movw	r24, r16
  d6:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
			writeTo += replace.len;
  da:	f4 01       	movw	r30, r8
  dc:	c4 80       	ldd	r12, Z+4	; 0x04
  de:	d5 80       	ldd	r13, Z+5	; 0x05
  e0:	c0 0e       	add	r12, r16
  e2:	d1 1e       	adc	r13, r17
			readFrom = foundAt + find.len;
  e4:	d2 01       	movw	r26, r4
  e6:	14 96       	adiw	r26, 0x04	; 4
  e8:	ed 90       	ld	r14, X+
  ea:	fc 90       	ld	r15, X
  ec:	15 97       	sbiw	r26, 0x05	; 5
  ee:	ec 0e       	add	r14, r28
  f0:	fd 1e       	adc	r15, r29
			len += diff;
  f2:	f5 01       	movw	r30, r10
  f4:	84 81       	ldd	r24, Z+4	; 0x04
  f6:	95 81       	ldd	r25, Z+5	; 0x05
  f8:	86 0d       	add	r24, r6
  fa:	97 1d       	adc	r25, r7
  fc:	95 83       	std	Z+5, r25	; 0x05
  fe:	84 83       	std	Z+4, r24	; 0x04
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 100:	d2 01       	movw	r26, r4
 102:	6d 91       	ld	r22, X+
 104:	7c 91       	ld	r23, X
 106:	c7 01       	movw	r24, r14
 108:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 10c:	ec 01       	movw	r28, r24
 10e:	00 97       	sbiw	r24, 0x00	; 0
 110:	01 f4       	brne	.+0      	; 0x112 <_ZN6String7replaceERKS_S1_+0x112>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
 112:	c6 01       	movw	r24, r12
 114:	b7 01       	movw	r22, r14
 116:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <_ZN6String7replaceERKS_S1_+0x11c>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
 11c:	7b 01       	movw	r14, r22
 11e:	ec 0c       	add	r14, r12
 120:	fd 1c       	adc	r15, r13
			size += diff;
 122:	c6 0d       	add	r28, r6
 124:	d7 1d       	adc	r29, r7
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 126:	c7 01       	movw	r24, r14
 128:	b1 01       	movw	r22, r2
 12a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 12e:	bc 01       	movw	r22, r24
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	01 f4       	brne	.+0      	; 0x134 <_ZN6String7replaceERKS_S1_+0x134>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
 134:	c0 17       	cp	r28, r16
 136:	d1 07       	cpc	r29, r17
 138:	01 f4       	brne	.+0      	; 0x13a <_ZN6String7replaceERKS_S1_+0x13a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <_ZN6String7replaceERKS_S1_+0x13c>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
 13c:	f5 01       	movw	r30, r10
 13e:	82 81       	ldd	r24, Z+2	; 0x02
 140:	93 81       	ldd	r25, Z+3	; 0x03
 142:	8c 17       	cp	r24, r28
 144:	9d 07       	cpc	r25, r29
 146:	00 f0       	brcs	.+0      	; 0x148 <_ZN6String7replaceERKS_S1_+0x148>
 148:	00 c0       	rjmp	.+0      	; 0x14a <_ZN6String7replaceERKS_S1_+0x14a>
 14a:	c5 01       	movw	r24, r10
 14c:	be 01       	movw	r22, r28
 14e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 152:	88 23       	and	r24, r24
 154:	01 f4       	brne	.+0      	; 0x156 <_ZN6String7replaceERKS_S1_+0x156>
 156:	00 c0       	rjmp	.+0      	; 0x158 <_ZN6String7replaceERKS_S1_+0x158>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 158:	c5 01       	movw	r24, r10
 15a:	b2 01       	movw	r22, r4
 15c:	a9 01       	movw	r20, r18
 15e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
 162:	ec 01       	movw	r28, r24
 164:	97 fd       	sbrc	r25, 7
 166:	00 c0       	rjmp	.+0      	; 0x168 <_ZN6String7replaceERKS_S1_+0x168>
			readFrom = buffer + index + find.len;
 168:	d5 01       	movw	r26, r10
 16a:	6d 91       	ld	r22, X+
 16c:	7c 91       	ld	r23, X
 16e:	11 97       	sbiw	r26, 0x01	; 1
 170:	f2 01       	movw	r30, r4
 172:	84 81       	ldd	r24, Z+4	; 0x04
 174:	95 81       	ldd	r25, Z+5	; 0x05
 176:	8c 0f       	add	r24, r28
 178:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 17a:	68 0f       	add	r22, r24
 17c:	79 1f       	adc	r23, r25
 17e:	14 96       	adiw	r26, 0x04	; 4
 180:	4d 91       	ld	r20, X+
 182:	5c 91       	ld	r21, X
 184:	15 97       	sbiw	r26, 0x05	; 5
 186:	48 1b       	sub	r20, r24
 188:	59 0b       	sbc	r21, r25
 18a:	cb 01       	movw	r24, r22
 18c:	86 0d       	add	r24, r6
 18e:	97 1d       	adc	r25, r7
 190:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
			len += diff;
 194:	d5 01       	movw	r26, r10
 196:	14 96       	adiw	r26, 0x04	; 4
 198:	8d 91       	ld	r24, X+
 19a:	9c 91       	ld	r25, X
 19c:	15 97       	sbiw	r26, 0x05	; 5
 19e:	86 0d       	add	r24, r6
 1a0:	97 1d       	adc	r25, r7
 1a2:	15 96       	adiw	r26, 0x05	; 5
 1a4:	9c 93       	st	X, r25
 1a6:	8e 93       	st	-X, r24
 1a8:	14 97       	sbiw	r26, 0x04	; 4
			buffer[len] = 0;
 1aa:	ed 91       	ld	r30, X+
 1ac:	fc 91       	ld	r31, X
 1ae:	11 97       	sbiw	r26, 0x01	; 1
 1b0:	e8 0f       	add	r30, r24
 1b2:	f9 1f       	adc	r31, r25
 1b4:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
 1b6:	2d 91       	ld	r18, X+
 1b8:	3c 91       	ld	r19, X
 1ba:	2c 0f       	add	r18, r28
 1bc:	3d 1f       	adc	r19, r29
 1be:	f4 01       	movw	r30, r8
 1c0:	60 81       	ld	r22, Z
 1c2:	71 81       	ldd	r23, Z+1	; 0x01
 1c4:	44 81       	ldd	r20, Z+4	; 0x04
 1c6:	55 81       	ldd	r21, Z+5	; 0x05
 1c8:	c9 01       	movw	r24, r18
 1ca:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7replaceERKS_S1_>
			index--;
 1ce:	9e 01       	movw	r18, r28
 1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <_ZN6String7replaceERKS_S1_+0x1d2>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
 1d2:	d5 01       	movw	r26, r10
 1d4:	14 96       	adiw	r26, 0x04	; 4
 1d6:	2d 91       	ld	r18, X+
 1d8:	3c 91       	ld	r19, X
 1da:	15 97       	sbiw	r26, 0x05	; 5
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	30 40       	sbci	r19, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 1e0:	37 ff       	sbrs	r19, 7
 1e2:	00 c0       	rjmp	.+0      	; 0x1e4 <_ZN6String7replaceERKS_S1_+0x1e4>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
 1e4:	df 91       	pop	r29
 1e6:	cf 91       	pop	r28
 1e8:	1f 91       	pop	r17
 1ea:	0f 91       	pop	r16
 1ec:	ff 90       	pop	r15
 1ee:	ef 90       	pop	r14
 1f0:	df 90       	pop	r13
 1f2:	cf 90       	pop	r12
 1f4:	bf 90       	pop	r11
 1f6:	af 90       	pop	r10
 1f8:	9f 90       	pop	r9
 1fa:	8f 90       	pop	r8
 1fc:	7f 90       	pop	r7
 1fe:	6f 90       	pop	r6
 200:	5f 90       	pop	r5
 202:	4f 90       	pop	r4
 204:	3f 90       	pop	r3
 206:	2f 90       	pop	r2
 208:	08 95       	ret

Disassembly of section .text._ZN6String7reserveEj:

00000000 <_ZN6String7reserveEj>:
	if (buffer) free(buffer);
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
	if (buffer && capacity >= size) return 1;
   6:	88 81       	ld	r24, Y
   8:	99 81       	ldd	r25, Y+1	; 0x01
   a:	89 2b       	or	r24, r25
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String7reserveEj+0xe>
   e:	8a 81       	ldd	r24, Y+2	; 0x02
  10:	9b 81       	ldd	r25, Y+3	; 0x03
  12:	86 17       	cp	r24, r22
  14:	97 07       	cpc	r25, r23
  16:	00 f4       	brcc	.+0      	; 0x18 <_ZN6String7reserveEj+0x18>
	if (changeBuffer(size)) {
  18:	ce 01       	movw	r24, r28
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String7reserveEj>
  1e:	88 23       	and	r24, r24
  20:	01 f0       	breq	.+0      	; 0x22 <_ZN6String7reserveEj+0x22>
		if (len == 0) buffer[0] = 0;
  22:	8c 81       	ldd	r24, Y+4	; 0x04
  24:	9d 81       	ldd	r25, Y+5	; 0x05
  26:	89 2b       	or	r24, r25
  28:	01 f4       	brne	.+0      	; 0x2a <_ZN6String7reserveEj+0x2a>
  2a:	e8 81       	ld	r30, Y
  2c:	f9 81       	ldd	r31, Y+1	; 0x01
  2e:	10 82       	st	Z, r1
  30:	81 e0       	ldi	r24, 0x01	; 1
		return 1;
	}
	return 0;
}
  32:	df 91       	pop	r29
  34:	cf 91       	pop	r28
  36:	08 95       	ret

Disassembly of section .text._ZN6String6concatEPKcj:

00000000 <_ZN6String6concatEPKcj>:
unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	7b 01       	movw	r14, r22
{
	unsigned int newlen = len + length;
  10:	6c 81       	ldd	r22, Y+4	; 0x04
  12:	7d 81       	ldd	r23, Y+5	; 0x05
	if (!cstr) return 0;
  14:	e1 14       	cp	r14, r1
  16:	f1 04       	cpc	r15, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6String6concatEPKcj+0x1a>
	if (length == 0) return 1;
  1a:	41 15       	cp	r20, r1
  1c:	51 05       	cpc	r21, r1
  1e:	01 f0       	breq	.+0      	; 0x20 <_ZN6String6concatEPKcj+0x20>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
  20:	8a 01       	movw	r16, r20
  22:	06 0f       	add	r16, r22
  24:	17 1f       	adc	r17, r23
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
  26:	b8 01       	movw	r22, r16
  28:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
  2c:	88 23       	and	r24, r24
  2e:	01 f0       	breq	.+0      	; 0x30 <_ZN6String6concatEPKcj+0x30>
	strcpy(buffer + len, cstr);
  30:	88 81       	ld	r24, Y
  32:	99 81       	ldd	r25, Y+1	; 0x01
  34:	2c 81       	ldd	r18, Y+4	; 0x04
  36:	3d 81       	ldd	r19, Y+5	; 0x05
  38:	82 0f       	add	r24, r18
  3a:	93 1f       	adc	r25, r19
  3c:	b7 01       	movw	r22, r14
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKcj>
	len = newlen;
  42:	1d 83       	std	Y+5, r17	; 0x05
  44:	0c 83       	std	Y+4, r16	; 0x04
  46:	81 e0       	ldi	r24, 0x01	; 1
  48:	00 c0       	rjmp	.+0      	; 0x4a <_ZN6String6concatEPKcj+0x4a>
	return 1;
  4a:	80 e0       	ldi	r24, 0x00	; 0
}
  4c:	df 91       	pop	r29
  4e:	cf 91       	pop	r28
  50:	1f 91       	pop	r17
  52:	0f 91       	pop	r16
  54:	ff 90       	pop	r15
  56:	ef 90       	pop	r14
  58:	08 95       	ret

Disassembly of section .text._ZN6String6concatEm:

00000000 <_ZN6String6concatEm>:
	char buf[12];
	ltoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned long num)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2b 97       	sbiw	r28, 0x0b	; 11
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
{
	char buf[11];
	ultoa(num, buf, 10);
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	8e 01       	movw	r16, r28
  24:	0f 5f       	subi	r16, 0xFF	; 255
  26:	1f 4f       	sbci	r17, 0xFF	; 255
  28:	a8 01       	movw	r20, r16
  2a:	2a e0       	ldi	r18, 0x0A	; 10
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
	return concat(buf, strlen(buf));
  32:	f8 01       	movw	r30, r16
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEm+0x3a>
  3a:	31 97       	sbiw	r30, 0x01	; 1
  3c:	e0 1b       	sub	r30, r16
  3e:	f1 0b       	sbc	r31, r17
  40:	c7 01       	movw	r24, r14
  42:	b8 01       	movw	r22, r16
  44:	af 01       	movw	r20, r30
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEm>
}
  4a:	2b 96       	adiw	r28, 0x0b	; 11
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6String6concatEl:

00000000 <_ZN6String6concatEl>:
	char buf[6];
	utoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(long num)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	2c 97       	sbiw	r28, 0x0c	; 12
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
{
	char buf[12];
	ltoa(num, buf, 10);
  1e:	cb 01       	movw	r24, r22
  20:	ba 01       	movw	r22, r20
  22:	8e 01       	movw	r16, r28
  24:	0f 5f       	subi	r16, 0xFF	; 255
  26:	1f 4f       	sbci	r17, 0xFF	; 255
  28:	a8 01       	movw	r20, r16
  2a:	2a e0       	ldi	r18, 0x0A	; 10
  2c:	30 e0       	ldi	r19, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
	return concat(buf, strlen(buf));
  32:	f8 01       	movw	r30, r16
  34:	01 90       	ld	r0, Z+
  36:	00 20       	and	r0, r0
  38:	01 f4       	brne	.+0      	; 0x3a <_ZN6String6concatEl+0x3a>
  3a:	31 97       	sbiw	r30, 0x01	; 1
  3c:	e0 1b       	sub	r30, r16
  3e:	f1 0b       	sbc	r31, r17
  40:	c7 01       	movw	r24, r14
  42:	b8 01       	movw	r22, r16
  44:	af 01       	movw	r20, r30
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEl>
}
  4a:	2c 96       	adiw	r28, 0x0c	; 12
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6String6concatEj:

00000000 <_ZN6String6concatEj>:
	char buf[7];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(unsigned int num)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6String6concatEj+0xe>
   e:	00 d0       	rcall	.+0      	; 0x10 <_ZN6String6concatEj+0x10>
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  14:	7c 01       	movw	r14, r24
  16:	cb 01       	movw	r24, r22
{
	char buf[6];
	utoa(num, buf, 10);
  18:	8e 01       	movw	r16, r28
  1a:	0f 5f       	subi	r16, 0xFF	; 255
  1c:	1f 4f       	sbci	r17, 0xFF	; 255
  1e:	b8 01       	movw	r22, r16
  20:	4a e0       	ldi	r20, 0x0A	; 10
  22:	50 e0       	ldi	r21, 0x00	; 0
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
	return concat(buf, strlen(buf));
  28:	f8 01       	movw	r30, r16
  2a:	01 90       	ld	r0, Z+
  2c:	00 20       	and	r0, r0
  2e:	01 f4       	brne	.+0      	; 0x30 <_ZN6String6concatEj+0x30>
  30:	31 97       	sbiw	r30, 0x01	; 1
  32:	e0 1b       	sub	r30, r16
  34:	f1 0b       	sbc	r31, r17
  36:	c7 01       	movw	r24, r14
  38:	b8 01       	movw	r22, r16
  3a:	af 01       	movw	r20, r30
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEj>
}
  40:	26 96       	adiw	r28, 0x06	; 6
  42:	0f b6       	in	r0, 0x3f	; 63
  44:	f8 94       	cli
  46:	de bf       	out	0x3e, r29	; 62
  48:	0f be       	out	0x3f, r0	; 63
  4a:	cd bf       	out	0x3d, r28	; 61
  4c:	cf 91       	pop	r28
  4e:	df 91       	pop	r29
  50:	1f 91       	pop	r17
  52:	0f 91       	pop	r16
  54:	ff 90       	pop	r15
  56:	ef 90       	pop	r14
  58:	08 95       	ret

Disassembly of section .text._ZN6String6concatEi:

00000000 <_ZN6String6concatEi>:
	char buf[4];
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	27 97       	sbiw	r28, 0x07	; 7
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	7c 01       	movw	r14, r24
  1e:	cb 01       	movw	r24, r22
{
	char buf[7];
	itoa(num, buf, 10);
  20:	8e 01       	movw	r16, r28
  22:	0f 5f       	subi	r16, 0xFF	; 255
  24:	1f 4f       	sbci	r17, 0xFF	; 255
  26:	b8 01       	movw	r22, r16
  28:	4a e0       	ldi	r20, 0x0A	; 10
  2a:	50 e0       	ldi	r21, 0x00	; 0
  2c:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
	return concat(buf, strlen(buf));
  30:	f8 01       	movw	r30, r16
  32:	01 90       	ld	r0, Z+
  34:	00 20       	and	r0, r0
  36:	01 f4       	brne	.+0      	; 0x38 <_ZN6String6concatEi+0x38>
  38:	31 97       	sbiw	r30, 0x01	; 1
  3a:	e0 1b       	sub	r30, r16
  3c:	f1 0b       	sbc	r31, r17
  3e:	c7 01       	movw	r24, r14
  40:	b8 01       	movw	r22, r16
  42:	af 01       	movw	r20, r30
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEi>
}
  48:	27 96       	adiw	r28, 0x07	; 7
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6String6concatEh:

00000000 <_ZN6String6concatEh>:
	buf[0] = c;
	buf[1] = 0;
	return concat(buf, 1);
}

unsigned char String::concat(unsigned char num)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	00 d0       	rcall	.+0      	; 0xe <_ZN6String6concatEh+0xe>
   e:	0f 92       	push	r0
  10:	cd b7       	in	r28, 0x3d	; 61
  12:	de b7       	in	r29, 0x3e	; 62
  14:	7c 01       	movw	r14, r24
  16:	86 2f       	mov	r24, r22
{
	char buf[4];
	itoa(num, buf, 10);
  18:	90 e0       	ldi	r25, 0x00	; 0
  1a:	8e 01       	movw	r16, r28
  1c:	0f 5f       	subi	r16, 0xFF	; 255
  1e:	1f 4f       	sbci	r17, 0xFF	; 255
  20:	b8 01       	movw	r22, r16
  22:	4a e0       	ldi	r20, 0x0A	; 10
  24:	50 e0       	ldi	r21, 0x00	; 0
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
	return concat(buf, strlen(buf));
  2a:	f8 01       	movw	r30, r16
  2c:	01 90       	ld	r0, Z+
  2e:	00 20       	and	r0, r0
  30:	01 f4       	brne	.+0      	; 0x32 <_ZN6String6concatEh+0x32>
  32:	31 97       	sbiw	r30, 0x01	; 1
  34:	e0 1b       	sub	r30, r16
  36:	f1 0b       	sbc	r31, r17
  38:	c7 01       	movw	r24, r14
  3a:	b8 01       	movw	r22, r16
  3c:	af 01       	movw	r20, r30
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEh>
}
  42:	0f 90       	pop	r0
  44:	0f 90       	pop	r0
  46:	0f 90       	pop	r0
  48:	0f 90       	pop	r0
  4a:	cf 91       	pop	r28
  4c:	df 91       	pop	r29
  4e:	1f 91       	pop	r17
  50:	0f 91       	pop	r16
  52:	ff 90       	pop	r15
  54:	ef 90       	pop	r14
  56:	08 95       	ret

Disassembly of section .text._ZN6String6concatEc:

00000000 <_ZN6String6concatEc>:
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
}

unsigned char String::concat(char c)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
{
	char buf[2];
	buf[0] = c;
   c:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
   e:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
  10:	be 01       	movw	r22, r28
  12:	6f 5f       	subi	r22, 0xFF	; 255
  14:	7f 4f       	sbci	r23, 0xFF	; 255
  16:	41 e0       	ldi	r20, 0x01	; 1
  18:	50 e0       	ldi	r21, 0x00	; 0
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEc>
}
  1e:	0f 90       	pop	r0
  20:	0f 90       	pop	r0
  22:	cf 91       	pop	r28
  24:	df 91       	pop	r29
  26:	08 95       	ret

Disassembly of section .text._ZN6String6concatEPKc:

00000000 <_ZN6String6concatEPKc>:
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
   0:	61 15       	cp	r22, r1
   2:	71 05       	cpc	r23, r1
   4:	01 f4       	brne	.+0      	; 0x6 <_ZN6String6concatEPKc+0x6>
   6:	80 e0       	ldi	r24, 0x00	; 0
   8:	08 95       	ret
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
   a:	db 01       	movw	r26, r22
   c:	0d 90       	ld	r0, X+
   e:	00 20       	and	r0, r0
  10:	01 f4       	brne	.+0      	; 0x12 <_ZN6String6concatEPKc+0x12>
  12:	11 97       	sbiw	r26, 0x01	; 1
  14:	a6 1b       	sub	r26, r22
  16:	b7 0b       	sbc	r27, r23
  18:	ad 01       	movw	r20, r26
  1a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatEPKc>
}
  1e:	08 95       	ret

Disassembly of section .text._ZN6String6concatERKS_:

00000000 <_ZN6String6concatERKS_>:

/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
   0:	fb 01       	movw	r30, r22
{
	return concat(s.buffer, s.len);
   2:	60 81       	ld	r22, Z
   4:	71 81       	ldd	r23, Z+1	; 0x01
   6:	44 81       	ldd	r20, Z+4	; 0x04
   8:	55 81       	ldd	r21, Z+5	; 0x05
   a:	0e 94 00 00 	call	0	; 0x0 <_ZN6String6concatERKS_>
}
   e:	08 95       	ret

Disassembly of section .text._ZN6String10invalidateEv:

00000000 <_ZN6String10invalidateEv>:
	capacity = 0;
	len = 0;
	flags = 0;
}

void String::invalidate(void)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
{
	if (buffer) free(buffer);
   6:	88 81       	ld	r24, Y
   8:	99 81       	ldd	r25, Y+1	; 0x01
   a:	00 97       	sbiw	r24, 0x00	; 0
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6String10invalidateEv+0xe>
   e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String10invalidateEv>
	buffer = NULL;
  12:	19 82       	std	Y+1, r1	; 0x01
  14:	18 82       	st	Y, r1
	capacity = len = 0;
  16:	1d 82       	std	Y+5, r1	; 0x05
  18:	1c 82       	std	Y+4, r1	; 0x04
  1a:	1b 82       	std	Y+3, r1	; 0x03
  1c:	1a 82       	std	Y+2, r1	; 0x02
}
  1e:	df 91       	pop	r29
  20:	cf 91       	pop	r28
  22:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperm:

00000000 <_ZplRK15StringSumHelperm>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperm+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperm>
	return a;
}
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperl:

00000000 <_ZplRK15StringSumHelperl>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperl+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperl>
	return a;
}
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperj:

00000000 <_ZplRK15StringSumHelperj>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperj+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperj>
	return a;
}
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperi:

00000000 <_ZplRK15StringSumHelperi>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperi+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperi>
	return a;
}
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperh:

00000000 <_ZplRK15StringSumHelperh>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperh+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperh>
	return a;
}
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperc:

00000000 <_ZplRK15StringSumHelperc>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
   8:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
   c:	88 23       	and	r24, r24
   e:	01 f4       	brne	.+0      	; 0x10 <_ZplRK15StringSumHelperc+0x10>
  10:	81 2f       	mov	r24, r17
  12:	90 2f       	mov	r25, r16
  14:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperc>
	return a;
}
  18:	81 2f       	mov	r24, r17
  1a:	90 2f       	mov	r25, r16
  1c:	1f 91       	pop	r17
  1e:	0f 91       	pop	r16
  20:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperPKc:

00000000 <_ZplRK15StringSumHelperPKc>:
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   8:	61 15       	cp	r22, r1
   a:	71 05       	cpc	r23, r1
   c:	01 f0       	breq	.+0      	; 0xe <_ZplRK15StringSumHelperPKc+0xe>
   e:	db 01       	movw	r26, r22
  10:	0d 90       	ld	r0, X+
  12:	00 20       	and	r0, r0
  14:	01 f4       	brne	.+0      	; 0x16 <_ZplRK15StringSumHelperPKc+0x16>
  16:	11 97       	sbiw	r26, 0x01	; 1
  18:	a6 1b       	sub	r26, r22
  1a:	b7 0b       	sbc	r27, r23
  1c:	ad 01       	movw	r20, r26
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
  22:	88 23       	and	r24, r24
  24:	01 f4       	brne	.+0      	; 0x26 <_ZplRK15StringSumHelperPKc+0x26>
  26:	81 2f       	mov	r24, r17
  28:	90 2f       	mov	r25, r16
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperPKc>
	return a;
}
  2e:	81 2f       	mov	r24, r17
  30:	90 2f       	mov	r25, r16
  32:	1f 91       	pop	r17
  34:	0f 91       	pop	r16
  36:	08 95       	ret

Disassembly of section .text._ZplRK15StringSumHelperRK6String:

00000000 <_ZplRK15StringSumHelperRK6String>:

/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
   8:	fb 01       	movw	r30, r22
{
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   a:	60 81       	ld	r22, Z
   c:	71 81       	ldd	r23, Z+1	; 0x01
   e:	44 81       	ldd	r20, Z+4	; 0x04
  10:	55 81       	ldd	r21, Z+5	; 0x05
  12:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
  16:	88 23       	and	r24, r24
  18:	01 f4       	brne	.+0      	; 0x1a <_ZplRK15StringSumHelperRK6String+0x1a>
  1a:	81 2f       	mov	r24, r17
  1c:	90 2f       	mov	r25, r16
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZplRK15StringSumHelperRK6String>
	return a;
}
  22:	81 2f       	mov	r24, r17
  24:	90 2f       	mov	r25, r16
  26:	1f 91       	pop	r17
  28:	0f 91       	pop	r16
  2a:	08 95       	ret

Disassembly of section .text._ZN6String4copyEPKcj:

00000000 <_ZN6String4copyEPKcj>:

/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	cf 93       	push	r28
   a:	df 93       	push	r29
   c:	ec 01       	movw	r28, r24
   e:	7b 01       	movw	r14, r22
  10:	8a 01       	movw	r16, r20
{
	if (!reserve(length)) {
  12:	ba 01       	movw	r22, r20
  14:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  18:	88 23       	and	r24, r24
  1a:	01 f4       	brne	.+0      	; 0x1c <_ZN6String4copyEPKcj+0x1c>
		invalidate();
  1c:	ce 01       	movw	r24, r28
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6String4copyEPKcj+0x24>
		return *this;
	}
	len = length;
  24:	1d 83       	std	Y+5, r17	; 0x05
  26:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
  28:	88 81       	ld	r24, Y
  2a:	99 81       	ldd	r25, Y+1	; 0x01
  2c:	b7 01       	movw	r22, r14
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZN6String4copyEPKcj>
	return *this;
}
  32:	ce 01       	movw	r24, r28
  34:	df 91       	pop	r29
  36:	cf 91       	pop	r28
  38:	1f 91       	pop	r17
  3a:	0f 91       	pop	r16
  3c:	ff 90       	pop	r15
  3e:	ef 90       	pop	r14
  40:	08 95       	ret

Disassembly of section .text._ZN6StringC1EPKc:

00000000 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   6:	19 82       	std	Y+1, r1	; 0x01
   8:	18 82       	st	Y, r1
	capacity = 0;
   a:	1b 82       	std	Y+3, r1	; 0x03
   c:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
   e:	1d 82       	std	Y+5, r1	; 0x05
  10:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
  12:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
  14:	61 15       	cp	r22, r1
  16:	71 05       	cpc	r23, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6StringC1EPKc+0x1a>
  1a:	db 01       	movw	r26, r22
  1c:	0d 90       	ld	r0, X+
  1e:	00 20       	and	r0, r0
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6StringC1EPKc+0x22>
  22:	11 97       	sbiw	r26, 0x01	; 1
  24:	a6 1b       	sub	r26, r22
  26:	b7 0b       	sbc	r27, r23
  28:	ad 01       	movw	r20, r26
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1EPKc>
}
  2e:	df 91       	pop	r29
  30:	cf 91       	pop	r28
  32:	08 95       	ret

Disassembly of section .text._ZN6StringC2EPKc:

00000000 <_ZN6StringC2EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   6:	19 82       	std	Y+1, r1	; 0x01
   8:	18 82       	st	Y, r1
	capacity = 0;
   a:	1b 82       	std	Y+3, r1	; 0x03
   c:	1a 82       	std	Y+2, r1	; 0x02
	len = 0;
   e:	1d 82       	std	Y+5, r1	; 0x05
  10:	1c 82       	std	Y+4, r1	; 0x04
	flags = 0;
  12:	1e 82       	std	Y+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
  14:	61 15       	cp	r22, r1
  16:	71 05       	cpc	r23, r1
  18:	01 f0       	breq	.+0      	; 0x1a <_ZN6StringC2EPKc+0x1a>
  1a:	db 01       	movw	r26, r22
  1c:	0d 90       	ld	r0, X+
  1e:	00 20       	and	r0, r0
  20:	01 f4       	brne	.+0      	; 0x22 <_ZN6StringC2EPKc+0x22>
  22:	11 97       	sbiw	r26, 0x01	; 1
  24:	a6 1b       	sub	r26, r22
  26:	b7 0b       	sbc	r27, r23
  28:	ad 01       	movw	r20, r26
  2a:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2EPKc>
}
  2e:	df 91       	pop	r29
  30:	cf 91       	pop	r28
  32:	08 95       	ret

Disassembly of section .text._ZN6StringaSEPKc:

00000000 <_ZN6StringaSEPKc>:
	if (this != &rval) move(rval);
	return *this;
}
#endif

String & String::operator = (const char *cstr)
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	18 2f       	mov	r17, r24
   6:	09 2f       	mov	r16, r25
{
	if (cstr) copy(cstr, strlen(cstr));
   8:	61 15       	cp	r22, r1
   a:	71 05       	cpc	r23, r1
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6StringaSEPKc+0xe>
   e:	db 01       	movw	r26, r22
  10:	0d 90       	ld	r0, X+
  12:	00 20       	and	r0, r0
  14:	01 f4       	brne	.+0      	; 0x16 <_ZN6StringaSEPKc+0x16>
  16:	11 97       	sbiw	r26, 0x01	; 1
  18:	a6 1b       	sub	r26, r22
  1a:	b7 0b       	sbc	r27, r23
  1c:	ad 01       	movw	r20, r26
  1e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
  22:	00 c0       	rjmp	.+0      	; 0x24 <_ZN6StringaSEPKc+0x24>
	else invalidate();
  24:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSEPKc>
	
	return *this;
}
  28:	81 2f       	mov	r24, r17
  2a:	90 2f       	mov	r25, r16
  2c:	1f 91       	pop	r17
  2e:	0f 91       	pop	r16
  30:	08 95       	ret

Disassembly of section .text._ZN6StringC1Emh:

00000000 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a1 97       	sbiw	r28, 0x21	; 33
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  1e:	fc 01       	movw	r30, r24
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
	capacity = 0;
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2c:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
  2e:	cb 01       	movw	r24, r22
  30:	ba 01       	movw	r22, r20
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	a7 01       	movw	r20, r14
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
	*this = buf;
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Emh>
}
  4a:	a1 96       	adiw	r28, 0x21	; 33
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6StringC2Emh:

00000000 <_ZN6StringC2Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a1 97       	sbiw	r28, 0x21	; 33
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  1e:	fc 01       	movw	r30, r24
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
	capacity = 0;
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2c:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
  2e:	cb 01       	movw	r24, r22
  30:	ba 01       	movw	r22, r20
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	a7 01       	movw	r20, r14
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Emh>
	*this = buf;
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Emh>
}
  4a:	a1 96       	adiw	r28, 0x21	; 33
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6StringC1Elh:

00000000 <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a2 97       	sbiw	r28, 0x22	; 34
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  1e:	fc 01       	movw	r30, r24
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
	capacity = 0;
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2c:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
  2e:	cb 01       	movw	r24, r22
  30:	ba 01       	movw	r22, r20
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	a7 01       	movw	r20, r14
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
	*this = buf;
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Elh>
}
  4a:	a2 96       	adiw	r28, 0x22	; 34
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6StringC2Elh:

00000000 <_ZN6StringC2Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	a2 97       	sbiw	r28, 0x22	; 34
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  1e:	fc 01       	movw	r30, r24
  20:	11 82       	std	Z+1, r1	; 0x01
  22:	10 82       	st	Z, r1
	capacity = 0;
  24:	13 82       	std	Z+3, r1	; 0x03
  26:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  28:	15 82       	std	Z+5, r1	; 0x05
  2a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2c:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
  2e:	cb 01       	movw	r24, r22
  30:	ba 01       	movw	r22, r20
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	a7 01       	movw	r20, r14
  3c:	30 e0       	ldi	r19, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Elh>
	*this = buf;
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Elh>
}
  4a:	a2 96       	adiw	r28, 0x22	; 34
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6StringC1Ejh:

00000000 <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	61 97       	sbiw	r28, 0x11	; 17
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
	capacity = 0;
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2e:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
  30:	7e 01       	movw	r14, r28
  32:	08 94       	sec
  34:	e1 1c       	adc	r14, r1
  36:	f1 1c       	adc	r15, r1
  38:	b7 01       	movw	r22, r14
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
	*this = buf;
  40:	c8 01       	movw	r24, r16
  42:	b7 01       	movw	r22, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ejh>
}
  48:	61 96       	adiw	r28, 0x11	; 17
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ejh:

00000000 <_ZN6StringC2Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	61 97       	sbiw	r28, 0x11	; 17
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
	capacity = 0;
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2e:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
  30:	7e 01       	movw	r14, r28
  32:	08 94       	sec
  34:	e1 1c       	adc	r14, r1
  36:	f1 1c       	adc	r15, r1
  38:	b7 01       	movw	r22, r14
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ejh>
	*this = buf;
  40:	c8 01       	movw	r24, r16
  42:	b7 01       	movw	r22, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ejh>
}
  48:	61 96       	adiw	r28, 0x11	; 17
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6StringC1Eih:

00000000 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	62 97       	sbiw	r28, 0x12	; 18
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
	capacity = 0;
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2e:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
  30:	7e 01       	movw	r14, r28
  32:	08 94       	sec
  34:	e1 1c       	adc	r14, r1
  36:	f1 1c       	adc	r15, r1
  38:	b7 01       	movw	r22, r14
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
	*this = buf;
  40:	c8 01       	movw	r24, r16
  42:	b7 01       	movw	r22, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Eih>
}
  48:	62 96       	adiw	r28, 0x12	; 18
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6StringC2Eih:

00000000 <_ZN6StringC2Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	62 97       	sbiw	r28, 0x12	; 18
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
	capacity = 0;
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2e:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
  30:	7e 01       	movw	r14, r28
  32:	08 94       	sec
  34:	e1 1c       	adc	r14, r1
  36:	f1 1c       	adc	r15, r1
  38:	b7 01       	movw	r22, r14
  3a:	50 e0       	ldi	r21, 0x00	; 0
  3c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Eih>
	*this = buf;
  40:	c8 01       	movw	r24, r16
  42:	b7 01       	movw	r22, r14
  44:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Eih>
}
  48:	62 96       	adiw	r28, 0x12	; 18
  4a:	0f b6       	in	r0, 0x3f	; 63
  4c:	f8 94       	cli
  4e:	de bf       	out	0x3e, r29	; 62
  50:	0f be       	out	0x3f, r0	; 63
  52:	cd bf       	out	0x3d, r28	; 61
  54:	cf 91       	pop	r28
  56:	df 91       	pop	r29
  58:	1f 91       	pop	r17
  5a:	0f 91       	pop	r16
  5c:	ff 90       	pop	r15
  5e:	ef 90       	pop	r14
  60:	08 95       	ret

Disassembly of section .text._ZN6StringC1Ehh:

00000000 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	29 97       	sbiw	r28, 0x09	; 9
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
	capacity = 0;
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2e:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	b7 01       	movw	r22, r14
  3c:	50 e0       	ldi	r21, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
	*this = buf;
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ehh>
}
  4a:	29 96       	adiw	r28, 0x09	; 9
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ehh:

00000000 <_ZN6StringC2Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
   0:	ef 92       	push	r14
   2:	ff 92       	push	r15
   4:	0f 93       	push	r16
   6:	1f 93       	push	r17
   8:	df 93       	push	r29
   a:	cf 93       	push	r28
   c:	cd b7       	in	r28, 0x3d	; 61
   e:	de b7       	in	r29, 0x3e	; 62
  10:	29 97       	sbiw	r28, 0x09	; 9
  12:	0f b6       	in	r0, 0x3f	; 63
  14:	f8 94       	cli
  16:	de bf       	out	0x3e, r29	; 62
  18:	0f be       	out	0x3f, r0	; 63
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	8c 01       	movw	r16, r24
  1e:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
  20:	f8 01       	movw	r30, r16
  22:	11 82       	std	Z+1, r1	; 0x01
  24:	10 82       	st	Z, r1
	capacity = 0;
  26:	13 82       	std	Z+3, r1	; 0x03
  28:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  2a:	15 82       	std	Z+5, r1	; 0x05
  2c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  2e:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
  30:	90 e0       	ldi	r25, 0x00	; 0
  32:	7e 01       	movw	r14, r28
  34:	08 94       	sec
  36:	e1 1c       	adc	r14, r1
  38:	f1 1c       	adc	r15, r1
  3a:	b7 01       	movw	r22, r14
  3c:	50 e0       	ldi	r21, 0x00	; 0
  3e:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ehh>
	*this = buf;
  42:	c8 01       	movw	r24, r16
  44:	b7 01       	movw	r22, r14
  46:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ehh>
}
  4a:	29 96       	adiw	r28, 0x09	; 9
  4c:	0f b6       	in	r0, 0x3f	; 63
  4e:	f8 94       	cli
  50:	de bf       	out	0x3e, r29	; 62
  52:	0f be       	out	0x3f, r0	; 63
  54:	cd bf       	out	0x3d, r28	; 61
  56:	cf 91       	pop	r28
  58:	df 91       	pop	r29
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	ff 90       	pop	r15
  60:	ef 90       	pop	r14
  62:	08 95       	ret

Disassembly of section .text._ZN6StringC1Ec:

00000000 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e:	11 82       	std	Z+1, r1	; 0x01
  10:	10 82       	st	Z, r1
	capacity = 0;
  12:	13 82       	std	Z+3, r1	; 0x03
  14:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  16:	15 82       	std	Z+5, r1	; 0x05
  18:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  1a:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
  1c:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
  1e:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
  20:	be 01       	movw	r22, r28
  22:	6f 5f       	subi	r22, 0xFF	; 255
  24:	7f 4f       	sbci	r23, 0xFF	; 255
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1Ec>
}
  2a:	0f 90       	pop	r0
  2c:	0f 90       	pop	r0
  2e:	cf 91       	pop	r28
  30:	df 91       	pop	r29
  32:	08 95       	ret

Disassembly of section .text._ZN6StringC2Ec:

00000000 <_ZN6StringC2Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	0f 92       	push	r0
   8:	cd b7       	in	r28, 0x3d	; 61
   a:	de b7       	in	r29, 0x3e	; 62
   c:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   e:	11 82       	std	Z+1, r1	; 0x01
  10:	10 82       	st	Z, r1
	capacity = 0;
  12:	13 82       	std	Z+3, r1	; 0x03
  14:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
  16:	15 82       	std	Z+5, r1	; 0x05
  18:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
  1a:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
  1c:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
  1e:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
  20:	be 01       	movw	r22, r28
  22:	6f 5f       	subi	r22, 0xFF	; 255
  24:	7f 4f       	sbci	r23, 0xFF	; 255
  26:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2Ec>
}
  2a:	0f 90       	pop	r0
  2c:	0f 90       	pop	r0
  2e:	cf 91       	pop	r28
  30:	df 91       	pop	r29
  32:	08 95       	ret

Disassembly of section .text._ZNK6String9substringEjj:

00000000 <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	08 2f       	mov	r16, r24
  14:	b9 2e       	mov	r11, r25
  16:	6b 01       	movw	r12, r22
  18:	7a 01       	movw	r14, r20
  1a:	e9 01       	movw	r28, r18
{
	if (left > right) {
  1c:	24 17       	cp	r18, r20
  1e:	35 07       	cpc	r19, r21
  20:	00 f4       	brcc	.+0      	; 0x22 <_ZNK6String9substringEjj+0x22>
  22:	ea 01       	movw	r28, r20
  24:	79 01       	movw	r14, r18
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
  26:	80 2f       	mov	r24, r16
  28:	9b 2d       	mov	r25, r11
  2a:	60 e0       	ldi	r22, 0x00	; 0
  2c:	70 e0       	ldi	r23, 0x00	; 0
  2e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
	if (left > len) return out;
  32:	d6 01       	movw	r26, r12
  34:	14 96       	adiw	r26, 0x04	; 4
  36:	8d 91       	ld	r24, X+
  38:	9c 91       	ld	r25, X
  3a:	15 97       	sbiw	r26, 0x05	; 5
  3c:	8e 15       	cp	r24, r14
  3e:	9f 05       	cpc	r25, r15
  40:	00 f0       	brcs	.+0      	; 0x42 <_ZNK6String9substringEjj+0x42>
  42:	8c 17       	cp	r24, r28
  44:	9d 07       	cpc	r25, r29
  46:	00 f4       	brcc	.+0      	; 0x48 <_ZNK6String9substringEjj+0x48>
  48:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
  4a:	d6 01       	movw	r26, r12
  4c:	ed 91       	ld	r30, X+
  4e:	fc 91       	ld	r31, X
  50:	11 97       	sbiw	r26, 0x01	; 1
  52:	ec 0f       	add	r30, r28
  54:	fd 1f       	adc	r31, r29
  56:	10 81       	ld	r17, Z
	buffer[right] = '\0';	
  58:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
  5a:	6d 91       	ld	r22, X+
  5c:	7c 91       	ld	r23, X
  5e:	6e 0d       	add	r22, r14
  60:	7f 1d       	adc	r23, r15
  62:	80 2f       	mov	r24, r16
  64:	9b 2d       	mov	r25, r11
  66:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEjj>
	buffer[right] = temp;  //restore character
  6a:	d6 01       	movw	r26, r12
  6c:	ed 91       	ld	r30, X+
  6e:	fc 91       	ld	r31, X
  70:	ec 0f       	add	r30, r28
  72:	fd 1f       	adc	r31, r29
  74:	10 83       	st	Z, r17
	return out;
}
  76:	80 2f       	mov	r24, r16
  78:	9b 2d       	mov	r25, r11
  7a:	df 91       	pop	r29
  7c:	cf 91       	pop	r28
  7e:	1f 91       	pop	r17
  80:	0f 91       	pop	r16
  82:	ff 90       	pop	r15
  84:	ef 90       	pop	r14
  86:	df 90       	pop	r13
  88:	cf 90       	pop	r12
  8a:	bf 90       	pop	r11
  8c:	08 95       	ret

Disassembly of section .text._ZNK6String9substringEj:

00000000 <_ZNK6String9substringEj>:
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}

String String::substring( unsigned int left ) const
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
   4:	8c 01       	movw	r16, r24
   6:	fb 01       	movw	r30, r22
{
	return substring(left, len);
   8:	24 81       	ldd	r18, Z+4	; 0x04
   a:	35 81       	ldd	r19, Z+5	; 0x05
   c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String9substringEj>
}
  10:	c8 01       	movw	r24, r16
  12:	1f 91       	pop	r17
  14:	0f 91       	pop	r16
  16:	08 95       	ret

Disassembly of section .text._ZN6StringaSERKS_:

00000000 <_ZN6StringaSERKS_>:
	rhs.capacity = 0;
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
   4:	ec 01       	movw	r28, r24
   6:	fb 01       	movw	r30, r22
{
	if (this == &rhs) return *this;
   8:	86 17       	cp	r24, r22
   a:	97 07       	cpc	r25, r23
   c:	01 f0       	breq	.+0      	; 0xe <_ZN6StringaSERKS_+0xe>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   e:	60 81       	ld	r22, Z
  10:	71 81       	ldd	r23, Z+1	; 0x01
  12:	61 15       	cp	r22, r1
  14:	71 05       	cpc	r23, r1
  16:	01 f0       	breq	.+0      	; 0x18 <_ZN6StringaSERKS_+0x18>
  18:	44 81       	ldd	r20, Z+4	; 0x04
  1a:	55 81       	ldd	r21, Z+5	; 0x05
  1c:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
  20:	00 c0       	rjmp	.+0      	; 0x22 <_ZN6StringaSERKS_+0x22>
	else invalidate();
  22:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringaSERKS_>
	
	return *this;
}
  26:	ce 01       	movw	r24, r28
  28:	df 91       	pop	r29
  2a:	cf 91       	pop	r28
  2c:	08 95       	ret

Disassembly of section .text._ZN6StringC1ERKS_:

00000000 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
   0:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   2:	11 82       	std	Z+1, r1	; 0x01
   4:	10 82       	st	Z, r1
	capacity = 0;
   6:	13 82       	std	Z+3, r1	; 0x03
   8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
   a:	15 82       	std	Z+5, r1	; 0x05
   c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
   e:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC1ERKS_>
}
  14:	08 95       	ret

Disassembly of section .text._ZN6StringC2ERKS_:

00000000 <_ZN6StringC2ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
   0:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   2:	11 82       	std	Z+1, r1	; 0x01
   4:	10 82       	st	Z, r1
	capacity = 0;
   6:	13 82       	std	Z+3, r1	; 0x03
   8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
   a:	15 82       	std	Z+5, r1	; 0x05
   c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
   e:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
  10:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringC2ERKS_>
}
  14:	08 95       	ret

Disassembly of section .text._ZN6StringD1Ev:

00000000 <_ZN6StringD1Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringD1Ev>
}
   a:	08 95       	ret

Disassembly of section .text._ZN6StringD2Ev:

00000000 <_ZN6StringD2Ev>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::~String()
   0:	fc 01       	movw	r30, r24
{
	free(buffer);
   2:	80 81       	ld	r24, Z
   4:	91 81       	ldd	r25, Z+1	; 0x01
   6:	0e 94 00 00 	call	0	; 0x0 <_ZN6StringD2Ev>
}
   a:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 0000007a  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a9  00000000  00000000  000000ae  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000131  00000000  00000000  00000257  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.main    0000001e  00000000  00000000  00000388  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .debug_frame  00000020  00000000  00000000  000003a8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .debug_pubnames 0000001b  00000000  00000000  000003c8  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_aranges 00000020  00000000  00000000  000003e3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_ranges 00000018  00000000  00000000  00000403  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_str    000000db  00000000  00000000  0000041b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.main:

00000000 <main>:
#include <Arduino.h>

int main(void)
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
{
	init();
   4:	0e 94 00 00 	call	0	; 0x0 <main>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
   8:	0e 94 00 00 	call	0	; 0x0 <main>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
   c:	c0 e0       	ldi	r28, 0x00	; 0
   e:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
  10:	0e 94 00 00 	call	0	; 0x0 <main>
		if (serialEventRun) serialEventRun();
  14:	20 97       	sbiw	r28, 0x00	; 0
  16:	01 f0       	breq	.+0      	; 0x18 <main+0x18>
  18:	0e 94 00 00 	call	0	; 0x0 <main>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <__zero_reg__+0x1d>

new.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 000000dd  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000013b  00000000  00000000  00000111  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000001a0  00000000  00000000  0000024c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.__cxa_guard_acquire 00000014  00000000  00000000  000003ec  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.__cxa_guard_release 00000008  00000000  00000000  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .text.__cxa_guard_abort 00000002  00000000  00000000  00000408  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .text.__cxa_pure_virtual 00000002  00000000  00000000  0000040a  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .text._ZdlPv  00000006  00000000  00000000  0000040c  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text._Znwj   00000006  00000000  00000000  00000412  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 12 .debug_frame  00000070  00000000  00000000  00000418  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 13 .debug_loc    00000080  00000000  00000000  00000488  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 14 .debug_pubnames 00000094  00000000  00000000  00000508  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 15 .debug_aranges 00000048  00000000  00000000  0000059c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 16 .debug_ranges 00000040  00000000  00000000  000005e4  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 17 .debug_str    000000ef  00000000  00000000  00000624  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.__cxa_guard_acquire:

00000000 <__cxa_guard_acquire>:
void operator delete(void * ptr)
{
  free(ptr);
} 

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   0:	fc 01       	movw	r30, r24
   2:	20 e0       	ldi	r18, 0x00	; 0
   4:	30 e0       	ldi	r19, 0x00	; 0
   6:	80 81       	ld	r24, Z
   8:	88 23       	and	r24, r24
   a:	01 f4       	brne	.+0      	; 0xc <__cxa_guard_acquire+0xc>
   c:	21 e0       	ldi	r18, 0x01	; 1
   e:	30 e0       	ldi	r19, 0x00	; 0
  10:	c9 01       	movw	r24, r18
  12:	08 95       	ret

Disassembly of section .text.__cxa_guard_release:

00000000 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   0:	fc 01       	movw	r30, r24
   2:	81 e0       	ldi	r24, 0x01	; 1
   4:	80 83       	st	Z, r24
   6:	08 95       	ret

Disassembly of section .text.__cxa_guard_abort:

00000000 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
   0:	08 95       	ret

Disassembly of section .text.__cxa_pure_virtual:

00000000 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
   0:	08 95       	ret

Disassembly of section .text._ZdlPv:

00000000 <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
   0:	0e 94 00 00 	call	0	; 0x0 <_ZdlPv>
} 
   4:	08 95       	ret

Disassembly of section .text._Znwj:

00000000 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
   0:	0e 94 00 00 	call	0	; 0x0 <_Znwj>
}
   4:	08 95       	ret

wiring.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 0000017d  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000377  00000000  00000000  000001b1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000003bf  00000000  00000000  00000528  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.__vector_23 00000090  00000000  00000000  000008e7  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.millis  0000001c  00000000  00000000  00000977  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.micros  0000004c  00000000  00000000  00000993  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.delay   000000b2  00000000  00000000  000009df  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .text.delayMicroseconds 00000014  00000000  00000000  00000a91  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 11 .text.init    000000c4  00000000  00000000  00000aa5  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .bss.timer0_overflow_count 00000004  00000000  00000000  00000b69  2**0
                  ALLOC
 13 .bss.timer0_millis 00000004  00000000  00000000  00000b69  2**0
                  ALLOC
 14 .bss.timer0_fract 00000001  00000000  00000000  00000b69  2**0
                  ALLOC
 15 .debug_frame  00000070  00000000  00000000  00000b6c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 16 .debug_loc    0000016d  00000000  00000000  00000bdc  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 17 .debug_pubnames 0000008d  00000000  00000000  00000d49  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 18 .debug_aranges 00000048  00000000  00000000  00000dd6  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 19 .debug_ranges 00000040  00000000  00000000  00000e1e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 20 .debug_str    00000148  00000000  00000000  00000e5e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.__vector_23:

00000000 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	2f 93       	push	r18
   c:	3f 93       	push	r19
   e:	8f 93       	push	r24
  10:	9f 93       	push	r25
  12:	af 93       	push	r26
  14:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  16:	80 91 00 00 	lds	r24, 0x0000
  1a:	90 91 00 00 	lds	r25, 0x0000
  1e:	a0 91 00 00 	lds	r26, 0x0000
  22:	b0 91 00 00 	lds	r27, 0x0000
	unsigned char f = timer0_fract;
  26:	30 91 00 00 	lds	r19, 0x0000

	m += MILLIS_INC;
  2a:	01 96       	adiw	r24, 0x01	; 1
  2c:	a1 1d       	adc	r26, r1
  2e:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
  30:	23 2f       	mov	r18, r19
  32:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
  34:	2d 37       	cpi	r18, 0x7D	; 125
  36:	00 f0       	brcs	.+0      	; 0x38 <__vector_23+0x38>
		f -= FRACT_MAX;
  38:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
  3a:	01 96       	adiw	r24, 0x01	; 1
  3c:	a1 1d       	adc	r26, r1
  3e:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
  40:	20 93 00 00 	sts	0x0000, r18
	timer0_millis = m;
  44:	80 93 00 00 	sts	0x0000, r24
  48:	90 93 00 00 	sts	0x0000, r25
  4c:	a0 93 00 00 	sts	0x0000, r26
  50:	b0 93 00 00 	sts	0x0000, r27
	timer0_overflow_count++;
  54:	80 91 00 00 	lds	r24, 0x0000
  58:	90 91 00 00 	lds	r25, 0x0000
  5c:	a0 91 00 00 	lds	r26, 0x0000
  60:	b0 91 00 00 	lds	r27, 0x0000
  64:	01 96       	adiw	r24, 0x01	; 1
  66:	a1 1d       	adc	r26, r1
  68:	b1 1d       	adc	r27, r1
  6a:	80 93 00 00 	sts	0x0000, r24
  6e:	90 93 00 00 	sts	0x0000, r25
  72:	a0 93 00 00 	sts	0x0000, r26
  76:	b0 93 00 00 	sts	0x0000, r27
}
  7a:	bf 91       	pop	r27
  7c:	af 91       	pop	r26
  7e:	9f 91       	pop	r25
  80:	8f 91       	pop	r24
  82:	3f 91       	pop	r19
  84:	2f 91       	pop	r18
  86:	0f 90       	pop	r0
  88:	0f be       	out	0x3f, r0	; 63
  8a:	0f 90       	pop	r0
  8c:	1f 90       	pop	r1
  8e:	18 95       	reti

Disassembly of section .text.millis:

00000000 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
   0:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
   2:	f8 94       	cli
	m = timer0_millis;
   4:	20 91 00 00 	lds	r18, 0x0000
   8:	30 91 00 00 	lds	r19, 0x0000
   c:	40 91 00 00 	lds	r20, 0x0000
  10:	50 91 00 00 	lds	r21, 0x0000
	SREG = oldSREG;
  14:	8f bf       	out	0x3f, r24	; 63

	return m;
}
  16:	b9 01       	movw	r22, r18
  18:	ca 01       	movw	r24, r20
  1a:	08 95       	ret

Disassembly of section .text.micros:

00000000 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
   0:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
   2:	f8 94       	cli
	m = timer0_overflow_count;
   4:	20 91 00 00 	lds	r18, 0x0000
   8:	30 91 00 00 	lds	r19, 0x0000
   c:	40 91 00 00 	lds	r20, 0x0000
  10:	50 91 00 00 	lds	r21, 0x0000
#if defined(TCNT0)
	t = TCNT0;
  14:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
  16:	a8 9b       	sbis	0x15, 0	; 21
  18:	00 c0       	rjmp	.+0      	; 0x1a <micros+0x1a>
  1a:	8f 3f       	cpi	r24, 0xFF	; 255
  1c:	01 f0       	breq	.+0      	; 0x1e <micros+0x1e>
		m++;
  1e:	2f 5f       	subi	r18, 0xFF	; 255
  20:	3f 4f       	sbci	r19, 0xFF	; 255
  22:	4f 4f       	sbci	r20, 0xFF	; 255
  24:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
  26:	9f bf       	out	0x3f, r25	; 63
  28:	54 2f       	mov	r21, r20
  2a:	43 2f       	mov	r20, r19
  2c:	32 2f       	mov	r19, r18
  2e:	22 27       	eor	r18, r18
  30:	28 0f       	add	r18, r24
  32:	31 1d       	adc	r19, r1
  34:	41 1d       	adc	r20, r1
  36:	51 1d       	adc	r21, r1
  38:	82 e0       	ldi	r24, 0x02	; 2
  3a:	22 0f       	add	r18, r18
  3c:	33 1f       	adc	r19, r19
  3e:	44 1f       	adc	r20, r20
  40:	55 1f       	adc	r21, r21
  42:	8a 95       	dec	r24
  44:	01 f4       	brne	.+0      	; 0x46 <micros+0x46>
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}
  46:	b9 01       	movw	r22, r18
  48:	ca 01       	movw	r24, r20
  4a:	08 95       	ret

Disassembly of section .text.delay:

00000000 <delay>:

void delay(unsigned long ms)
{
   0:	9b 01       	movw	r18, r22
   2:	ac 01       	movw	r20, r24
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
   4:	7f b7       	in	r23, 0x3f	; 63
	
	cli();
   6:	f8 94       	cli
	m = timer0_overflow_count;
   8:	80 91 00 00 	lds	r24, 0x0000
   c:	90 91 00 00 	lds	r25, 0x0000
  10:	a0 91 00 00 	lds	r26, 0x0000
  14:	b0 91 00 00 	lds	r27, 0x0000
#if defined(TCNT0)
	t = TCNT0;
  18:	66 b5       	in	r22, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
  1a:	a8 9b       	sbis	0x15, 0	; 21
  1c:	00 c0       	rjmp	.+0      	; 0x1e <delay+0x1e>
  1e:	6f 3f       	cpi	r22, 0xFF	; 255
  20:	01 f0       	breq	.+0      	; 0x22 <delay+0x22>
		m++;
  22:	01 96       	adiw	r24, 0x01	; 1
  24:	a1 1d       	adc	r26, r1
  26:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
  28:	7f bf       	out	0x3f, r23	; 63
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
}

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();
  2a:	ba 2f       	mov	r27, r26
  2c:	a9 2f       	mov	r26, r25
  2e:	98 2f       	mov	r25, r24
  30:	88 27       	eor	r24, r24
  32:	86 0f       	add	r24, r22
  34:	91 1d       	adc	r25, r1
  36:	a1 1d       	adc	r26, r1
  38:	b1 1d       	adc	r27, r1
  3a:	62 e0       	ldi	r22, 0x02	; 2
  3c:	88 0f       	add	r24, r24
  3e:	99 1f       	adc	r25, r25
  40:	aa 1f       	adc	r26, r26
  42:	bb 1f       	adc	r27, r27
  44:	6a 95       	dec	r22
  46:	01 f4       	brne	.+0      	; 0x48 <delay+0x48>
  48:	bc 01       	movw	r22, r24
  4a:	00 c0       	rjmp	.+0      	; 0x4c <delay+0x4c>
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
  4c:	ff b7       	in	r31, 0x3f	; 63
	
	cli();
  4e:	f8 94       	cli
	m = timer0_overflow_count;
  50:	80 91 00 00 	lds	r24, 0x0000
  54:	90 91 00 00 	lds	r25, 0x0000
  58:	a0 91 00 00 	lds	r26, 0x0000
  5c:	b0 91 00 00 	lds	r27, 0x0000
#if defined(TCNT0)
	t = TCNT0;
  60:	e6 b5       	in	r30, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
  62:	a8 9b       	sbis	0x15, 0	; 21
  64:	00 c0       	rjmp	.+0      	; 0x66 <delay+0x66>
  66:	ef 3f       	cpi	r30, 0xFF	; 255
  68:	01 f0       	breq	.+0      	; 0x6a <delay+0x6a>
		m++;
  6a:	01 96       	adiw	r24, 0x01	; 1
  6c:	a1 1d       	adc	r26, r1
  6e:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
  70:	ff bf       	out	0x3f, r31	; 63
void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
  72:	ba 2f       	mov	r27, r26
  74:	a9 2f       	mov	r26, r25
  76:	98 2f       	mov	r25, r24
  78:	88 27       	eor	r24, r24
  7a:	8e 0f       	add	r24, r30
  7c:	91 1d       	adc	r25, r1
  7e:	a1 1d       	adc	r26, r1
  80:	b1 1d       	adc	r27, r1
  82:	e2 e0       	ldi	r30, 0x02	; 2
  84:	88 0f       	add	r24, r24
  86:	99 1f       	adc	r25, r25
  88:	aa 1f       	adc	r26, r26
  8a:	bb 1f       	adc	r27, r27
  8c:	ea 95       	dec	r30
  8e:	01 f4       	brne	.+0      	; 0x90 <delay+0x90>
  90:	86 1b       	sub	r24, r22
  92:	97 0b       	sbc	r25, r23
  94:	88 5e       	subi	r24, 0xE8	; 232
  96:	93 40       	sbci	r25, 0x03	; 3
  98:	00 f0       	brcs	.+0      	; 0x9a <delay+0x9a>
			ms--;
  9a:	21 50       	subi	r18, 0x01	; 1
  9c:	30 40       	sbci	r19, 0x00	; 0
  9e:	40 40       	sbci	r20, 0x00	; 0
  a0:	50 40       	sbci	r21, 0x00	; 0
			start += 1000;
  a2:	68 51       	subi	r22, 0x18	; 24
  a4:	7c 4f       	sbci	r23, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
  a6:	21 15       	cp	r18, r1
  a8:	31 05       	cpc	r19, r1
  aa:	41 05       	cpc	r20, r1
  ac:	51 05       	cpc	r21, r1
  ae:	01 f4       	brne	.+0      	; 0xb0 <delay+0xb0>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
  b0:	08 95       	ret

Disassembly of section .text.delayMicroseconds:

00000000 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
   0:	01 97       	sbiw	r24, 0x01	; 1
   2:	01 f0       	breq	.+0      	; 0x4 <delayMicroseconds+0x4>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
   4:	88 0f       	add	r24, r24
   6:	99 1f       	adc	r25, r25
   8:	88 0f       	add	r24, r24
   a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
   c:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
   e:	01 97       	sbiw	r24, 0x01	; 1
  10:	01 f4       	brne	.+0      	; 0x12 <delayMicroseconds+0x12>
  12:	08 95       	ret

Disassembly of section .text.init:

00000000 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
   0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
   2:	84 b5       	in	r24, 0x24	; 36
   4:	82 60       	ori	r24, 0x02	; 2
   6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
   8:	84 b5       	in	r24, 0x24	; 36
   a:	81 60       	ori	r24, 0x01	; 1
   c:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
   e:	85 b5       	in	r24, 0x25	; 37
  10:	82 60       	ori	r24, 0x02	; 2
  12:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
  14:	85 b5       	in	r24, 0x25	; 37
  16:	81 60       	ori	r24, 0x01	; 1
  18:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
  1a:	ee e6       	ldi	r30, 0x6E	; 110
  1c:	f0 e0       	ldi	r31, 0x00	; 0
  1e:	80 81       	ld	r24, Z
  20:	81 60       	ori	r24, 0x01	; 1
  22:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
  24:	e1 e8       	ldi	r30, 0x81	; 129
  26:	f0 e0       	ldi	r31, 0x00	; 0
  28:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
  2a:	80 81       	ld	r24, Z
  2c:	82 60       	ori	r24, 0x02	; 2
  2e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
  30:	80 81       	ld	r24, Z
  32:	81 60       	ori	r24, 0x01	; 1
  34:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
  36:	e0 e8       	ldi	r30, 0x80	; 128
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	80 81       	ld	r24, Z
  3c:	81 60       	ori	r24, 0x01	; 1
  3e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
  40:	e1 eb       	ldi	r30, 0xB1	; 177
  42:	f0 e0       	ldi	r31, 0x00	; 0
  44:	80 81       	ld	r24, Z
  46:	84 60       	ori	r24, 0x04	; 4
  48:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
  4a:	e0 eb       	ldi	r30, 0xB0	; 176
  4c:	f0 e0       	ldi	r31, 0x00	; 0
  4e:	80 81       	ld	r24, Z
  50:	81 60       	ori	r24, 0x01	; 1
  52:	80 83       	st	Z, r24
#else
	#warning Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
  54:	e1 e9       	ldi	r30, 0x91	; 145
  56:	f0 e0       	ldi	r31, 0x00	; 0
  58:	80 81       	ld	r24, Z
  5a:	82 60       	ori	r24, 0x02	; 2
  5c:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
  5e:	80 81       	ld	r24, Z
  60:	81 60       	ori	r24, 0x01	; 1
  62:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
  64:	e0 e9       	ldi	r30, 0x90	; 144
  66:	f0 e0       	ldi	r31, 0x00	; 0
  68:	80 81       	ld	r24, Z
  6a:	81 60       	ori	r24, 0x01	; 1
  6c:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
#else /* beginning of timer4 block for ATMEGA1280 and ATMEGA2560 */
#if defined(TCCR4B) && defined(CS41) && defined(WGM40)
	sbi(TCCR4B, CS41);		// set timer 4 prescale factor to 64
  6e:	e1 ea       	ldi	r30, 0xA1	; 161
  70:	f0 e0       	ldi	r31, 0x00	; 0
  72:	80 81       	ld	r24, Z
  74:	82 60       	ori	r24, 0x02	; 2
  76:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
  78:	80 81       	ld	r24, Z
  7a:	81 60       	ori	r24, 0x01	; 1
  7c:	80 83       	st	Z, r24
	sbi(TCCR4A, WGM40);		// put timer 4 in 8-bit phase correct pwm mode
  7e:	e0 ea       	ldi	r30, 0xA0	; 160
  80:	f0 e0       	ldi	r31, 0x00	; 0
  82:	80 81       	ld	r24, Z
  84:	81 60       	ori	r24, 0x01	; 1
  86:	80 83       	st	Z, r24
#endif
#endif /* end timer4 block for ATMEGA1280/2560 and similar */	

#if defined(TCCR5B) && defined(CS51) && defined(WGM50)
	sbi(TCCR5B, CS51);		// set timer 5 prescale factor to 64
  88:	e1 e2       	ldi	r30, 0x21	; 33
  8a:	f1 e0       	ldi	r31, 0x01	; 1
  8c:	80 81       	ld	r24, Z
  8e:	82 60       	ori	r24, 0x02	; 2
  90:	80 83       	st	Z, r24
	sbi(TCCR5B, CS50);
  92:	80 81       	ld	r24, Z
  94:	81 60       	ori	r24, 0x01	; 1
  96:	80 83       	st	Z, r24
	sbi(TCCR5A, WGM50);		// put timer 5 in 8-bit phase correct pwm mode
  98:	e0 e2       	ldi	r30, 0x20	; 32
  9a:	f1 e0       	ldi	r31, 0x01	; 1
  9c:	80 81       	ld	r24, Z
  9e:	81 60       	ori	r24, 0x01	; 1
  a0:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
  a2:	ea e7       	ldi	r30, 0x7A	; 122
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	84 60       	ori	r24, 0x04	; 4
  aa:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
  ac:	80 81       	ld	r24, Z
  ae:	82 60       	ori	r24, 0x02	; 2
  b0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
  b2:	80 81       	ld	r24, Z
  b4:	81 60       	ori	r24, 0x01	; 1
  b6:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
  b8:	80 81       	ld	r24, Z
  ba:	80 68       	ori	r24, 0x80	; 128
  bc:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
  be:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
  c2:	08 95       	ret

wiring_analog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 00000117  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000286  00000000  00000000  0000014b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000002c9  00000000  00000000  000003d1  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.analogReference 00000006  00000000  00000000  0000069a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.analogRead 00000068  00000000  00000000  000006a0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.analogWrite 000001c0  00000000  00000000  00000708  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .data.analog_reference 00000001  00000000  00000000  000008c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .debug_frame  00000040  00000000  00000000  000008cc  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_loc    0000019d  00000000  00000000  0000090c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_pubnames 0000005a  00000000  00000000  00000aa9  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 13 .debug_aranges 00000030  00000000  00000000  00000b03  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 14 .debug_ranges 00000028  00000000  00000000  00000b33  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 15 .debug_str    00000146  00000000  00000000  00000b5b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.analogReference:

00000000 <analogReference>:
void analogReference(uint8_t mode)
{
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
   0:	80 93 00 00 	sts	0x0000, r24
}
   4:	08 95       	ret

Disassembly of section .text.analogRead:

00000000 <analogRead>:

int analogRead(uint8_t pin)
{
   0:	38 2f       	mov	r19, r24
	uint8_t low, high;

#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
   2:	86 33       	cpi	r24, 0x36	; 54
   4:	00 f0       	brcs	.+0      	; 0x6 <analogRead+0x6>
   6:	36 53       	subi	r19, 0x36	; 54
	pin = analogPinToChannel(pin);
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
#elif defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
   8:	20 91 7b 00 	lds	r18, 0x007B
   c:	83 2f       	mov	r24, r19
   e:	86 95       	lsr	r24
  10:	86 95       	lsr	r24
  12:	86 95       	lsr	r24
  14:	90 e0       	ldi	r25, 0x00	; 0
  16:	81 70       	andi	r24, 0x01	; 1
  18:	90 70       	andi	r25, 0x00	; 0
  1a:	43 e0       	ldi	r20, 0x03	; 3
  1c:	88 0f       	add	r24, r24
  1e:	99 1f       	adc	r25, r25
  20:	4a 95       	dec	r20
  22:	01 f4       	brne	.+0      	; 0x24 <analogRead+0x24>
  24:	27 7f       	andi	r18, 0xF7	; 247
  26:	28 2b       	or	r18, r24
  28:	20 93 7b 00 	sts	0x007B, r18
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
  2c:	37 70       	andi	r19, 0x07	; 7
  2e:	80 91 00 00 	lds	r24, 0x0000
  32:	82 95       	swap	r24
  34:	88 0f       	add	r24, r24
  36:	88 0f       	add	r24, r24
  38:	80 7c       	andi	r24, 0xC0	; 192
  3a:	83 2b       	or	r24, r19
  3c:	80 93 7c 00 	sts	0x007C, r24
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
  40:	80 91 7a 00 	lds	r24, 0x007A
  44:	80 64       	ori	r24, 0x40	; 64
  46:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
  4a:	80 91 7a 00 	lds	r24, 0x007A
  4e:	86 fd       	sbrc	r24, 6
  50:	00 c0       	rjmp	.+0      	; 0x52 <analogRead+0x52>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
  52:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
  56:	40 91 79 00 	lds	r20, 0x0079
  5a:	94 2f       	mov	r25, r20
  5c:	80 e0       	ldi	r24, 0x00	; 0
  5e:	30 e0       	ldi	r19, 0x00	; 0
  60:	28 2b       	or	r18, r24
  62:	39 2b       	or	r19, r25
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
}
  64:	c9 01       	movw	r24, r18
  66:	08 95       	ret

Disassembly of section .text.analogWrite:

00000000 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
   0:	1f 93       	push	r17
   2:	cf 93       	push	r28
   4:	df 93       	push	r29
   6:	18 2f       	mov	r17, r24
   8:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
   a:	61 e0       	ldi	r22, 0x01	; 1
   c:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
	if (val == 0)
  10:	20 97       	sbiw	r28, 0x00	; 0
  12:	01 f4       	brne	.+0      	; 0x14 <analogWrite+0x14>
  14:	00 c0       	rjmp	.+0      	; 0x16 <analogWrite+0x16>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
  16:	cf 3f       	cpi	r28, 0xFF	; 255
  18:	d1 05       	cpc	r29, r1
  1a:	01 f4       	brne	.+0      	; 0x1c <analogWrite+0x1c>
  1c:	00 c0       	rjmp	.+0      	; 0x1e <analogWrite+0x1e>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
  1e:	e1 2f       	mov	r30, r17
  20:	f0 e0       	ldi	r31, 0x00	; 0
  22:	e0 50       	subi	r30, 0x00	; 0
  24:	f0 40       	sbci	r31, 0x00	; 0
  26:	84 91       	lpm	r24, Z+
  28:	89 30       	cpi	r24, 0x09	; 9
  2a:	01 f4       	brne	.+0      	; 0x2c <analogWrite+0x2c>
  2c:	00 c0       	rjmp	.+0      	; 0x2e <analogWrite+0x2e>
  2e:	8a 30       	cpi	r24, 0x0A	; 10
  30:	00 f4       	brcc	.+0      	; 0x32 <analogWrite+0x32>
  32:	84 30       	cpi	r24, 0x04	; 4
  34:	01 f0       	breq	.+0      	; 0x36 <analogWrite+0x36>
  36:	85 30       	cpi	r24, 0x05	; 5
  38:	00 f4       	brcc	.+0      	; 0x3a <analogWrite+0x3a>
  3a:	82 30       	cpi	r24, 0x02	; 2
  3c:	01 f0       	breq	.+0      	; 0x3e <analogWrite+0x3e>
  3e:	83 30       	cpi	r24, 0x03	; 3
  40:	00 f4       	brcc	.+0      	; 0x42 <analogWrite+0x42>
  42:	81 30       	cpi	r24, 0x01	; 1
  44:	01 f0       	breq	.+0      	; 0x46 <analogWrite+0x46>
  46:	00 c0       	rjmp	.+0      	; 0x48 <analogWrite+0x48>
  48:	00 c0       	rjmp	.+0      	; 0x4a <analogWrite+0x4a>
  4a:	87 30       	cpi	r24, 0x07	; 7
  4c:	01 f4       	brne	.+0      	; 0x4e <analogWrite+0x4e>
  4e:	00 c0       	rjmp	.+0      	; 0x50 <analogWrite+0x50>
  50:	88 30       	cpi	r24, 0x08	; 8
  52:	00 f0       	brcs	.+0      	; 0x54 <analogWrite+0x54>
  54:	00 c0       	rjmp	.+0      	; 0x56 <analogWrite+0x56>
  56:	86 30       	cpi	r24, 0x06	; 6
  58:	01 f0       	breq	.+0      	; 0x5a <analogWrite+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <analogWrite+0x5c>
  5c:	00 c0       	rjmp	.+0      	; 0x5e <analogWrite+0x5e>
  5e:	8d 30       	cpi	r24, 0x0D	; 13
  60:	01 f4       	brne	.+0      	; 0x62 <analogWrite+0x62>
  62:	00 c0       	rjmp	.+0      	; 0x64 <analogWrite+0x64>
  64:	8e 30       	cpi	r24, 0x0E	; 14
  66:	00 f4       	brcc	.+0      	; 0x68 <analogWrite+0x68>
  68:	8b 30       	cpi	r24, 0x0B	; 11
  6a:	01 f4       	brne	.+0      	; 0x6c <analogWrite+0x6c>
  6c:	00 c0       	rjmp	.+0      	; 0x6e <analogWrite+0x6e>
  6e:	8c 30       	cpi	r24, 0x0C	; 12
  70:	00 f0       	brcs	.+0      	; 0x72 <analogWrite+0x72>
  72:	00 c0       	rjmp	.+0      	; 0x74 <analogWrite+0x74>
  74:	00 c0       	rjmp	.+0      	; 0x76 <analogWrite+0x76>
  76:	80 31       	cpi	r24, 0x10	; 16
  78:	01 f4       	brne	.+0      	; 0x7a <analogWrite+0x7a>
  7a:	00 c0       	rjmp	.+0      	; 0x7c <analogWrite+0x7c>
  7c:	81 31       	cpi	r24, 0x11	; 17
  7e:	01 f4       	brne	.+0      	; 0x80 <analogWrite+0x80>
  80:	00 c0       	rjmp	.+0      	; 0x82 <analogWrite+0x82>
  82:	8f 30       	cpi	r24, 0x0F	; 15
  84:	01 f0       	breq	.+0      	; 0x86 <analogWrite+0x86>
  86:	00 c0       	rjmp	.+0      	; 0x88 <analogWrite+0x88>
  88:	00 c0       	rjmp	.+0      	; 0x8a <analogWrite+0x8a>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
  8a:	84 b5       	in	r24, 0x24	; 36
  8c:	80 68       	ori	r24, 0x80	; 128
  8e:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
  90:	c7 bd       	out	0x27, r28	; 39
  92:	00 c0       	rjmp	.+0      	; 0x94 <analogWrite+0x94>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
  94:	84 b5       	in	r24, 0x24	; 36
  96:	80 62       	ori	r24, 0x20	; 32
  98:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
  9a:	c8 bd       	out	0x28, r28	; 40
  9c:	00 c0       	rjmp	.+0      	; 0x9e <analogWrite+0x9e>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
  9e:	80 91 80 00 	lds	r24, 0x0080
  a2:	80 68       	ori	r24, 0x80	; 128
  a4:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
  a8:	d0 93 89 00 	sts	0x0089, r29
  ac:	c0 93 88 00 	sts	0x0088, r28
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <analogWrite+0xb2>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
  b2:	80 91 80 00 	lds	r24, 0x0080
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
  bc:	d0 93 8b 00 	sts	0x008B, r29
  c0:	c0 93 8a 00 	sts	0x008A, r28
  c4:	00 c0       	rjmp	.+0      	; 0xc6 <analogWrite+0xc6>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
  c6:	80 91 b0 00 	lds	r24, 0x00B0
  ca:	80 68       	ori	r24, 0x80	; 128
  cc:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
  d0:	c0 93 b3 00 	sts	0x00B3, r28
  d4:	00 c0       	rjmp	.+0      	; 0xd6 <analogWrite+0xd6>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
  d6:	80 91 b0 00 	lds	r24, 0x00B0
  da:	80 62       	ori	r24, 0x20	; 32
  dc:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
  e0:	c0 93 b4 00 	sts	0x00B4, r28
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <analogWrite+0xe6>
			#endif

			#if defined(TCCR3A) && defined(COM3A1)
			case TIMER3A:
				// connect pwm to pin on timer 3, channel A
				sbi(TCCR3A, COM3A1);
  e6:	80 91 90 00 	lds	r24, 0x0090
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	80 93 90 00 	sts	0x0090, r24
				OCR3A = val; // set pwm duty
  f0:	d0 93 99 00 	sts	0x0099, r29
  f4:	c0 93 98 00 	sts	0x0098, r28
  f8:	00 c0       	rjmp	.+0      	; 0xfa <analogWrite+0xfa>
			#endif

			#if defined(TCCR3A) && defined(COM3B1)
			case TIMER3B:
				// connect pwm to pin on timer 3, channel B
				sbi(TCCR3A, COM3B1);
  fa:	80 91 90 00 	lds	r24, 0x0090
  fe:	80 62       	ori	r24, 0x20	; 32
 100:	80 93 90 00 	sts	0x0090, r24
				OCR3B = val; // set pwm duty
 104:	d0 93 9b 00 	sts	0x009B, r29
 108:	c0 93 9a 00 	sts	0x009A, r28
 10c:	00 c0       	rjmp	.+0      	; 0x10e <analogWrite+0x10e>
			#endif

			#if defined(TCCR3A) && defined(COM3C1)
			case TIMER3C:
				// connect pwm to pin on timer 3, channel C
				sbi(TCCR3A, COM3C1);
 10e:	80 91 90 00 	lds	r24, 0x0090
 112:	88 60       	ori	r24, 0x08	; 8
 114:	80 93 90 00 	sts	0x0090, r24
				OCR3C = val; // set pwm duty
 118:	d0 93 9d 00 	sts	0x009D, r29
 11c:	c0 93 9c 00 	sts	0x009C, r28
 120:	00 c0       	rjmp	.+0      	; 0x122 <analogWrite+0x122>
			#endif

			#if defined(TCCR4A)
			case TIMER4A:
				//connect pwm to pin on timer 4, channel A
				sbi(TCCR4A, COM4A1);
 122:	80 91 a0 00 	lds	r24, 0x00A0
 126:	80 68       	ori	r24, 0x80	; 128
 128:	80 93 a0 00 	sts	0x00A0, r24
				#if defined(COM4A0)		// only used on 32U4
				cbi(TCCR4A, COM4A0);
 12c:	80 91 a0 00 	lds	r24, 0x00A0
 130:	8f 7b       	andi	r24, 0xBF	; 191
 132:	80 93 a0 00 	sts	0x00A0, r24
				#endif
				OCR4A = val;	// set pwm duty
 136:	d0 93 a9 00 	sts	0x00A9, r29
 13a:	c0 93 a8 00 	sts	0x00A8, r28
 13e:	00 c0       	rjmp	.+0      	; 0x140 <analogWrite+0x140>
			#endif
			
			#if defined(TCCR4A) && defined(COM4B1)
			case TIMER4B:
				// connect pwm to pin on timer 4, channel B
				sbi(TCCR4A, COM4B1);
 140:	80 91 a0 00 	lds	r24, 0x00A0
 144:	80 62       	ori	r24, 0x20	; 32
 146:	80 93 a0 00 	sts	0x00A0, r24
				OCR4B = val; // set pwm duty
 14a:	d0 93 ab 00 	sts	0x00AB, r29
 14e:	c0 93 aa 00 	sts	0x00AA, r28
 152:	00 c0       	rjmp	.+0      	; 0x154 <analogWrite+0x154>
			#endif

			#if defined(TCCR4A) && defined(COM4C1)
			case TIMER4C:
				// connect pwm to pin on timer 4, channel C
				sbi(TCCR4A, COM4C1);
 154:	80 91 a0 00 	lds	r24, 0x00A0
 158:	88 60       	ori	r24, 0x08	; 8
 15a:	80 93 a0 00 	sts	0x00A0, r24
				OCR4C = val; // set pwm duty
 15e:	d0 93 ad 00 	sts	0x00AD, r29
 162:	c0 93 ac 00 	sts	0x00AC, r28
 166:	00 c0       	rjmp	.+0      	; 0x168 <analogWrite+0x168>

							
			#if defined(TCCR5A) && defined(COM5A1)
			case TIMER5A:
				// connect pwm to pin on timer 5, channel A
				sbi(TCCR5A, COM5A1);
 168:	80 91 20 01 	lds	r24, 0x0120
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	80 93 20 01 	sts	0x0120, r24
				OCR5A = val; // set pwm duty
 172:	d0 93 29 01 	sts	0x0129, r29
 176:	c0 93 28 01 	sts	0x0128, r28
 17a:	00 c0       	rjmp	.+0      	; 0x17c <analogWrite+0x17c>
			#endif

			#if defined(TCCR5A) && defined(COM5B1)
			case TIMER5B:
				// connect pwm to pin on timer 5, channel B
				sbi(TCCR5A, COM5B1);
 17c:	80 91 20 01 	lds	r24, 0x0120
 180:	80 62       	ori	r24, 0x20	; 32
 182:	80 93 20 01 	sts	0x0120, r24
				OCR5B = val; // set pwm duty
 186:	d0 93 2b 01 	sts	0x012B, r29
 18a:	c0 93 2a 01 	sts	0x012A, r28
 18e:	00 c0       	rjmp	.+0      	; 0x190 <analogWrite+0x190>
			#endif

			#if defined(TCCR5A) && defined(COM5C1)
			case TIMER5C:
				// connect pwm to pin on timer 5, channel C
				sbi(TCCR5A, COM5C1);
 190:	80 91 20 01 	lds	r24, 0x0120
 194:	88 60       	ori	r24, 0x08	; 8
 196:	80 93 20 01 	sts	0x0120, r24
				OCR5C = val; // set pwm duty
 19a:	d0 93 2d 01 	sts	0x012D, r29
 19e:	c0 93 2c 01 	sts	0x012C, r28
 1a2:	00 c0       	rjmp	.+0      	; 0x1a4 <analogWrite+0x1a4>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
 1a4:	c0 38       	cpi	r28, 0x80	; 128
 1a6:	d1 05       	cpc	r29, r1
 1a8:	04 f4       	brge	.+0      	; 0x1aa <analogWrite+0x1aa>
					digitalWrite(pin, LOW);
 1aa:	81 2f       	mov	r24, r17
 1ac:	60 e0       	ldi	r22, 0x00	; 0
 1ae:	00 c0       	rjmp	.+0      	; 0x1b0 <analogWrite+0x1b0>
				} else {
					digitalWrite(pin, HIGH);
 1b0:	81 2f       	mov	r24, r17
 1b2:	61 e0       	ldi	r22, 0x01	; 1
 1b4:	0e 94 00 00 	call	0	; 0x0 <analogWrite>
				}
		}
	}
}
 1b8:	df 91       	pop	r29
 1ba:	cf 91       	pop	r28
 1bc:	1f 91       	pop	r17
 1be:	08 95       	ret

wiring_digital.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 00000167  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000005d0  00000000  00000000  0000019b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   0000030f  00000000  00000000  0000076b  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.pinMode 0000007e  00000000  00000000  00000a7a  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.turnOffPWM 000000e8  00000000  00000000  00000af8  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .text.digitalWrite 00000066  00000000  00000000  00000be0  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  9 .text.digitalRead 00000060  00000000  00000000  00000c46  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
 10 .progmem.data 00000120  00000000  00000000  00000ca6  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .debug_frame  00000050  00000000  00000000  00000dc8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_loc    0000025a  00000000  00000000  00000e18  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 13 .debug_pubnames 000000da  00000000  00000000  00001072  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 14 .debug_aranges 00000038  00000000  00000000  0000114c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 15 .debug_ranges 00000030  00000000  00000000  00001184  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 16 .debug_str    000001b3  00000000  00000000  000011b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.pinMode:

00000000 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   0:	cf 93       	push	r28
   2:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
   4:	48 2f       	mov	r20, r24
   6:	50 e0       	ldi	r21, 0x00	; 0
   8:	ca 01       	movw	r24, r20
   a:	80 50       	subi	r24, 0x00	; 0
   c:	90 40       	sbci	r25, 0x00	; 0
   e:	fc 01       	movw	r30, r24
  10:	34 91       	lpm	r19, Z+
	uint8_t port = digitalPinToPort(pin);
  12:	40 50       	subi	r20, 0x00	; 0
  14:	50 40       	sbci	r21, 0x00	; 0
  16:	fa 01       	movw	r30, r20
  18:	84 91       	lpm	r24, Z+
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
  1a:	88 23       	and	r24, r24
  1c:	01 f0       	breq	.+0      	; 0x1e <pinMode+0x1e>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
  1e:	90 e0       	ldi	r25, 0x00	; 0
  20:	88 0f       	add	r24, r24
  22:	99 1f       	adc	r25, r25
  24:	fc 01       	movw	r30, r24
  26:	e0 50       	subi	r30, 0x00	; 0
  28:	f0 40       	sbci	r31, 0x00	; 0
  2a:	a5 91       	lpm	r26, Z+
  2c:	b4 91       	lpm	r27, Z+
	out = portOutputRegister(port);
  2e:	fc 01       	movw	r30, r24
  30:	e0 50       	subi	r30, 0x00	; 0
  32:	f0 40       	sbci	r31, 0x00	; 0
  34:	c5 91       	lpm	r28, Z+
  36:	d4 91       	lpm	r29, Z+

	if (mode == INPUT) { 
  38:	66 23       	and	r22, r22
  3a:	01 f4       	brne	.+0      	; 0x3c <pinMode+0x3c>
		uint8_t oldSREG = SREG;
  3c:	2f b7       	in	r18, 0x3f	; 63
                cli();
  3e:	f8 94       	cli
		*reg &= ~bit;
  40:	8c 91       	ld	r24, X
  42:	93 2f       	mov	r25, r19
  44:	90 95       	com	r25
  46:	89 23       	and	r24, r25
  48:	8c 93       	st	X, r24
		*out &= ~bit;
  4a:	88 81       	ld	r24, Y
  4c:	89 23       	and	r24, r25
  4e:	00 c0       	rjmp	.+0      	; 0x50 <pinMode+0x50>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
  50:	62 30       	cpi	r22, 0x02	; 2
  52:	01 f4       	brne	.+0      	; 0x54 <pinMode+0x54>
		uint8_t oldSREG = SREG;
  54:	2f b7       	in	r18, 0x3f	; 63
                cli();
  56:	f8 94       	cli
		*reg &= ~bit;
  58:	8c 91       	ld	r24, X
  5a:	93 2f       	mov	r25, r19
  5c:	90 95       	com	r25
  5e:	89 23       	and	r24, r25
  60:	8c 93       	st	X, r24
		*out |= bit;
  62:	88 81       	ld	r24, Y
  64:	83 2b       	or	r24, r19
  66:	88 83       	st	Y, r24
		SREG = oldSREG;
  68:	2f bf       	out	0x3f, r18	; 63
  6a:	00 c0       	rjmp	.+0      	; 0x6c <pinMode+0x6c>
	} else {
		uint8_t oldSREG = SREG;
  6c:	9f b7       	in	r25, 0x3f	; 63
                cli();
  6e:	f8 94       	cli
		*reg |= bit;
  70:	8c 91       	ld	r24, X
  72:	83 2b       	or	r24, r19
  74:	8c 93       	st	X, r24
		SREG = oldSREG;
  76:	9f bf       	out	0x3f, r25	; 63
	}
}
  78:	df 91       	pop	r29
  7a:	cf 91       	pop	r28
  7c:	08 95       	ret

Disassembly of section .text.turnOffPWM:

00000000 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
   0:	89 30       	cpi	r24, 0x09	; 9
   2:	01 f4       	brne	.+0      	; 0x4 <turnOffPWM+0x4>
   4:	00 c0       	rjmp	.+0      	; 0x6 <turnOffPWM+0x6>
   6:	8a 30       	cpi	r24, 0x0A	; 10
   8:	00 f4       	brcc	.+0      	; 0xa <turnOffPWM+0xa>
   a:	84 30       	cpi	r24, 0x04	; 4
   c:	01 f0       	breq	.+0      	; 0xe <turnOffPWM+0xe>
   e:	85 30       	cpi	r24, 0x05	; 5
  10:	00 f4       	brcc	.+0      	; 0x12 <turnOffPWM+0x12>
  12:	82 30       	cpi	r24, 0x02	; 2
  14:	01 f0       	breq	.+0      	; 0x16 <turnOffPWM+0x16>
  16:	83 30       	cpi	r24, 0x03	; 3
  18:	00 f4       	brcc	.+0      	; 0x1a <turnOffPWM+0x1a>
  1a:	81 30       	cpi	r24, 0x01	; 1
  1c:	01 f0       	breq	.+0      	; 0x1e <turnOffPWM+0x1e>
  1e:	00 c0       	rjmp	.+0      	; 0x20 <turnOffPWM+0x20>
  20:	00 c0       	rjmp	.+0      	; 0x22 <turnOffPWM+0x22>
  22:	87 30       	cpi	r24, 0x07	; 7
  24:	01 f0       	breq	.+0      	; 0x26 <turnOffPWM+0x26>
  26:	88 30       	cpi	r24, 0x08	; 8
  28:	00 f4       	brcc	.+0      	; 0x2a <turnOffPWM+0x2a>
  2a:	86 30       	cpi	r24, 0x06	; 6
  2c:	01 f0       	breq	.+0      	; 0x2e <turnOffPWM+0x2e>
  2e:	00 c0       	rjmp	.+0      	; 0x30 <turnOffPWM+0x30>
  30:	00 c0       	rjmp	.+0      	; 0x32 <turnOffPWM+0x32>
  32:	8d 30       	cpi	r24, 0x0D	; 13
  34:	01 f4       	brne	.+0      	; 0x36 <turnOffPWM+0x36>
  36:	00 c0       	rjmp	.+0      	; 0x38 <turnOffPWM+0x38>
  38:	8e 30       	cpi	r24, 0x0E	; 14
  3a:	00 f4       	brcc	.+0      	; 0x3c <turnOffPWM+0x3c>
  3c:	8b 30       	cpi	r24, 0x0B	; 11
  3e:	01 f0       	breq	.+0      	; 0x40 <turnOffPWM+0x40>
  40:	8c 30       	cpi	r24, 0x0C	; 12
  42:	00 f4       	brcc	.+0      	; 0x44 <turnOffPWM+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <turnOffPWM+0x46>
  46:	80 31       	cpi	r24, 0x10	; 16
  48:	01 f4       	brne	.+0      	; 0x4a <turnOffPWM+0x4a>
  4a:	00 c0       	rjmp	.+0      	; 0x4c <turnOffPWM+0x4c>
  4c:	81 31       	cpi	r24, 0x11	; 17
  4e:	01 f4       	brne	.+0      	; 0x50 <turnOffPWM+0x50>
  50:	00 c0       	rjmp	.+0      	; 0x52 <turnOffPWM+0x52>
  52:	8f 30       	cpi	r24, 0x0F	; 15
  54:	01 f0       	breq	.+0      	; 0x56 <turnOffPWM+0x56>
  56:	00 c0       	rjmp	.+0      	; 0x58 <turnOffPWM+0x58>
  58:	00 c0       	rjmp	.+0      	; 0x5a <turnOffPWM+0x5a>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
  5a:	80 91 80 00 	lds	r24, 0x0080
  5e:	8f 77       	andi	r24, 0x7F	; 127
  60:	00 c0       	rjmp	.+0      	; 0x62 <turnOffPWM+0x62>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
  62:	80 91 80 00 	lds	r24, 0x0080
  66:	8f 7d       	andi	r24, 0xDF	; 223
  68:	80 93 80 00 	sts	0x0080, r24
  6c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
  6e:	84 b5       	in	r24, 0x24	; 36
  70:	8f 77       	andi	r24, 0x7F	; 127
  72:	00 c0       	rjmp	.+0      	; 0x74 <turnOffPWM+0x74>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
  74:	84 b5       	in	r24, 0x24	; 36
  76:	8f 7d       	andi	r24, 0xDF	; 223
  78:	84 bd       	out	0x24, r24	; 36
  7a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
  7c:	80 91 b0 00 	lds	r24, 0x00B0
  80:	8f 77       	andi	r24, 0x7F	; 127
  82:	00 c0       	rjmp	.+0      	; 0x84 <turnOffPWM+0x84>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
  84:	80 91 b0 00 	lds	r24, 0x00B0
  88:	8f 7d       	andi	r24, 0xDF	; 223
  8a:	80 93 b0 00 	sts	0x00B0, r24
  8e:	08 95       	ret
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
  90:	80 91 90 00 	lds	r24, 0x0090
  94:	8f 77       	andi	r24, 0x7F	; 127
  96:	00 c0       	rjmp	.+0      	; 0x98 <turnOffPWM+0x98>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
  98:	80 91 90 00 	lds	r24, 0x0090
  9c:	8f 7d       	andi	r24, 0xDF	; 223
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <turnOffPWM+0xa0>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
  a0:	80 91 90 00 	lds	r24, 0x0090
  a4:	87 7f       	andi	r24, 0xF7	; 247
  a6:	80 93 90 00 	sts	0x0090, r24
  aa:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
  ac:	80 91 a0 00 	lds	r24, 0x00A0
  b0:	8f 77       	andi	r24, 0x7F	; 127
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <turnOffPWM+0xb4>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
  b4:	80 91 a0 00 	lds	r24, 0x00A0
  b8:	8f 7d       	andi	r24, 0xDF	; 223
  ba:	00 c0       	rjmp	.+0      	; 0xbc <turnOffPWM+0xbc>
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
  bc:	80 91 a0 00 	lds	r24, 0x00A0
  c0:	87 7f       	andi	r24, 0xF7	; 247
  c2:	80 93 a0 00 	sts	0x00A0, r24
  c6:	08 95       	ret
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
		#endif			
			
		#if defined(TCCR5A)
		case  TIMER5A:  cbi(TCCR5A, COM5A1);    break;
  c8:	80 91 20 01 	lds	r24, 0x0120
  cc:	8f 77       	andi	r24, 0x7F	; 127
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <turnOffPWM+0xd0>
		case  TIMER5B:  cbi(TCCR5A, COM5B1);    break;
  d0:	80 91 20 01 	lds	r24, 0x0120
  d4:	8f 7d       	andi	r24, 0xDF	; 223
  d6:	80 93 20 01 	sts	0x0120, r24
  da:	08 95       	ret
		case  TIMER5C:  cbi(TCCR5A, COM5C1);    break;
  dc:	80 91 20 01 	lds	r24, 0x0120
  e0:	87 7f       	andi	r24, 0xF7	; 247
  e2:	80 93 20 01 	sts	0x0120, r24
  e6:	08 95       	ret

Disassembly of section .text.digitalWrite:

00000000 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
   0:	ff 92       	push	r15
   2:	0f 93       	push	r16
   4:	1f 93       	push	r17
   6:	f6 2e       	mov	r15, r22
	uint8_t timer = digitalPinToTimer(pin);
   8:	48 2f       	mov	r20, r24
   a:	50 e0       	ldi	r21, 0x00	; 0
   c:	ca 01       	movw	r24, r20
   e:	80 50       	subi	r24, 0x00	; 0
  10:	90 40       	sbci	r25, 0x00	; 0
  12:	fc 01       	movw	r30, r24
  14:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
  16:	ca 01       	movw	r24, r20
  18:	80 50       	subi	r24, 0x00	; 0
  1a:	90 40       	sbci	r25, 0x00	; 0
  1c:	fc 01       	movw	r30, r24
  1e:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
  20:	40 50       	subi	r20, 0x00	; 0
  22:	50 40       	sbci	r21, 0x00	; 0
  24:	fa 01       	movw	r30, r20
  26:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
  28:	00 23       	and	r16, r16
  2a:	01 f0       	breq	.+0      	; 0x2c <digitalWrite+0x2c>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  2c:	22 23       	and	r18, r18
  2e:	01 f0       	breq	.+0      	; 0x30 <digitalWrite+0x30>
  30:	82 2f       	mov	r24, r18
  32:	0e 94 00 00 	call	0	; 0x0 <digitalWrite>

	out = portOutputRegister(port);
  36:	e0 2f       	mov	r30, r16
  38:	f0 e0       	ldi	r31, 0x00	; 0
  3a:	ee 0f       	add	r30, r30
  3c:	ff 1f       	adc	r31, r31
  3e:	e0 50       	subi	r30, 0x00	; 0
  40:	f0 40       	sbci	r31, 0x00	; 0
  42:	a5 91       	lpm	r26, Z+
  44:	b4 91       	lpm	r27, Z+

	uint8_t oldSREG = SREG;
  46:	9f b7       	in	r25, 0x3f	; 63
	cli();
  48:	f8 94       	cli

	if (val == LOW) {
  4a:	ff 20       	and	r15, r15
  4c:	01 f4       	brne	.+0      	; 0x4e <digitalWrite+0x4e>
		*out &= ~bit;
  4e:	8c 91       	ld	r24, X
  50:	10 95       	com	r17
  52:	81 23       	and	r24, r17
  54:	00 c0       	rjmp	.+0      	; 0x56 <digitalWrite+0x56>
	} else {
		*out |= bit;
  56:	8c 91       	ld	r24, X
  58:	81 2b       	or	r24, r17
  5a:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
  5c:	9f bf       	out	0x3f, r25	; 63
}
  5e:	1f 91       	pop	r17
  60:	0f 91       	pop	r16
  62:	ff 90       	pop	r15
  64:	08 95       	ret

Disassembly of section .text.digitalRead:

00000000 <digitalRead>:

int digitalRead(uint8_t pin)
{
   0:	0f 93       	push	r16
   2:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
   4:	48 2f       	mov	r20, r24
   6:	50 e0       	ldi	r21, 0x00	; 0
   8:	ca 01       	movw	r24, r20
   a:	80 50       	subi	r24, 0x00	; 0
   c:	90 40       	sbci	r25, 0x00	; 0
   e:	fc 01       	movw	r30, r24
  10:	24 91       	lpm	r18, Z+
	uint8_t bit = digitalPinToBitMask(pin);
  12:	ca 01       	movw	r24, r20
  14:	80 50       	subi	r24, 0x00	; 0
  16:	90 40       	sbci	r25, 0x00	; 0
  18:	fc 01       	movw	r30, r24
  1a:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
  1c:	40 50       	subi	r20, 0x00	; 0
  1e:	50 40       	sbci	r21, 0x00	; 0
  20:	fa 01       	movw	r30, r20
  22:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
  24:	11 23       	and	r17, r17
  26:	01 f4       	brne	.+0      	; 0x28 <digitalRead+0x28>
  28:	20 e0       	ldi	r18, 0x00	; 0
  2a:	30 e0       	ldi	r19, 0x00	; 0
  2c:	00 c0       	rjmp	.+0      	; 0x2e <digitalRead+0x2e>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
  2e:	22 23       	and	r18, r18
  30:	01 f0       	breq	.+0      	; 0x32 <digitalRead+0x32>
  32:	82 2f       	mov	r24, r18
  34:	0e 94 00 00 	call	0	; 0x0 <digitalRead>

	if (*portInputRegister(port) & bit) return HIGH;
  38:	81 2f       	mov	r24, r17
  3a:	90 e0       	ldi	r25, 0x00	; 0
  3c:	88 0f       	add	r24, r24
  3e:	99 1f       	adc	r25, r25
  40:	80 50       	subi	r24, 0x00	; 0
  42:	90 40       	sbci	r25, 0x00	; 0
  44:	fc 01       	movw	r30, r24
  46:	a5 91       	lpm	r26, Z+
  48:	b4 91       	lpm	r27, Z+
  4a:	8c 91       	ld	r24, X
  4c:	20 e0       	ldi	r18, 0x00	; 0
  4e:	30 e0       	ldi	r19, 0x00	; 0
  50:	80 23       	and	r24, r16
  52:	01 f0       	breq	.+0      	; 0x54 <digitalRead+0x54>
  54:	21 e0       	ldi	r18, 0x01	; 1
  56:	30 e0       	ldi	r19, 0x00	; 0
	return LOW;
}
  58:	c9 01       	movw	r24, r18
  5a:	1f 91       	pop	r17
  5c:	0f 91       	pop	r16
  5e:	08 95       	ret

wiring_pulse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 000000f8  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000344  00000000  00000000  0000012c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   00000194  00000000  00000000  00000470  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.pulseIn 00000138  00000000  00000000  00000604  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .debug_frame  00000020  00000000  00000000  0000073c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  8 .debug_loc    00000279  00000000  00000000  0000075c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_pubnames 0000001e  00000000  00000000  000009d5  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_aranges 00000020  00000000  00000000  000009f3  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00000a13  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_str    0000016d  00000000  00000000  00000a2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.pulseIn:

00000000 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	8f 92       	push	r8
   2:	9f 92       	push	r9
   4:	af 92       	push	r10
   6:	bf 92       	push	r11
   8:	cf 92       	push	r12
   a:	df 92       	push	r13
   c:	ef 92       	push	r14
   e:	ff 92       	push	r15
  10:	0f 93       	push	r16
  12:	1f 93       	push	r17
  14:	cf 93       	push	r28
  16:	df 93       	push	r29
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
  18:	a8 2f       	mov	r26, r24
  1a:	b0 e0       	ldi	r27, 0x00	; 0
  1c:	cd 01       	movw	r24, r26
  1e:	80 50       	subi	r24, 0x00	; 0
  20:	90 40       	sbci	r25, 0x00	; 0
  22:	fc 01       	movw	r30, r24
  24:	84 90       	lpm	r8, Z+
	uint8_t port = digitalPinToPort(pin);
  26:	a0 50       	subi	r26, 0x00	; 0
  28:	b0 40       	sbci	r27, 0x00	; 0
  2a:	fd 01       	movw	r30, r26
  2c:	84 91       	lpm	r24, Z+
	uint8_t stateMask = (state ? bit : 0);
  2e:	66 23       	and	r22, r22
  30:	01 f4       	brne	.+0      	; 0x32 <pulseIn+0x32>
  32:	99 24       	eor	r9, r9
  34:	00 c0       	rjmp	.+0      	; 0x36 <pulseIn+0x36>
  36:	98 2c       	mov	r9, r8
	unsigned long width = 0; // keep initialization out of time critical area
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
  38:	6f ef       	ldi	r22, 0xFF	; 255
  3a:	a6 2e       	mov	r10, r22
  3c:	6f ef       	ldi	r22, 0xFF	; 255
  3e:	b6 2e       	mov	r11, r22
  40:	6f ef       	ldi	r22, 0xFF	; 255
  42:	c6 2e       	mov	r12, r22
  44:	6f e0       	ldi	r22, 0x0F	; 15
  46:	d6 2e       	mov	r13, r22
  48:	a2 22       	and	r10, r18
  4a:	b3 22       	and	r11, r19
  4c:	c4 22       	and	r12, r20
  4e:	d5 22       	and	r13, r21
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  50:	68 2f       	mov	r22, r24
  52:	70 e0       	ldi	r23, 0x00	; 0
  54:	66 0f       	add	r22, r22
  56:	77 1f       	adc	r23, r23
  58:	60 50       	subi	r22, 0x00	; 0
  5a:	70 40       	sbci	r23, 0x00	; 0
  5c:	ee 24       	eor	r14, r14
  5e:	ff 24       	eor	r15, r15
  60:	87 01       	movw	r16, r14
  62:	fb 01       	movw	r30, r22
  64:	a5 91       	lpm	r26, Z+
  66:	b4 91       	lpm	r27, Z+
  68:	00 c0       	rjmp	.+0      	; 0x6a <pulseIn+0x6a>
		if (numloops++ == maxloops)
  6a:	ea 14       	cp	r14, r10
  6c:	fb 04       	cpc	r15, r11
  6e:	0c 05       	cpc	r16, r12
  70:	1d 05       	cpc	r17, r13
  72:	01 f4       	brne	.+0      	; 0x74 <pulseIn+0x74>
  74:	00 c0       	rjmp	.+0      	; 0x76 <pulseIn+0x76>
  76:	08 94       	sec
  78:	e1 1c       	adc	r14, r1
  7a:	f1 1c       	adc	r15, r1
  7c:	01 1d       	adc	r16, r1
  7e:	11 1d       	adc	r17, r1
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  80:	8c 91       	ld	r24, X
  82:	88 21       	and	r24, r8
  84:	89 15       	cp	r24, r9
  86:	01 f0       	breq	.+0      	; 0x88 <pulseIn+0x88>
  88:	00 c0       	rjmp	.+0      	; 0x8a <pulseIn+0x8a>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
  8a:	ea 14       	cp	r14, r10
  8c:	fb 04       	cpc	r15, r11
  8e:	0c 05       	cpc	r16, r12
  90:	1d 05       	cpc	r17, r13
  92:	01 f4       	brne	.+0      	; 0x94 <pulseIn+0x94>
  94:	00 c0       	rjmp	.+0      	; 0x96 <pulseIn+0x96>
  96:	08 94       	sec
  98:	e1 1c       	adc	r14, r1
  9a:	f1 1c       	adc	r15, r1
  9c:	01 1d       	adc	r16, r1
  9e:	11 1d       	adc	r17, r1
  a0:	00 c0       	rjmp	.+0      	; 0xa2 <pulseIn+0xa2>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
  a2:	fb 01       	movw	r30, r22
  a4:	a5 91       	lpm	r26, Z+
  a6:	b4 91       	lpm	r27, Z+
  a8:	8c 91       	ld	r24, X
  aa:	88 21       	and	r24, r8
  ac:	89 15       	cp	r24, r9
  ae:	01 f4       	brne	.+0      	; 0xb0 <pulseIn+0xb0>
  b0:	20 e0       	ldi	r18, 0x00	; 0
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	40 e0       	ldi	r20, 0x00	; 0
  b6:	50 e0       	ldi	r21, 0x00	; 0
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
  b8:	fb 01       	movw	r30, r22
  ba:	c5 91       	lpm	r28, Z+
  bc:	d4 91       	lpm	r29, Z+
  be:	00 c0       	rjmp	.+0      	; 0xc0 <pulseIn+0xc0>
		if (numloops++ == maxloops)
  c0:	da 01       	movw	r26, r20
  c2:	c9 01       	movw	r24, r18
  c4:	8e 0d       	add	r24, r14
  c6:	9f 1d       	adc	r25, r15
  c8:	a0 1f       	adc	r26, r16
  ca:	b1 1f       	adc	r27, r17
  cc:	8a 15       	cp	r24, r10
  ce:	9b 05       	cpc	r25, r11
  d0:	ac 05       	cpc	r26, r12
  d2:	bd 05       	cpc	r27, r13
  d4:	01 f0       	breq	.+0      	; 0xd6 <pulseIn+0xd6>
			return 0;
		width++;
  d6:	2f 5f       	subi	r18, 0xFF	; 255
  d8:	3f 4f       	sbci	r19, 0xFF	; 255
  da:	4f 4f       	sbci	r20, 0xFF	; 255
  dc:	5f 4f       	sbci	r21, 0xFF	; 255
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask) {
  de:	88 81       	ld	r24, Y
  e0:	88 21       	and	r24, r8
  e2:	89 15       	cp	r24, r9
  e4:	01 f0       	breq	.+0      	; 0xe6 <pulseIn+0xe6>

	// convert the reading to microseconds. The loop has been determined
	// to be 20 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 21 + 16); 
  e6:	ca 01       	movw	r24, r20
  e8:	b9 01       	movw	r22, r18
  ea:	25 e1       	ldi	r18, 0x15	; 21
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	50 e0       	ldi	r21, 0x00	; 0
  f2:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
  f6:	9b 01       	movw	r18, r22
  f8:	ac 01       	movw	r20, r24
  fa:	20 5f       	subi	r18, 0xF0	; 240
  fc:	3f 4f       	sbci	r19, 0xFF	; 255
  fe:	4f 4f       	sbci	r20, 0xFF	; 255
 100:	5f 4f       	sbci	r21, 0xFF	; 255
 102:	84 e0       	ldi	r24, 0x04	; 4
 104:	56 95       	lsr	r21
 106:	47 95       	ror	r20
 108:	37 95       	ror	r19
 10a:	27 95       	ror	r18
 10c:	8a 95       	dec	r24
 10e:	01 f4       	brne	.+0      	; 0x110 <pulseIn+0x110>
 110:	00 c0       	rjmp	.+0      	; 0x112 <pulseIn+0x112>
 112:	20 e0       	ldi	r18, 0x00	; 0
 114:	30 e0       	ldi	r19, 0x00	; 0
 116:	40 e0       	ldi	r20, 0x00	; 0
 118:	50 e0       	ldi	r21, 0x00	; 0
}
 11a:	b9 01       	movw	r22, r18
 11c:	ca 01       	movw	r24, r20
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	ff 90       	pop	r15
 128:	ef 90       	pop	r14
 12a:	df 90       	pop	r13
 12c:	cf 90       	pop	r12
 12e:	bf 90       	pop	r11
 130:	af 90       	pop	r10
 132:	9f 90       	pop	r9
 134:	8f 90       	pop	r8
 136:	08 95       	ret

wiring_shift.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000034  2**0
                  ALLOC
  3 .debug_abbrev 000000cf  00000000  00000000  00000034  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000241  00000000  00000000  00000103  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_line   000001b1  00000000  00000000  00000344  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .text.shiftOut 00000084  00000000  00000000  000004f5  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  7 .text.shiftIn 00000080  00000000  00000000  00000579  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  8 .debug_frame  00000030  00000000  00000000  000005fc  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  9 .debug_loc    000000f5  00000000  00000000  0000062c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 10 .debug_pubnames 0000002b  00000000  00000000  00000721  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 11 .debug_aranges 00000028  00000000  00000000  0000074c  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00000774  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
 13 .debug_str    00000100  00000000  00000000  00000794  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text.shiftOut:

00000000 <shiftOut>:
	}
	return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
   0:	bf 92       	push	r11
   2:	cf 92       	push	r12
   4:	df 92       	push	r13
   6:	ef 92       	push	r14
   8:	ff 92       	push	r15
   a:	0f 93       	push	r16
   c:	1f 93       	push	r17
   e:	cf 93       	push	r28
  10:	df 93       	push	r29
  12:	e8 2e       	mov	r14, r24
  14:	f6 2e       	mov	r15, r22
  16:	b4 2e       	mov	r11, r20
  18:	c7 e0       	ldi	r28, 0x07	; 7
  1a:	d0 e0       	ldi	r29, 0x00	; 0
  1c:	02 2f       	mov	r16, r18
  1e:	10 e0       	ldi	r17, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
			digitalWrite(dataPin, !!(val & (1 << i)));
  20:	87 e0       	ldi	r24, 0x07	; 7
  22:	c8 2e       	mov	r12, r24
  24:	d1 2c       	mov	r13, r1
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
		if (bitOrder == LSBFIRST)
  26:	bb 20       	and	r11, r11
  28:	01 f4       	brne	.+0      	; 0x2a <shiftOut+0x2a>
			digitalWrite(dataPin, !!(val & (1 << i)));
  2a:	b6 01       	movw	r22, r12
  2c:	6c 1b       	sub	r22, r28
  2e:	7d 0b       	sbc	r23, r29
  30:	c8 01       	movw	r24, r16
  32:	00 c0       	rjmp	.+0      	; 0x34 <shiftOut+0x34>
  34:	95 95       	asr	r25
  36:	87 95       	ror	r24
  38:	6a 95       	dec	r22
  3a:	02 f4       	brpl	.+0      	; 0x3c <shiftOut+0x3c>
  3c:	bc 01       	movw	r22, r24
  3e:	00 c0       	rjmp	.+0      	; 0x40 <shiftOut+0x40>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
  40:	b8 01       	movw	r22, r16
  42:	0c 2e       	mov	r0, r28
  44:	00 c0       	rjmp	.+0      	; 0x46 <shiftOut+0x46>
  46:	75 95       	asr	r23
  48:	67 95       	ror	r22
  4a:	0a 94       	dec	r0
  4c:	02 f4       	brpl	.+0      	; 0x4e <shiftOut+0x4e>
  4e:	61 70       	andi	r22, 0x01	; 1
  50:	8e 2d       	mov	r24, r14
  52:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
			
		digitalWrite(clockPin, HIGH);
  56:	8f 2d       	mov	r24, r15
  58:	61 e0       	ldi	r22, 0x01	; 1
  5a:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
		digitalWrite(clockPin, LOW);		
  5e:	8f 2d       	mov	r24, r15
  60:	60 e0       	ldi	r22, 0x00	; 0
  62:	0e 94 00 00 	call	0	; 0x0 <shiftOut>
  66:	21 97       	sbiw	r28, 0x01	; 1

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
  68:	9f ef       	ldi	r25, 0xFF	; 255
  6a:	cf 3f       	cpi	r28, 0xFF	; 255
  6c:	d9 07       	cpc	r29, r25
  6e:	01 f4       	brne	.+0      	; 0x70 <shiftOut+0x70>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
  70:	df 91       	pop	r29
  72:	cf 91       	pop	r28
  74:	1f 91       	pop	r17
  76:	0f 91       	pop	r16
  78:	ff 90       	pop	r15
  7a:	ef 90       	pop	r14
  7c:	df 90       	pop	r13
  7e:	cf 90       	pop	r12
  80:	bf 90       	pop	r11
  82:	08 95       	ret

Disassembly of section .text.shiftIn:

00000000 <shiftIn>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   0:	cf 92       	push	r12
   2:	df 92       	push	r13
   4:	ef 92       	push	r14
   6:	ff 92       	push	r15
   8:	0f 93       	push	r16
   a:	1f 93       	push	r17
   c:	cf 93       	push	r28
   e:	df 93       	push	r29
  10:	f8 2e       	mov	r15, r24
  12:	06 2f       	mov	r16, r22
  14:	e4 2e       	mov	r14, r20
  16:	10 e0       	ldi	r17, 0x00	; 0
  18:	c7 e0       	ldi	r28, 0x07	; 7
  1a:	d0 e0       	ldi	r29, 0x00	; 0
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
		if (bitOrder == LSBFIRST)
			value |= digitalRead(dataPin) << i;
  1c:	97 e0       	ldi	r25, 0x07	; 7
  1e:	c9 2e       	mov	r12, r25
  20:	d1 2c       	mov	r13, r1
uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
		digitalWrite(clockPin, HIGH);
  22:	80 2f       	mov	r24, r16
  24:	61 e0       	ldi	r22, 0x01	; 1
  26:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		if (bitOrder == LSBFIRST)
  2a:	ee 20       	and	r14, r14
  2c:	01 f4       	brne	.+0      	; 0x2e <shiftIn+0x2e>
			value |= digitalRead(dataPin) << i;
  2e:	8f 2d       	mov	r24, r15
  30:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  34:	96 01       	movw	r18, r12
  36:	2c 1b       	sub	r18, r28
  38:	3d 0b       	sbc	r19, r29
  3a:	00 c0       	rjmp	.+0      	; 0x3c <shiftIn+0x3c>
  3c:	88 0f       	add	r24, r24
  3e:	99 1f       	adc	r25, r25
  40:	2a 95       	dec	r18
  42:	02 f4       	brpl	.+0      	; 0x44 <shiftIn+0x44>
  44:	00 c0       	rjmp	.+0      	; 0x46 <shiftIn+0x46>
		else
			value |= digitalRead(dataPin) << (7 - i);
  46:	8f 2d       	mov	r24, r15
  48:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  4c:	0c 2e       	mov	r0, r28
  4e:	00 c0       	rjmp	.+0      	; 0x50 <shiftIn+0x50>
  50:	88 0f       	add	r24, r24
  52:	99 1f       	adc	r25, r25
  54:	0a 94       	dec	r0
  56:	02 f4       	brpl	.+0      	; 0x58 <shiftIn+0x58>
  58:	18 2b       	or	r17, r24
		digitalWrite(clockPin, LOW);
  5a:	80 2f       	mov	r24, r16
  5c:	60 e0       	ldi	r22, 0x00	; 0
  5e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  62:	21 97       	sbiw	r28, 0x01	; 1

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  64:	8f ef       	ldi	r24, 0xFF	; 255
  66:	cf 3f       	cpi	r28, 0xFF	; 255
  68:	d8 07       	cpc	r29, r24
  6a:	01 f4       	brne	.+0      	; 0x6c <shiftIn+0x6c>
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
}
  6c:	81 2f       	mov	r24, r17
  6e:	df 91       	pop	r29
  70:	cf 91       	pop	r28
  72:	1f 91       	pop	r17
  74:	0f 91       	pop	r16
  76:	ff 90       	pop	r15
  78:	ef 90       	pop	r14
  7a:	df 90       	pop	r13
  7c:	cf 90       	pop	r12
  7e:	08 95       	ret
